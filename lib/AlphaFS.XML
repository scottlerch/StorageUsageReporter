<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AlphaFS</name>
    </assembly>
    <members>
        <member name="T:Alphaleonis.Win32.Filesystem.CopyProgressRoutine">
            <summary>Callback used by CopyFile and MoveFile to report progress about the operation.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.CopyMoveProgressDelegate">
            <summary>Delegate used by CopyFile and MoveFile to report progress about the operation.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.DiskSpaceInfo">
            <summary>Represents information space clusters.</summary>
            GetDiskFreeSpace()  : Retrieves information about the specified disk, including the amount of free space on the disk.
            GetDiskFreeSpaceEx(): Retrieves information about the amount of space that is available on a disk volume, which is the total amount of space, the total amount of free space, and the total amount of free space available to the user that is associated with the calling thread.
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DiskSpaceInfo.Equals(System.Object)">
            <param name="obj">Another object to compare to.</param>
            <returns>true if the specified Object is equal to the current Object; otherwise, false.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DiskSpaceInfo.GetHashCode">
            <summary>Serves as a hash function for a particular type.</summary>
            <returns>A hash code for the current Object.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DiskSpaceInfo.op_Equality(Alphaleonis.Win32.Filesystem.DiskSpaceInfo,Alphaleonis.Win32.Filesystem.DiskSpaceInfo)">
            <summary>Implements the operator ==</summary>
            <param name="left">A.</param>
            <param name="right">B.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DiskSpaceInfo.op_Inequality(Alphaleonis.Win32.Filesystem.DiskSpaceInfo,Alphaleonis.Win32.Filesystem.DiskSpaceInfo)">
            <summary>Implements the operator !=</summary>
            <param name="left">A.</param>
            <param name="right">B.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DiskSpaceInfo.#ctor(System.String,System.Boolean)">
            <summary>Initializes a DiskSpaceInfo structure.</summary>
            <param name="drivePath">A valid drive path or drive letter. This can be either uppercase or lowercase, 'a' to 'z' or a network share in the format: \\server\share</param>
            <param name="getClusterInfo"><c>true</c> to also retrieve disk cluster information, <c>false</c> to only retrieve size information.</param>
            <Remark>This is a Lazyloading object; call <see cref="M:Alphaleonis.Win32.Filesystem.DiskSpaceInfo.Refresh"/> to populate all properties first before accessing.</Remark>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DiskSpaceInfo._initGetClusterInfo">
            <summary>The initial "getClusterInfo" indicator that was passed to the constructor.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DiskSpaceInfo.Refresh">
            <summary>Refreshes the state of the object.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DiskSpaceInfo.Reset">
            <summary>Initializes all <see ref="T:Alphaleonis.Win32.Filesystem.DiskSpaceInfo"/> properties to 0.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DiskSpaceInfo.ToString">
            <summary>Returns the drive name.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DiskSpaceInfo.AvailableFreeSpacePercent">
            <summary>Indicates the amount of available free space on a drive, formatted as percentage.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DiskSpaceInfo.AvailableFreeSpaceUnitSize">
            <summary>Indicates the amount of available free space on a drive, formatted as a unit size.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DiskSpaceInfo.BytesPerSectorUnitSize">
            <summary>The number of bytes per sector, formatted as a unit size.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DiskSpaceInfo.ClusterSize">
            <summary>Returns the Clusters size.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DiskSpaceInfo.ClusterSizeUnitSize">
            <summary>Returns the Clusters size, formatted as a unit size.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DiskSpaceInfo.DriveName">
            <summary>Gets the name of a drive, such as C:\ or E:\</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DiskSpaceInfo.TotalSizeUnitSize">
            <summary>The total number of bytes on a disk that are available to the user who is associated with the calling thread, formatted as a unit size.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DiskSpaceInfo.UsePercentSuffix">
            <summary>true = suffix with "%"</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DiskSpaceInfo.UsedSpacePercent">
            <summary>Indicates the amount of used space on a drive, formatted as percentage.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DiskSpaceInfo.UsedSpaceUnitSize">
            <summary>Indicates the amount of used space on a drive, formatted as a unit size.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DiskSpaceInfo.FreeBytesAvailable">
            <summary>The total number of free bytes on a disk that are available to the user who is associated with the calling thread.</summary>
            <remarks>GetDiskFreeSpaceEx()</remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DiskSpaceInfo.TotalNumberOfBytes">
            <summary>The total number of bytes on a disk that are available to the user who is associated with the calling thread.</summary>
            <remarks>GetDiskFreeSpaceEx()</remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DiskSpaceInfo.TotalNumberOfFreeBytes">
            <summary>The total number of free bytes on a disk.</summary>
            <remarks>GetDiskFreeSpaceEx()</remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DiskSpaceInfo.BytesPerSector">
            <summary>The number of bytes per sector.</summary>
            <remarks>GetDiskFreeSpace()</remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DiskSpaceInfo.NumberOfFreeClusters">
            <summary>The total number of free clusters on the disk that are available to the user who is associated with the calling thread.</summary>
            <remarks>GetDiskFreeSpace()</remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DiskSpaceInfo.SectorsPerCluster">
            <summary>The number of sectors per cluster.</summary>
            <remarks>GetDiskFreeSpace()</remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DiskSpaceInfo.TotalNumberOfClusters">
            <summary>The total number of clusters on the disk that are available to the user who is associated with the calling thread.
            If per-user disk quotas are in use, this value may be less than the total number of clusters on the disk.
            </summary>
            <remarks>GetDiskFreeSpace()</remarks>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.DriveInfo">
            <summary>Provides access to information on a local or remote drive.</summary>
            <remarks>
            This class models a drive and provides methods and properties to query for drive information.
            Use DriveInfo to determine what drives are available, and what type of drives they are.
            You can also query to determine the capacity and available free space on the drive.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DriveInfo.Equals(System.Object)">
            <param name="obj">Another object to compare to.</param>
            <returns>true if the specified Object is equal to the current Object; otherwise, false.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DriveInfo.GetHashCode">
            <summary>Serves as a hash function for a particular type.</summary>
            <returns>A hash code for the current Object.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DriveInfo.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object with the data needed to serialize the target object.</summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DriveInfo.op_Equality(Alphaleonis.Win32.Filesystem.DriveInfo,Alphaleonis.Win32.Filesystem.DriveInfo)">
            <summary>Implements the operator ==</summary>
            <param name="left">A.</param>
            <param name="right">B.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DriveInfo.op_Inequality(Alphaleonis.Win32.Filesystem.DriveInfo,Alphaleonis.Win32.Filesystem.DriveInfo)">
            <summary>Implements the operator !=</summary>
            <param name="left">A.</param>
            <param name="right">B.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DriveInfo.#ctor(System.String)">
            <summary>Initializes a DriveInfo class.</summary>
            <param name="drivePath">A valid drive path or drive letter. This can be either uppercase or lowercase, 'a' to 'z' or a network share in the format: \\server\share</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DriveInfo.GetDrives">
            <summary>Retrieves the drive names of all logical drives and network shares, on a computer.</summary>
            <returns>A <see langref="DriveInfo[]"/> object that represents the logical drives and network shares, on a computer.</returns>
            <remarks>
            This method retrieves all logical drive names and network shares on a computer. You can use this information to iterate through the array
            and obtain information on the drives using other <see cref="T:Alphaleonis.Win32.Filesystem.DriveInfo"/> methods and properties. Use the <see cref="P:Alphaleonis.Win32.Filesystem.DriveInfo.IsReady"/> property to test
            whether a drive is ready because using this method on a drive that is not ready will throw a <see cref="T:System.IO.IOException"/>.
            </remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DriveInfo.GetDrives(System.Boolean)">
            <summary>Retrieves the drive names of all logical drives and network shares, on a computer.</summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> object that represents the logical drives and network shares, on a computer.</returns>
            <remarks>
            This method retrieves all logical drive names and network shares on a computer. You can use this information to iterate through the array
            and obtain information on the drives using other <see cref="T:Alphaleonis.Win32.Filesystem.DriveInfo"/> methods and properties. Use the <see cref="P:Alphaleonis.Win32.Filesystem.DriveInfo.IsReady"/> property to test
            whether a drive is ready because using this method on a drive that is not ready will throw a <see cref="T:System.IO.IOException"/>.
            </remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DriveInfo.GetDrives(System.Boolean,System.Boolean)">
            <summary>Retrieves the drive names of all logical drives and network shares, on a computer.</summary>
            <param name="fromEnvironment">Retrieve logical drives as known by the Environment.</param>
            <param name="isReady">Retrieve only when accessible (IsReady) logical drives.</param>
            <returns>An <see cref="T:System.Linq.Enumerable"/> <see cref="T:Alphaleonis.Win32.Filesystem.DriveInfo"/> object that represents the logical drives and network shares, on a computer.</returns>
            <remarks>
            This method retrieves all logical drive names and network shares on a computer. You can use this information to iterate through the array
            and obtain information on the drives using other <see cref="T:Alphaleonis.Win32.Filesystem.DriveInfo"/> methods and properties. Use the <see cref="P:Alphaleonis.Win32.Filesystem.DriveInfo.IsReady"/> property to test
            whether a drive is ready because using this method on a drive that is not ready will throw a <see cref="T:System.IO.IOException"/>.
            </remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DriveInfo.GetDrives(System.Boolean,System.Boolean,System.Boolean)">
            <summary>Retrieves the drive names of all logical drives and network shares, on a computer.</summary>
            <param name="fromEnvironment">Retrieve logical drives as known by the Environment.</param>
            <param name="isReady">Retrieve only when accessible (IsReady) logical drives.</param>
            <param name="removeDirectorySeparator">Remove the <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> from the logical drive name.</param>
            <returns>An <see cref="T:System.Linq.Enumerable"/> <see cref="T:Alphaleonis.Win32.Filesystem.DriveInfo"/> object that represents the logical drives and network shares, on a computer.</returns>
            <remarks>
            This method retrieves all logical drive names and network shares on a computer. You can use this information to iterate through the array
            and obtain information on the drives using other <see cref="T:Alphaleonis.Win32.Filesystem.DriveInfo"/> methods and properties. Use the <see cref="P:Alphaleonis.Win32.Filesystem.DriveInfo.IsReady"/> property to test
            whether a drive is ready because using this method on a drive that is not ready will throw a <see cref="T:System.IO.IOException"/>.
            </remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DriveInfo.ToString">
            <summary>Returns a drive name as a string.</summary>
            <returns>The name of the drive.</returns>
            <remarks>This method returns the Name property.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DriveInfo.GetVolumeInfo(System.Int32,System.Int32)">
            <summary>Retrieves information about the file system and volume associated with the specified root directory or filestream.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DriveInfo.AvailableFreeSpace">
            <summary>Indicates the amount of available free space on a drive.</summary>
            <returns>The amount of free space available on the drive, in bytes.</returns>
            <remarks>This property indicates the amount of free space available on the drive. Note that this number may be different from the <see cref="P:Alphaleonis.Win32.Filesystem.DriveInfo.TotalFreeSpace"/> number because this property takes into account disk quotas.</remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DriveInfo.DriveFormat">
            <summary>Gets the name of the file system, such as NTFS or FAT32.</summary>
            <remarks>Use DriveFormat to determine what formatting a drive uses.</remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DriveInfo.DriveType">
            <summary>Gets the drive type.</summary>
            <returns>One of the <see cref="T:System.IO.DriveType"/> values.</returns>
            <remarks>
            The DriveType property indicates whether a drive is any of: CDRom, Fixed, Unknown, Network, NoRootDirectory,
            Ram, Removable, or Unknown. Values are listed in the <see cref="T:System.IO.DriveType"/> enumeration.
            </remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DriveInfo.IsReady">
            <summary>Gets a value indicating whether a drive is ready.</summary>
            <returns><c>true</c> if the drive is ready; <c>false</c> if the drive is not ready.</returns>
            <remarks>
            IsReady indicates whether a drive is ready. For example, it indicates whether a CD is in a CD drive or whether
            a removable storage device is ready for read/write operations. If you do not test whether a drive is ready, and
            it is not ready, querying the drive using DriveInfo will raise an IOException.
            
            Do not rely on IsReady() to avoid catching exceptions from other members such as TotalSize, TotalFreeSpace, and DriveFormat.
            Between the time that your code checks IsReady and then accesses one of the other properties
            (even if the access occurs immediately after the check), a drive may have been disconnected or a disk may have been removed.
            </remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DriveInfo.Name">
            <summary>Gets the name of a drive.</summary>
            <returns>The name of the drive.</returns>
            <remarks>This property is the name assigned to the drive, such as C:\ or E:\</remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DriveInfo.RootDirectory">
            <summary>Gets the root directory of a drive.</summary>
            <returns>A DirectoryInfo object that contains the root directory of the drive.</returns>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DriveInfo.TotalFreeSpace">
            <summary>Gets the total amount of free space available on a drive.</summary>
            <returns>The total free space available on a drive, in bytes.</returns>
            <remarks>This property indicates the total amount of free space available on the drive, not just what is available to the current user.</remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DriveInfo.TotalSize">
            <summary>Gets the total size of storage space on a drive.</summary>
            <returns>The total size of the drive, in bytes.</returns>
            <remarks>This property indicates the total size of the drive in bytes, not just what is available to the current user.</remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DriveInfo.VolumeLabel">
            <summary>Gets or sets the volume label of a drive.</summary>
            <returns>The volume label.</returns>
            <remarks>
            The label length is determined by the operating system. For example, NTFS allows a volume label
            to be up to 32 characters long. Note that null is a valid VolumeLabel.
            </remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DriveInfo.DiskSpaceInfo">
            <summary>Returns the <see ref="T:Alphaleonis.Win32.Filesystem.DiskSpaceInfo"/> instance.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DriveInfo.IsDosDeviceSubstitute">
            <summary>If true, this drive is a SUBST.EXE / DefineDosDevice drive mapping.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DriveInfo.IsUnc">
            <summary>If true, this drive is a unc path.</summary>
            <remarks>Only retrieve this information if we're dealing with a real network share mapping: http://alphafs.codeplex.com/discussions/316583</remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DriveInfo.IsVolume">
            <summary>Determines whether the specified volume name is a defined volume on the current computer.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DriveInfo.DosDeviceName">
            <summary>The MS-DOS device name.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DriveInfo.VolumeInfo">
            <summary>Contains information about a file-system volume.</summary>
            <returns>A VolumeInfo object that contains file-system volume information of the drive.</returns>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.BackupStreamTypes">
            <summary>The type of the data contained in the backup stream.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.BackupStreamTypes.None">
            <summary>This indicates an error.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.BackupStreamTypes.Data">
            <summary>Standard data. This corresponds to the NTFS $DATA stream type on the default (unnamed) data stream.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.BackupStreamTypes.ExtendedAttributesData">
            <summary>Extended attribute data. This corresponds to the NTFS $EA stream type.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.BackupStreamTypes.SecurityData">
            <summary>Security descriptor data.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.BackupStreamTypes.AlternateData">
            <summary>Alternative data streams. This corresponds to the NTFS $DATA stream type on a named data stream.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.BackupStreamTypes.Link">
            <summary>Hard link information. This corresponds to the NTFS $FILE_NAME stream type.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.BackupStreamTypes.PropertyData">
            <summary>Property data.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.BackupStreamTypes.ObjectId">
            <summary>Objects identifiers. This corresponds to the NTFS $OBJECT_ID stream type.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.BackupStreamTypes.ReparseData">
            <summary>Reparse points. This corresponds to the NTFS $REPARSE_POINT stream type.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.BackupStreamTypes.SparseBlock">
            <summary>Sparse file. This corresponds to the NTFS $DATA stream type for a sparse file.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.BackupStreamTypes.TxfsData">
            <summary>Transactional NTFS (TxF) data stream.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.CopyMoveProgressResult">
            <summary>The <see cref="T:Alphaleonis.Win32.Filesystem.CopyProgressRoutine"/> function should return one of the following values.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.CopyMoveProgressResult.Continue">
            <summary>Continue the copy operation.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.CopyMoveProgressResult.Cancel">
            <summary>Cancel the copy operation and delete the destination file.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.CopyMoveProgressResult.Stop">
            <summary>Stop the copy operation. It can be restarted at a later time.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.CopyMoveProgressResult.Quiet">
            <summary>Continue the copy operation, but stop invoking <see cref="T:Alphaleonis.Win32.Filesystem.CopyProgressRoutine"/> to report progress.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.DosDeviceAttributes">
            <summary>Defines the controllable aspects of the <see cref="M:Alphaleonis.Win32.Filesystem.Volume.DefineDosDevice(System.String,System.String,Alphaleonis.Win32.Filesystem.DosDeviceAttributes)"/> method.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DosDeviceAttributes.None">
            <summary>Default.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DosDeviceAttributes.RawTargetPath">
            <summary>Uses the targetPath string as is. Otherwise, it is converted from an MS-DOS path to a path.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DosDeviceAttributes.RemoveDefinition">
            <summary>Removes the specified definition for the specified device. To determine which definition to remove,
            the function walks the list of mappings for the device, looking for a match of targetPath against
            a prefix of each mapping associated with this device. The first mapping that matches is the one removed,
            and then the function returns. If targetPath is null or a pointer to a null string, the function will
            remove the first mapping associated with the device and pop the most recent one pushed. If there is nothing
            left to pop, the device name will be removed. If this value is not specified, the string pointed to by the
            targetPath parameter will become the new mapping for this device.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DosDeviceAttributes.ExactMatchOnRemove">
            <summary>If this value is specified along with RemoveDefinition, the function will use an exact match to determine
            which mapping to remove. Use this value to ensure that you do not delete something that you did not define.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DosDeviceAttributes.NoBroadcastSystem">
            <summary>Do not broadcast the WM_SETTINGCHANGE message.
            By default, this message is broadcast to notify the shell  and applications of the change.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.DefaultFileBufferSize">
            <summary>DefaultFileBufferSize = 4096; Default type buffer size used for reading and writing files.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.CopyOptsFail">
            <summary>Combination of <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.FailIfExists"/> and <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.NoBuffering"/></summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.CopyOptsNone">
            <summary>Combination of <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.None"/> and <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.NoBuffering"/></summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.MaxPath">
            <summary>MaxPath = 260
            The specified path, file name, or both exceed the system-defined maximum length.
            For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. 
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.MaxPathUnicode">
            <summary>MaxPathUnicode = 32000</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.MoveOptsReplace">
            <summary>Combination of <see cref="F:Alphaleonis.Win32.Filesystem.MoveOptions.ReplaceExisting"/> and <see cref="F:Alphaleonis.Win32.Filesystem.MoveOptions.CopyAllowed"/></summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.BasicSearch">
            <summary>Does not query the short file name, improving overall enumeration speed.</summary>
            <remarks>This value is not supported until Windows Server 2008 R2 and Windows 7.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.DefaultFileEncoding">
            <summary>DefaultFileEncoding = Encoding.UTF8; Default type of Encoding used for reading and writing files.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.LargeCache">
            <summary>Uses a larger buffer for directory queries, which can increase performance of the find operation.</summary>
            <remarks>This value is not supported until Windows Server 2008 R2 and Windows 7.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.IsValidHandle(System.Runtime.InteropServices.SafeHandle,System.Boolean)">
            <summary>Check is the current handle is not null, not closed and not invalid.</summary>
            <param name="handle">The current handle to check.</param>
            <param name="raiseException"><c>true</c> will throw an <exception cref="P:Alphaleonis.Win32.Resources.HandleInvalid"/>, <c>false</c> will not raise this exception..</param>
            <returns><c>true</c> on success, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.IsValidStream(System.IO.FileStream,System.Boolean)">
            <summary>Check is the current stream is not null, not closed and not invalid.</summary>
            <param name="stream">The current stream to check.</param>
            <param name="raiseException"><c>true</c> will throw an <exception cref="P:Alphaleonis.Win32.Resources.HandleInvalid"/>, <c>false</c> will not raise this exception.</param>
            <returns><c>true</c> on success, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.SetErrorMode(Alphaleonis.Win32.Filesystem.NativeMethods.NativeErrorMode)">
            <summary>Controls whether the system will handle the specified types of serious errors or whether the process will handle them.</summary>
            <returns>The return value is the previous state of the error-mode bit attributes.</returns>
            <remarks>
            Because the error mode is set for the entire process, you must ensure that multi-threaded applications
            do not set different error-mode attributes. Doing so can lead to inconsistent error handling.
            </remarks>
            <remarks>SetLastError is set to false.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.TrimTrailingChars(System.String,System.Char[])">
            <summary>Removes all trailing occurrences of a set of characters specified in an array from the current <see cref="T:System.String"/> object.</summary>
            <param name="value">The string to trim.</param>
            <param name="trimChars">An array of Unicode characters to remove.</param>
            <returns>The string that remains after all occurrences of the characters in the trimChars parameter are removed from the end of the current string.</returns>
            <remarks>This method is an optimized <see cref="M:System.String.TrimEnd(System.Char[])"/> implementation.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.UnitSizeToText``1(``0,System.Boolean[])">
            <summary>Convert a number of type T to string with UnitSize or Percentage suffixed.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.PercentCalculate(System.Double,System.Double,System.Double)">
            <summary>Calculates a percentage value.</summary>
            <param name="currentValue"></param>
            <param name="minimumValue"></param>
            <param name="maximumValue"></param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.BackupRead(Microsoft.Win32.SafeHandles.SafeFileHandle,Alphaleonis.Win32.SafeGlobalMemoryBufferHandle,System.UInt32,System.UInt32@,System.Boolean,System.Boolean,System.IntPtr@)">
            <summary>The BackupRead function can be used to back up a file or directory, including the security information.
            The function reads data associated with a specified file or directory into a buffer, which can then be written to the backup medium using the WriteFile function.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero, indicating that an I/O error occurred. To get extended error information, call GetLastError.
            </returns>
            <remarks>This function is not intended for use in backing up files encrypted under the Encrypted File System. Use ReadEncryptedFileRaw for that purpose.</remarks>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.BackupSeek(Microsoft.Win32.SafeHandles.SafeFileHandle,System.UInt32,System.UInt32,System.UInt32@,System.UInt32@,System.IntPtr@)">
            <summary>The BackupSeek function seeks forward in a data stream initially accessed by using the BackupRead or BackupWrite function.</summary>
            <returns>
            If the function could seek the requested amount, the function returns a nonzero value.
            If the function could not seek the requested amount, the function returns zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>
            Applications use the BackupSeek function to skip portions of a data stream that cause errors.
            This function does not seek across stream headers. For example, this function cannot be used to skip the stream name.
            If an application attempts to seek past the end of a substream, the function fails, the lpdwLowByteSeeked and lpdwHighByteSeeked parameters
            indicate the actual number of bytes the function seeks, and the file position is placed at the start of the next stream header.
            </remarks>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.BackupWrite(Microsoft.Win32.SafeHandles.SafeFileHandle,Alphaleonis.Win32.SafeGlobalMemoryBufferHandle,System.UInt32,System.UInt32@,System.Boolean,System.Boolean,System.IntPtr@)">
            <summary>The BackupWrite function can be used to restore a file or directory that was backed up using BackupRead.
            Use the ReadFile function to get a stream of data from the backup medium, then use BackupWrite to write the data to the specified file or directory.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero, indicating that an I/O error occurred. To get extended error information, call GetLastError.
            </returns>
            <remarks>This function is not intended for use in restoring files encrypted under the Encrypted File System. Use WriteEncryptedFileRaw for that purpose.</remarks>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.DeviceIoControl(Microsoft.Win32.SafeHandles.SafeFileHandle,Alphaleonis.Win32.Filesystem.DeviceIoControlCode,System.IntPtr,System.UInt32,Alphaleonis.Win32.SafeGlobalMemoryBufferHandle,System.UInt32,System.UInt32@,System.IntPtr)">
            <summary>Sends a control code directly to a specified device driver, causing the corresponding device to perform the corresponding operation.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.CreateDirectory(System.String,Alphaleonis.Win32.Security.NativeMethods.SecurityAttributes)">
            <summary>Creates a new directory. 
            If the underlying file system supports security on files and directories, the function applies a specified security descriptor to the new directory.
            </summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP [desktop apps | Windows Store apps]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps | Windows Store apps]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.CreateDirectoryEx(System.String,System.String,Alphaleonis.Win32.Security.NativeMethods.SecurityAttributes)">
            <summary>Creates a new directory with the attributes of a specified template directory.
            If the underlying file system supports security on files and directories, the function applies a specified security descriptor to the new directory.
            The new directory retains the other attributes of the specified template directory.
            </summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.CreateDirectoryTransacted(System.String,System.String,Alphaleonis.Win32.Security.NativeMethods.SecurityAttributes,System.Runtime.InteropServices.SafeHandle)">
            <summary>Creates a new directory as a transacted operation, with the attributes of a specified template directory.
            If the underlying file system supports security on files and directories, the function applies a specified security descriptor to the new directory.
            The new directory retains the other attributes of the specified template directory.
            </summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows Vista [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2008 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.RemoveDirectory(System.String)">
            <summary>Deletes an existing empty directory.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>
            RemoveDirectory removes a directory junction, even if the contents of the target are not empty; the function removes directory
            junctions regardless of the state of the target object. For more information on junctions, see Hard Links and Junctions.
            </remarks>
            <remarks>Minimum supported client: Windows XP [desktop apps | Windows Store apps]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps | Windows Store apps]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.RemoveDirectoryTransacted(System.String,System.Runtime.InteropServices.SafeHandle)">
            <summary>Deletes an existing empty directory as a transacted operation.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>
            RemoveDirectory removes a directory junction, even if the contents of the target are not empty; the function removes directory
            junctions regardless of the state of the target object. For more information on junctions, see Hard Links and Junctions.
            </remarks>
            <remarks>Minimum supported client: Windows Vista [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2008 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetDiskFreeSpace(System.String,System.UInt32@,System.UInt32@,System.UInt32@,System.UInt32@)">
            <summary>Retrieves information about the specified disk, including the amount of free space on the disk.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>
            Symbolic link behavior; if the path points to a symbolic link, the operation is performed on the target.
            </remarks>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetDiskFreeSpaceEx(System.String,System.UInt64@,System.UInt64@,System.UInt64@)">
            <summary>Retrieves information about the amount of space that is available on a disk volume, which is the total amount of space,
            the total amount of free space, and the total amount of free space available to the user that is associated with the calling thread.
            </summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>
            Symbolic link behavior; if the path points to a symbolic link, the operation is performed on the target.
            </remarks>
            <remarks>Minimum supported client: Windows XP [desktop apps | Windows Store apps]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps | Windows Store apps]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetDriveType(System.String)">
            <summary>Determines whether a disk drive is a removable, fixed, CD-ROM, RAM disk, or network drive.</summary>
            <returns>The return value specifies the type of drive, which can be one of the following <see cref="T:System.IO.DriveType"/> values.</returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetLogicalDrives">
            <summary>Retrieves a bitmask representing the currently available disk drives.</summary>
            <returns>
            If the function succeeds, the return value is a bitmask representing the currently available disk drives.
            Bit position 0 (the least-significant bit) is drive A, bit position 1 is drive B, bit position 2 is drive C, and so on.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.AssocQueryString(Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes,Alphaleonis.Win32.Filesystem.Shell32.AssociationString,System.String,System.String,System.Text.StringBuilder,System.UInt32@)">
            <summary>Searches for and retrieves a file or protocol association-related string from the registry.</summary>
            <returns>Return value Type: HRESULT. Returns a standard COM error value, including the following: S_OK, E_POINTER and S_FALSE.</returns>
            <remarks>Minimum supported client: Windows 2000 Professional</remarks>
            <remarks>Minimum supported server: Windows 2000 Server</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.CopyFileEx(System.String,System.String,Alphaleonis.Win32.Filesystem.NativeMethods.NativeCopyProgressRoutine,System.IntPtr,System.Int32@,Alphaleonis.Win32.Filesystem.CopyOptions)">
            <summary>Copies an existing file to a new file, notifying the application of its progress through a callback function.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.CopyFileTransacted(System.String,System.String,Alphaleonis.Win32.Filesystem.NativeMethods.NativeCopyProgressRoutine,System.IntPtr,System.Int32@,Alphaleonis.Win32.Filesystem.CopyOptions,System.Runtime.InteropServices.SafeHandle)">
            <summary>Copies an existing file to a new file as a transacted operation, notifying the application of its progress through a callback function.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows Vista [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2008 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.CreateFile(System.String,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,Alphaleonis.Win32.Security.NativeMethods.SecurityAttributes,System.IO.FileMode,Alphaleonis.Win32.Filesystem.EFileAttributes,Alphaleonis.Win32.SafeGlobalMemoryBufferHandle)">
            <summary>Creates or opens a file or I/O device. The most commonly used I/O devices are as follows: file, file stream, directory, physical disk, volume, console buffer, tape drive, communications resource, mailslot, and pipe.</summary>
            <returns>
            If the function succeeds, the return value is an open handle to the specified file, device, named pipe, or mail slot.
            If the function fails, the return value is Win32Errors.ERROR_INVALID_HANDLE. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.CreateFileMapping(Microsoft.Win32.SafeHandles.SafeFileHandle,Alphaleonis.Win32.Security.NativeMethods.SecurityAttributes,System.UInt32,System.UInt32,System.UInt32,System.String)">
            <summary>Creates or opens a named or unnamed file mapping object for a specified file.</summary>
            <returns>
            If the function succeeds, the return value is a handle to the newly created file mapping object.
            If the function fails, the return value is <see langword="null"/>.
            </returns>
            <remarks>SetLastError is set to false.</remarks>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.CreateFileTransacted(System.String,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,Alphaleonis.Win32.Security.NativeMethods.SecurityAttributes,System.IO.FileMode,Alphaleonis.Win32.Filesystem.EFileAttributes,System.Runtime.InteropServices.SafeHandle,System.Runtime.InteropServices.SafeHandle,System.IntPtr,System.IntPtr)">
            <summary>Creates or opens a file or I/O device. The most commonly used I/O devices are as follows: file, file stream, directory, physical disk, volume, console buffer, tape drive, communications resource, mailslot, and pipe.</summary>
            <returns>
            If the function succeeds, the return value is an open handle to the specified file, device, named pipe, or mail slot.
            If the function fails, the return value is Win32Errors.ERROR_INVALID_HANDLE". To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows Vista [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2008 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.CreateHardLink(System.String,System.String,System.IntPtr)">
            <summary>Establishes a hard link between an existing file and a new file. 
            This function is only supported on the NTFS file system, and only for files, not directories.
            </summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero (0). To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.CreateHardLinkTransacted(System.String,System.String,System.IntPtr,System.Runtime.InteropServices.SafeHandle)">
            <summary>Establishes a hard link between an existing file and a new file as a transacted operation.
            This function is only supported on the NTFS file system, and only for files, not directories.
            </summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero (0). To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows Vista [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2008 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.CreateSymbolicLink(System.String,System.String,Alphaleonis.Win32.Filesystem.SymbolicLinkTarget)">
            <summary>Creates a symbolic link.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero (0). To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows Vista [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2008 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.CreateSymbolicLinkTransacted(System.String,System.String,Alphaleonis.Win32.Filesystem.SymbolicLinkTarget,System.Runtime.InteropServices.SafeHandle)">
            <summary>Creates a symbolic link as a transacted operation.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero (0). To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows Vista [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2008 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.DecryptFile(System.String,System.UInt32)">
            <summary>Decrypts an encrypted file or directory.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>
            The DecryptFile function requires exclusive access to the file being decrypted, and will fail if another process is using the file.
            If the file is not encrypted, DecryptFile simply returns a nonzero value, which indicates success.
            If lpFileName specifies a read-only file, the function fails and GetLastError returns ERROR_FILE_READ_ONLY.
            If lpFileName specifies a directory that contains a read-only file, the functions succeeds but the directory is not decrypted.
            </remarks>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.DeleteFile(System.String)">
            <summary>Deletes an existing file.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero (0). To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP [desktop apps | Windows Store apps]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps | Windows Store apps]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.DeleteFileTransacted(System.String,System.Runtime.InteropServices.SafeHandle)">
            <summary>Deletes an existing file as a transacted operation.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero (0). To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows Vista [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2008 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.EncryptFile(System.String)">
            <summary>Encrypts a file or directory. All data streams in a file are encrypted. All new files created in an encrypted directory are encrypted.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>
            The EncryptFile function requires exclusive access to the file being encrypted, and will fail if another process is using the file.
            If the file is already encrypted, EncryptFile simply returns a nonzero value, which indicates success. If the file is compressed,
            EncryptFile will decompress the file before encrypting it. If lpFileName specifies a read-only file, the function fails and GetLastError
            returns ERROR_FILE_READ_ONLY. If lpFileName specifies a directory that contains a read-only file, the functions succeeds but the directory is not encrypted.
            </remarks>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.EncryptionDisable(System.String,System.Boolean)">
            <summary>Disables or enables encryption of the specified directory and the files in it.
            It does not affect encryption of subdirectories below the indicated directory. 
            </summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>
            EncryptionDisable() disables encryption of directories and files.
            It does not affect the visibility of files with the FILE_ATTRIBUTE_SYSTEM attribute set.
            This method will create/change the file "Desktop.ini" and wil set Encryption value: "Disable=0|1"
            </remarks>
            <remarks>Minimum supported client: Windows XP Professional [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.FileEncryptionStatus(System.String,Alphaleonis.Win32.Filesystem.FileEncryptionStatus@)">
            <summary>Retrieves the encryption status of the specified file.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.FindClose(System.IntPtr)">
            <summary>Closes a file search handle opened by the FindFirstFile, FindFirstFileEx, FindFirstFileNameW, FindFirstFileNameTransactedW, FindFirstFileTransacted, FindFirstStreamTransactedW, or FindFirstStreamW functions.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>SetLastError is set to false.</remarks>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.FindExecutable(System.String,System.String,System.Text.StringBuilder)">
            <summary>Retrieves the name of and handle to the executable (.exe) file associated with a specific document file.
            This is the application that is launched when the document file is directly double-clicked or when Open is chosen from the file's shortcut menu.
            </summary>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows 2000 Server [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.FindFirstFileEx(System.String,Alphaleonis.Win32.Filesystem.NativeMethods.FindExInfoLevels,Alphaleonis.Win32.Filesystem.NativeMethods.Win32FindData@,Alphaleonis.Win32.Filesystem.NativeMethods.FindExSearchOps,System.IntPtr,Alphaleonis.Win32.Filesystem.NativeMethods.FindExAdditionalFlags)">
            <summary>Searches a directory for a file or subdirectory with a name and attributes that match those specified.</summary>
            <returns>
            If the function succeeds, the return value is a search handle used in a subsequent call to FindNextFile or FindClose, and the lpFindFileData parameter contains information about the first file or directory found.
            If the function fails or fails to locate files from the search string in the lpFileName parameter, the return value is INVALID_HANDLE_VALUE and the contents of lpFindFileData are indeterminate. To get extended error information, call the GetLastError function.
            </returns>
            <remarks>A trailing backslash is not allowed and will be removed.</remarks>
            <remarks>Minimum supported client: Windows XP [desktop apps | Windows Store apps]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps | Windows Store apps]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.FindFirstFileTransacted(System.String,Alphaleonis.Win32.Filesystem.NativeMethods.FindExInfoLevels,Alphaleonis.Win32.Filesystem.NativeMethods.Win32FindData@,Alphaleonis.Win32.Filesystem.NativeMethods.FindExSearchOps,System.IntPtr,Alphaleonis.Win32.Filesystem.NativeMethods.FindExAdditionalFlags,System.Runtime.InteropServices.SafeHandle)">
            <summary>Searches a directory for a file or subdirectory with a name that matches a specific name as a transacted operation.</summary>
            <returns>
            If the function succeeds, the return value is a search handle used in a subsequent call to FindNextFile or FindClose, and the lpFindFileData parameter contains information about the first file or directory found.
            If the function fails or fails to locate files from the search string in the lpFileName parameter, the return value is INVALID_HANDLE_VALUE and the contents of lpFindFileData are indeterminate. To get extended error information, call the GetLastError function.
            </returns>
            <remarks>A trailing backslash is not allowed and will be removed.</remarks>
            <remarks>Minimum supported client: Windows Vista [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2008 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.FindFirstFileName(System.String,System.UInt32,System.UInt32@,System.Text.StringBuilder)">
            <summary>Creates an enumeration of all the hard links to the specified file. 
            The FindFirstFileNameW function returns a handle to the enumeration that can be used on subsequent calls to the FindNextFileNameW function.
            </summary>
            <returns>
            If the function succeeds, the return value is a search handle that can be used with the FindNextFileNameW function or closed with the FindClose function.
            If the function fails, the return value is INVALID_HANDLE_VALUE (0xffffffff). To get extended error information, call the GetLastError function.
            </returns>
            <remarks>Minimum supported client: Windows Vista [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2008 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.FindFirstFileNameTransacted(System.String,System.Int32,System.UInt32@,System.Text.StringBuilder,System.Runtime.InteropServices.SafeHandle)">
            <summary>Creates an enumeration of all the hard links to the specified file as a transacted operation. The function returns a handle to the enumeration that can be used on subsequent calls to the FindNextFileNameW function.</summary>
            <returns>
            If the function succeeds, the return value is a search handle that can be used with the FindNextFileNameW function or closed with the FindClose function.
            If the function fails, the return value is INVALID_HANDLE_VALUE (0xffffffff). To get extended error information, call the GetLastError function.
            </returns>
            <remarks>Minimum supported client: Windows Vista [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2008 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.FindNextFile(Alphaleonis.Win32.Filesystem.SafeFindFileHandle,Alphaleonis.Win32.Filesystem.NativeMethods.Win32FindData@)">
            <summary>Continues a file search from a previous call to the FindFirstFile, FindFirstFileEx, or FindFirstFileTransacted functions.</summary>
            <returns>
            If the function succeeds, the return value is nonzero and the lpFindFileData parameter contains information about the next file or directory found.
            If the function fails, the return value is zero and the contents of lpFindFileData are indeterminate. To get extended error information, call the GetLastError function.
            If the function fails because no more matching files can be found, the GetLastError function returns ERROR_NO_MORE_FILES.
            </returns>
            <remarks>Minimum supported client: Windows XP [desktop apps | Windows Store apps]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps | Windows Store apps]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.FindNextFileName(Alphaleonis.Win32.Filesystem.SafeFindFileHandle,System.UInt32@,System.Text.StringBuilder)">
            <summary>Continues enumerating the hard links to a file using the handle returned by a successful call to the FindFirstFileNameW function.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero (0). To get extended error information, call GetLastError.
            If no matching files can be found, the GetLastError function returns ERROR_HANDLE_EOF.
            </returns>
            <remarks>Minimum supported client: Windows Vista [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2008 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.FlushFileBuffers(Microsoft.Win32.SafeHandles.SafeFileHandle)">
            <summary>Flushes the buffers of a specified file and causes all buffered data to be written to a file.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetCompressedFileSize(System.String,System.UInt32@)">
            <summary>Retrieves the actual number of bytes of disk storage used to store a specified file.</summary>
            <returns>
            If the function succeeds, the return value is the low-order DWORD of the actual number of bytes of disk storage used to store the specified file, and if lpFileSizeHigh is non-NULL, the function puts the high-order DWORD of that actual value into the DWORD pointed to by that parameter. This is the compressed file size for compressed files, the actual file size for noncompressed files.
            If the function fails, and lpFileSizeHigh is NULL, the return value is INVALID_FILE_SIZE. To get extended error information, call GetLastError.
            If the return value is INVALID_FILE_SIZE and lpFileSizeHigh is non-NULL, an application must call GetLastError to determine whether the function has succeeded (value is NO_ERROR) or failed (value is other than NO_ERROR).
            </returns>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetCompressedFileSizeTransacted(System.String,System.UInt32@,System.Runtime.InteropServices.SafeHandle)">
            <summary>Retrieves the actual number of bytes of disk storage used to store a specified file as a transacted operation.</summary>
            <returns>
            If the function succeeds, the return value is the low-order DWORD of the actual number of bytes of disk storage used to store the specified file, and if lpFileSizeHigh is non-NULL, the function puts the high-order DWORD of that actual value into the DWORD pointed to by that parameter. This is the compressed file size for compressed files, the actual file size for noncompressed files.
            If the function fails, and lpFileSizeHigh is NULL, the return value is INVALID_FILE_SIZE. To get extended error information, call GetLastError.
            If the return value is INVALID_FILE_SIZE and lpFileSizeHigh is non-NULL, an application must call GetLastError to determine whether the function has succeeded (value is NO_ERROR) or failed (value is other than NO_ERROR).
            </returns>
            <remarks>Minimum supported client: Windows Vista [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2008 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetFileAttributesEx(System.String,System.UInt32,Alphaleonis.Win32.Filesystem.NativeMethods.Win32FileAttributeData@)">
            <summary>Retrieves attributes for a specified file or directory.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>
            The GetFileAttributes function retrieves file system attribute information. GetFileAttributesEx can obtain other sets of file or directory attribute information.
            Currently, GetFileAttributesEx retrieves a set of standard attributes that is a superset of the file system attribute information.
            When the GetFileAttributesEx function is called on a directory that is a mounted folder, it returns the attributes of the directory, not those of
            the root directory in the volume that the mounted folder associates with the directory. To obtain the attributes of the associated volume,
            call GetVolumeNameForVolumeMountPoint to obtain the name of the associated volume. Then use the resulting name in a call to GetFileAttributesEx.
            The results are the attributes of the root directory on the associated volume.
            Symbolic link behavior: If the path points to a symbolic link, the function returns attributes for the symbolic link.
            </remarks>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetFileAttributesTransacted(System.String,System.UInt32,Alphaleonis.Win32.Filesystem.NativeMethods.Win32FileAttributeData@,System.Runtime.InteropServices.SafeHandle)">
            <summary>Retrieves file system attributes for a specified file or directory as a transacted operation.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>
            Transacted Operations
            If a file is open for modification in a transaction, no other thread can open the file for modification until the transaction is committed.
            Conversely, if a file is open for modification outside of a transaction, no transacted thread can open the file for modification until the
            non-transacted handle is closed. If a non-transacted thread has a handle opened to modify a file, a call to GetFileAttributesTransacted for
            that file will fail with an ERROR_TRANSACTIONAL_CONFLICT error.
            </remarks>
            <remarks>Minimum supported client: Windows Vista [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2008 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetFileInformationByHandle(Microsoft.Win32.SafeHandles.SafeFileHandle,Alphaleonis.Win32.Filesystem.NativeMethods.ByHandleFileInformation@)">
            <summary>Retrieves file information for the specified file.</summary>
            <returns>
            If the function succeeds, the return value is nonzero and file information data is contained in the buffer pointed to by the lpFileInformation parameter.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>
            Depending on the underlying network features of the operating system and the type of server connected to,
            the GetFileInformationByHandle function may fail, return partial information, or full information for the given file.
            </remarks>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetFileInformationByHandleEx(Microsoft.Win32.SafeHandles.SafeFileHandle,Alphaleonis.Win32.Filesystem.NativeMethods.FileInfoByHandleClass,Alphaleonis.Win32.SafeGlobalMemoryBufferHandle,System.UInt32)">
            <summary>Retrieves file information for the specified file.</summary>
            <returns>
            If the function succeeds, the return value is nonzero and file information data is contained in the buffer pointed to by the lpFileInformation parameter.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows Vista [desktop apps | Windows Store apps]</remarks>
            <remarks>Minimum supported server: Windows Server 2008 [desktop apps | Windows Store apps]</remarks>
            <remarks>Redistributable: Windows SDK on Windows Server 2003 and Windows XP.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetFileSizeEx(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Int64@)">
            <summary>Retrieves the size of the specified file.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetFileType(Microsoft.Win32.SafeHandles.SafeFileHandle)">
            <summary>Retrieves the file type of the specified file.</summary>
            <returns>
            You can distinguish between a "valid" return of FILE_TYPE_UNKNOWN and its return due to a calling error
            (for example, passing an invalid handle to GetFileType) by calling Win32Exception().
            If the function worked properly and FILE_TYPE_UNKNOWN was returned, a call to GetLastError will return NO_ERROR.
            If the function returned FILE_TYPE_UNKNOWN due to an error in calling GetFileType, Win32Exception() will return the error code. 
            </returns>
            <remarks>
            "Don't let more than one process try to read from stdin at the same time."
            http://blogs.msdn.com/b/oldnewthing/archive/2011/12/02/10243553.aspx
            </remarks>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetFinalPathNameByHandle(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Text.StringBuilder,System.UInt32,Alphaleonis.Win32.Filesystem.FinalPathFormats)">
            <summary>Retrieves the final path for the specified file.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows Vista [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2008 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetMappedFileName(System.IntPtr,Alphaleonis.Win32.Security.SafeLocalMemoryBufferHandle,System.Text.StringBuilder,System.UInt32)">
            <summary>Checks whether the specified address is within a memory-mapped file in the address space of the specified process.
            If so, the function returns the name of the memory-mapped file.
            </summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>SetLastError is set to false.</remarks>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.LockFile(Microsoft.Win32.SafeHandles.SafeFileHandle,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>Locks the specified file for exclusive access by the calling process.</summary>
            <returns>
            If the function succeeds, the return value is nonzero (TRUE).
            If the function fails, the return value is zero (FALSE). To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.MapViewOfFile(Microsoft.Win32.SafeHandles.SafeFileHandle,System.UInt32,System.UInt32,System.UInt32,System.UIntPtr)">
            <summary>Maps a view of a file mapping into the address space of a calling process.</summary>
            <returns>
            If the function succeeds, the return value is the starting address of the mapped view.
            If the function fails, the return value is <see langword="null"/>.
            </returns>
            <remarks>SetLastError is set to false.</remarks>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.MoveFileWithProgress(System.String,System.String,Alphaleonis.Win32.Filesystem.NativeMethods.NativeCopyProgressRoutine,System.IntPtr,Alphaleonis.Win32.Filesystem.MoveOptions)">
            <summary>Moves a file or directory, including its children. You can provide a callback function that receives progress notifications.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.MoveFileTransacted(System.String,System.String,Alphaleonis.Win32.Filesystem.NativeMethods.NativeCopyProgressRoutine,System.IntPtr,Alphaleonis.Win32.Filesystem.MoveOptions,System.Runtime.InteropServices.SafeHandle)">
            <summary>Moves an existing file or a directory, including its children, as a transacted operation.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows Vista [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2008 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.PathFileExists(System.String)">
            <summary>Determines whether a path to a file system object such as a file or folder is valid.</summary>
            <returns>true if the file exists; otherwise, false. Call GetLastError for extended error information.</returns>
            <remarks>
            This function tests the validity of the path.
            A path specified by Universal Naming Convention (UNC) is limited to a file only; that is, \\server\share\file is permitted.
            A network share path to a server or server share is not permitted; that is, \\server or \\server\share.
            This function returns FALSE if a mounted remote drive is out of service.
            </remarks>
            <remarks>Minimum supported client: Windows 2000 Professional</remarks>
            <remarks>Minimum supported server: Windows 2000 Server</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.ReplaceFile(System.String,System.String,System.String,System.Security.AccessControl.FileSystemRights,System.IntPtr,System.IntPtr)">
            <summary>Replaces one file with another file, with the option of creating a backup copy of the original file. The replacement file assumes the name of the replaced file and its identity.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.SetFileAttributes(System.String,System.IO.FileAttributes)">
            <summary>Sets the attributes for a file or directory.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.SetFileAttributesTransacted(System.String,System.IO.FileAttributes,System.Runtime.InteropServices.SafeHandle)">
            <summary>Sets the attributes for a file or directory as a transacted operation.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows Vista [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2008 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.SetFileTime(Microsoft.Win32.SafeHandles.SafeFileHandle,Alphaleonis.Win32.SafeGlobalMemoryBufferHandle,Alphaleonis.Win32.SafeGlobalMemoryBufferHandle,Alphaleonis.Win32.SafeGlobalMemoryBufferHandle)">
            <summary>Sets the date and time that the specified file or directory was created, last accessed, or last modified.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.ShGetFileInfo(System.String,System.IO.FileAttributes,Alphaleonis.Win32.Filesystem.Shell32.FileInfo@,System.UInt32,Alphaleonis.Win32.Filesystem.Shell32.FileInfoAttributes)">
            <summary>Retrieves information about an object in the file system, such as a file, folder, directory, or drive root.</summary>
            <remarks>You should call this function from a background thread. Failure to do so could cause the UI to stop responding.</remarks>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows 2000 Server [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.UnlockFile(Microsoft.Win32.SafeHandles.SafeFileHandle,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>Unlocks a region in an open file. Unlocking a region enables other processes to access the region.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.UnmapViewOfFile(Alphaleonis.Win32.Security.SafeLocalMemoryBufferHandle)">
            <summary>Unmaps a mapped view of a file from the calling process's address space.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>SetLastError is set to false.</remarks>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.CloseHandle(System.IntPtr)">
            <summary>Closes an open object handle.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows 2000 Professional</remarks>
            <remarks>Minimum supported server: Windows 2000 Server</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.CreateTransaction(Alphaleonis.Win32.Security.NativeMethods.SecurityAttributes,System.IntPtr,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.String)">
            <summary>Creates a new transaction object.</summary>
            <returns>
            If the function succeeds, the return value is a handle to the transaction. 
            If the function fails, the return value is INVALID_HANDLE_VALUE. To get extended error information, call the GetLastError function.
            </returns>
            <remarks>Minimum supported client: Windows Vista</remarks>
            <remarks>Minimum supported server: Windows Server 2008</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.CommitTransaction(System.Runtime.InteropServices.SafeHandle)">
            <summary>Requests that the specified transaction be committed.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is 0 (zero). To get extended error information, call the GetLastError function.
            </returns>
            <remarks>Minimum supported client: Windows Vista</remarks>
            <remarks>Minimum supported server: Windows Server 2008</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.RollbackTransaction(System.Runtime.InteropServices.SafeHandle)">
            <summary>Requests that the specified transaction be rolled back. This function is synchronous.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call the GetLastError function.
            </returns>
            <remarks>Minimum supported client: Windows Vista</remarks>
            <remarks>Minimum supported server: Windows Server 2008</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetFullPathName(System.String,System.UInt32,System.Text.StringBuilder,System.IntPtr)">
            <summary>Retrieves the full path and file name of the specified file or directory.</summary>
            <returns>If the function fails for any other reason, the return value is zero. To get extended error information, call GetLastError.</returns>
            <remarks>The GetFullPathName function is not recommended for multithreaded applications or shared library code.</remarks>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetFullPathNameTransacted(System.String,System.UInt32,System.Text.StringBuilder,System.IntPtr,System.Runtime.InteropServices.SafeHandle)">
            <summary>Retrieves the full path and file name of the specified file or directory as a transacted operation.</summary>
            <returns>If the function fails for any other reason, the return value is zero. To get extended error information, call GetLastError.</returns>
            <remarks>Minimum supported client: Windows Vista [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2008 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetLongPathName(System.String,System.Text.StringBuilder,System.UInt32)">
            <summary>Converts the specified path to its long form.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetLongPathNameTransacted(System.String,System.Text.StringBuilder,System.UInt32,System.Runtime.InteropServices.SafeHandle)">
            <summary>Converts the specified path to its long form as a transacted operation.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows Vista [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2008 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetShortPathName(System.String,System.Text.StringBuilder,System.UInt32)">
            <summary>Retrieves the short path form of the specified path.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.PathCreateFromUrl(System.String,System.Text.StringBuilder,System.UInt32@,System.UInt32)">
            <summary>Converts a file URL to a Microsoft MS-DOS path.</summary>
            <returns>Type: HRESULT
            If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.
            </returns>
            <remarks>Minimum supported client: Windows 2000 Professional, Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows 2000 Server [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.PathCreateFromUrlAlloc(System.String,System.Text.StringBuilder@,System.UInt32)">
            <summary>Creates a path from a file URL.</summary>
            <returns>Type: HRESULT
            If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.
            </returns>
            <remarks>Minimum supported client: Windows Vista [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2008 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.PathIsDirectoryEmpty(System.String)">
            <summary>Determines whether a specified path is an empty directory.</summary>
            <returns>Returns true if pszPath is an empty directory. Returns false if pszPath is not a directory, or if it contains at least one file other than "." or "..".</returns>
            <remarks>Minimum supported client: Windows 2000 Professional, Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows 2000 Server [desktop apps only]</remarks>
            <remarks>SetLastError is set to false.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.UrlCreateFromPath(System.String,System.Text.StringBuilder,System.UInt32@,System.UInt32)">
            <summary>Converts a Microsoft MS-DOS path to a canonicalized URL.</summary>
            <returns>Type: HRESULT
            Returns S_FALSE if pszPath is already in URL format. In this case, pszPath will simply be copied to pszUrl.
            Otherwise, it returns S_OK if successful or a standard COM error value if not.
            </returns>
            <remarks>
            UrlCreateFromPath does not support extended paths. These are paths that include the extended-length path prefix "\\?\".
            </remarks>
            <remarks>Minimum supported client: Windows 2000 Professional, Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows 2000 Server [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.UrlIs(System.String,Alphaleonis.Win32.Filesystem.Shell32.UrlTypes)">
            <summary>Tests whether a URL is a specified type.</summary>
            <returns>
            Type: BOOL
            For all but one of the URL types, UrlIs returns true if the URL is the specified type, or false if not.
            If UrlIs is set to <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.UrlTypes.IsAppliable"/>, UrlIs will attempt to determine the URL scheme.
            If the function is able to determine a scheme, it returns true, or false otherwise.
            </returns>
            <remarks>Minimum supported client: Windows 2000 Professional, Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows 2000 Server [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.DefineDosDevice(Alphaleonis.Win32.Filesystem.DosDeviceAttributes,System.String,System.String)">
            <summary>Defines, redefines, or deletes MS-DOS device names.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.DeleteVolumeMountPoint(System.String)">
            <summary>Deletes a drive letter or mounted folder.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.FindFirstVolume(System.Text.StringBuilder,System.UInt32)">
            <summary>Retrieves the name of a volume on a computer. FindFirstVolume is used to begin scanning the volumes of a computer.</summary>
            <returns>
            If the function succeeds, the return value is a search handle used in a subsequent call to the FindNextVolume and FindVolumeClose functions.
            If the function fails to find any volumes, the return value is the INVALID_HANDLE_VALUE error code. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.FindFirstVolumeMountPoint(System.String,System.Text.StringBuilder,System.UInt32)">
            <summary>Retrieves the name of a mounted folder on the specified volume. FindFirstVolumeMountPoint is used to begin scanning the mounted folders on a volume.</summary>
            <returns>
            If the function succeeds, the return value is a search handle used in a subsequent call to the FindNextVolumeMountPoint and FindVolumeMountPointClose functions.
            If the function fails to find a mounted folder on the volume, the return value is the INVALID_HANDLE_VALUE error code.
            </returns>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.FindNextVolume(Alphaleonis.Win32.Filesystem.SafeFindVolumeHandle,System.Text.StringBuilder,System.UInt32)">
            <summary>Continues a volume search started by a call to the FindFirstVolume function. FindNextVolume finds one volume per call.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.FindNextVolumeMountPoint(Alphaleonis.Win32.Filesystem.SafeFindVolumeMountPointHandle,System.Text.StringBuilder,System.UInt32)">
            <summary>Continues a mounted folder search started by a call to the FindFirstVolumeMountPoint function. FindNextVolumeMountPoint finds one mounted folder per call.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError. If no more mounted folders can be found, the GetLastError function returns the ERROR_NO_MORE_FILES error code.
            In that case, close the search with the FindVolumeMountPointClose function.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.FindVolumeClose(System.IntPtr)">
            <summary>Closes the specified volume search handle.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.FindVolumeMountPointClose(System.IntPtr)">
            <summary>Closes the specified mounted folder search handle.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetVolumeInformation(System.String,System.Text.StringBuilder,System.UInt32,System.UInt32@,System.UInt32@,Alphaleonis.Win32.Filesystem.NativeMethods.VolumeInfoAttributes@,System.Text.StringBuilder,System.UInt32)">
            <summary>Retrieves information about the file system and volume associated with the specified root directory.</summary>
            <returns>
            If all the requested information is retrieved, the return value is nonzero.
            If not all the requested information is retrieved, the return value is zero.
            </returns>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
            <remarks>"lpRootPathName" must end with a trailing backslash.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetVolumeInformationByHandle(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Text.StringBuilder,System.UInt32,System.UInt32@,System.UInt32@,Alphaleonis.Win32.Filesystem.NativeMethods.VolumeInfoAttributes@,System.Text.StringBuilder,System.UInt32)">
            <summary>Retrieves information about the file system and volume associated with the specified file.</summary>
            <returns>
            If all the requested information is retrieved, the return value is nonzero.
            If not all the requested information is retrieved, the return value is zero.
            To get extended error information call Win32Exception()
            </returns>
            <remarks>Minimum supported client: Windows Vista [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2008 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetVolumeNameForVolumeMountPoint(System.String,System.Text.StringBuilder,System.UInt32)">
            <summary>Retrieves a volume GUID path for the volume that is associated with the specified volume mount point (drive letter, volume GUID path, or mounted folder).</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            To get extended error information call Win32Exception()
            </returns>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetVolumePathName(System.String,System.Text.StringBuilder,System.UInt32)">
            <summary>Retrieves the volume mount point where the specified path is mounted.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetVolumePathNamesForVolumeName(System.String,System.Char[],System.UInt32,System.UInt32@)">
            <summary>Retrieves a list of drive letters and mounted folder paths for the specified volume.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.SetVolumeLabel(System.String,System.String)">
            <summary>Sets the label of a file system volume.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
            <remarks>"lpRootPathName" must end with a trailing backslash.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.SetVolumeMountPoint(System.String,System.String)">
            <summary>Associates a volume with a drive letter or a directory on another volume.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.QueryDosDevice(System.String,System.Char[],System.UInt32)">
            <summary>Retrieves information about MS-DOS device names.</summary>
            <returns>
            If the function succeeds, the return value is the number of TCHARs stored into the buffer pointed to by lpTargetPath.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            If the buffer is too small, the function fails and the last error code is ERROR_INSUFFICIENT_BUFFER.
            </returns>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.NativeMethods.FileInfoByHandleClass">
            <summary>Identifies the type of file information that GetFileInformationByHandleEx should retrieve or SetFileInformationByHandle should set.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FileInfoByHandleClass.FileIdBothDirectoryInfo">
            <summary>Files in the specified directory should be retrieved. Used for directory handles. Use only when calling GetFileInformationByHandleEx.
            The number of files returned for each call to GetFileInformationByHandleEx depends on the size of the buffer that is passed to the function.
            Any subsequent calls to GetFileInformationByHandleEx on the same handle will resume the enumeration operation after the last file is returned.
            See FILE_ID_BOTH_DIR_INFO.
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.NativeMethods.FindExAdditionalFlags">
            <summary>Additional flags that control the search.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FindExAdditionalFlags.None">
            <summary>No additional flags used.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FindExAdditionalFlags.CaseSensitive">
            <summary>Searches are case-sensitive.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FindExAdditionalFlags.LargeFetch">
            <summary>Uses a larger buffer for directory queries, which can increase performance of the find operation.</summary>
            <remarks>This value is not supported until Windows Server 2008 R2 and Windows 7.</remarks>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.NativeMethods.FindExInfoLevels">
            <summary>Defines values that are used with the FindFirstFileEx function to specify the information level of the returned data.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FindExInfoLevels.Standard">
            <summary>The FindFirstFileEx function retrieves a standard set of attribute information.</summary>
            <remarks>The data is returned in a <see cref="T:Alphaleonis.Win32.Filesystem.NativeMethods.Win32FindData"/> structure.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FindExInfoLevels.Basic">
            <summary>The FindFirstFileEx function does not query the short file name, improving overall enumeration speed.</summary>
            <remarks>The data is returned in a <see cref="T:Alphaleonis.Win32.Filesystem.NativeMethods.Win32FindData"/> structure, and cAlternateFileName member is always a NULL string.</remarks>
            <remarks>This value is not supported until Windows Server 2008 R2 and Windows 7.</remarks>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.NativeMethods.FindExSearchOps">
            <summary>Defines values that are used with the FindFirstFileEx function to specify the type of filtering to perform.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FindExSearchOps.SearchNameMatch">
            <summary>The search for a file that matches a specified file name.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FindExSearchOps.SearchLimitToDirectories">
            <summary>This is an advisory flag. If the file system supports directory filtering, the function searches for a file that matches
            the specified name and is also a directory. If the file system does not support directory filtering, this flag is silently ignored. 
            </summary>
            <remarks>
            The lpSearchFilter parameter of the FindFirstFileEx function must be NULL when this search value is used.
            If directory filtering is desired, this flag can be used on all file systems, but because it is an advisory flag and only affects file systems that support it,
            the application must examine the file attribute data stored in the lpFindFileData parameter of the FindFirstFileEx function to determine whether the function has returned a handle to a directory.
            </remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FindExSearchOps.SearchLimitToDevices">
            <summary>This filtering type is not available.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.NativeMethods.NativeErrorMode">
            <summary>Enum for struct ChangeErrorMode.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.NativeMethods.ReparsePointTags">
            <summary>Enumeration specifying the different reparse point tags.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.ReparsePointTags.None">
            <summary>The entry is not a reparse point.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.ReparsePointTags.Dfs">
            <summary>IO_REPARSE_TAG_DFS</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.ReparsePointTags.Dfsr">
            <summary>IO_REPARSE_TAG_DFSR</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.ReparsePointTags.MountPoint">
            <summary>IO_REPARSE_TAG_MOUNT_POINT - Used for mount point support.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.ReparsePointTags.SymLink">
            <summary>IO_REPARSE_TAG_SYMLINK - Used for symbolic link support.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.NativeMethods.VolumeInfoAttributes">
            <summary>Volume Attributes used by the GetVolumeInformation() function.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.VolumeInfoAttributes.None">
            <summary>Default</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.VolumeInfoAttributes.CaseSensitiveSearch">
            <summary>FILE_CASE_SENSITIVE_SEARCH The specified volume supports case-sensitive file names.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.VolumeInfoAttributes.CasePreservedNames">
            <summary> FILE_CASE_PRESERVED_NAMES The specified volume supports preserved case of file names when it places a name on disk.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.VolumeInfoAttributes.UnicodeOnDisk">
            <summary> FILE_UNICODE_ON_DISK The specified volume supports Unicode in file names as they appear on disk.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.VolumeInfoAttributes.PersistentAcls">
            <summary> FILE_PERSISTENT_ACLS The specified volume preserves and enforces access control lists (ACL).
            For example, the NTFS file system preserves and enforces ACLs, and the FAT file system does not.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.VolumeInfoAttributes.Compression">
            <summary> FILE_FILE_COMPRESSION The specified volume supports file-based compression.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.VolumeInfoAttributes.VolumeQuotas">
            <summary> FILE_VOLUME_QUOTAS The specified volume supports disk quotas.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.VolumeInfoAttributes.SupportsSparseFiles">
            <summary> FILE_SUPPORTS_SPARSE_FILES The specified volume supports sparse files.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.VolumeInfoAttributes.SupportsReparsePoints">
            <summary> FILE_SUPPORTS_REPARSE_POINTS The specified volume supports re-parse points.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.VolumeInfoAttributes.SupportsRemoteStorage">
            <summary>(doesn't appear on MSDN)</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.VolumeInfoAttributes.VolumeIsCompressed">
            <summary>FILE_VOLUME_IS_COMPRESSED The specified volume is a compressed volume, for example, a DoubleSpace volume.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.VolumeInfoAttributes.SupportsObjectIds">
            <summary>FILE_SUPPORTS_OBJECT_IDS The specified volume supports object identifiers.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.VolumeInfoAttributes.SupportsEncryption">
            <summary>FILE_SUPPORTS_ENCRYPTION The specified volume supports the Encrypted File System (EFS). For more information, see File Encryption.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.VolumeInfoAttributes.NamedStreams">
            <summary>FILE_NAMED_STREAMS The specified volume supports named streams.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.VolumeInfoAttributes.ReadOnlyVolume">
            <summary>FILE_READ_ONLY_VOLUME The specified volume is read-only.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.VolumeInfoAttributes.SequentialWriteOnce">
            <summary>FILE_SEQUENTIAL_WRITE_ONCE The specified volume is read-only.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.VolumeInfoAttributes.SupportsTransactions">
            <summary>FILE_SUPPORTS_TRANSACTIONS The specified volume supports transactions.For more information, see About KTM.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.VolumeInfoAttributes.SupportsHardLinks">
            <summary>FILE_SUPPORTS_HARD_LINKS The specified volume supports hard links. For more information, see Hard Links and Junctions.</summary>
            <remarks>
            Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP:
            This value is not supported until Windows Server 2008 R2 and Windows 7.
            </remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.VolumeInfoAttributes.SupportsExtendedAttributes">
            <summary>FILE_SUPPORTS_EXTENDED_ATTRIBUTES The specified volume supports extended attributes.
            An extended attribute is a piece of application-specific metadata that
            an application can associate with a file and is not part of the file's data.
            </summary>
            <remarks>
            Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP:
            This value is not supported until Windows Server 2008 R2 and Windows 7.
            </remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.VolumeInfoAttributes.SupportsOpenByFileId">
            <summary>FILE_SUPPORTS_OPEN_BY_FILE_ID The file system supports open by FileID. For more information, see FILE_ID_BOTH_DIR_INFO.</summary>
            <remarks>
            Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP:
            This value is not supported until Windows Server 2008 R2 and Windows 7.
            </remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.VolumeInfoAttributes.SupportsUsnJournal">
            <summary>FILE_SUPPORTS_USN_JOURNAL The specified volume supports update sequence number (USN) journals. For more information, see Change Journal Records.</summary>
            <remarks>
            Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP:
            This value is not supported until Windows Server 2008 R2 and Windows 7.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.DeviceIo.ToggleCompressionInternal(System.Boolean,Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Boolean)">
            <summary>Unified method ToggleCompressionInternal() to set the NTFS compression state of a file or directory on a volume whose file system supports per-file and per-directory compression.</summary>
            <param name="isFolder"><c>true</c> indicates a directory object, <c>false</c> indicates a file object.</param>
            <param name="transaction">The transaction.</param>
            <param name="path">A path that describes a folder or file to compress or decompress.</param>
            <param name="compress"><c>true</c> = compress, <c>false</c> = decompress</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.DeviceIo.InvokeIoControlUnknownSize``1(Microsoft.Win32.SafeHandles.SafeFileHandle,Alphaleonis.Win32.Filesystem.DeviceIoControlCode,``0,System.UInt32)">
            <summary>Repeatedly invokes InvokeIoControl with the specified input until enough memory has been allocated.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.NativeMethods.ByHandleFileInformation">
            <summary>BY_HANDLE_FILE_INFORMATION - Contains information that the GetFileInformationByHandle function retrieves.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.ByHandleFileInformation.FileAttributes">
            <summary>The file attributes.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.ByHandleFileInformation.CreationTime">
            <summary>A FILETIME structure that specifies when a file or directory is created.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.ByHandleFileInformation.LastAccessTime">
            <summary>A FILETIME structure. For a file, the structure specifies the last time that a file is read from or written to.
            For a directory, the structure specifies when the directory is created.
            For both files and directories, the specified date is correct, but the time of day is always set to midnight.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.ByHandleFileInformation.LastWriteTime">
            <summary>A FILETIME structure. For a file, the structure specifies the last time that a file is written to.
            For a directory, the structure specifies when the directory is created.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.ByHandleFileInformation.VolumeSerialNumber">
            <summary>The serial number of the volume that contains a file.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.ByHandleFileInformation.FileSizeHigh">
            <summary>The high-order part of the file size.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.ByHandleFileInformation.FileSizeLow">
            <summary>The low-order part of the file size.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.ByHandleFileInformation.NumberOfLinks">
            <summary>The number of links to this file. For the FAT file system this member is always 1. For the NTFS file system, it can be more than 1.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.ByHandleFileInformation.FileIndexHigh">
            <summary>The high-order part of a unique identifier that is associated with a file.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.ByHandleFileInformation.FileIndexLow">
            <summary>The low-order part of a unique identifier that is associated with a file.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.NativeMethods.ChangeErrorMode">
            <summary>Controls whether the system will handle the specified types of serious errors or whether the process will handle them.</summary>
            <remarks>Not yet implemented: Windows 7, callers should favor SetThreadErrorMode over SetErrorMode since it is less disruptive to the normal behavior of the system.</remarks>
            <remarks>Minimum supported client: Windows 2000 Professional</remarks>
            <remarks>Minimum supported server: Windows 2000 Server</remarks>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.NativeMethods.FileIdBothDirInfo">
            <summary>FILE_ID_BOTH_DIR_INFO - Contains information about files in the specified directory. Used for directory handles.
            Use only when calling GetFileInformationByHandleEx.</summary>
            <remarks>
            The number of files that are returned for each call to GetFileInformationByHandleEx depends on the size of the buffer that is passed to the function.
            Any subsequent calls to GetFileInformationByHandleEx on the same handle will resume the enumeration operation after the last file is returned.
            </remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FileIdBothDirInfo.NextEntryOffset">
            <summary>The offset for the next FILE_ID_BOTH_DIR_INFO structure that is returned. Contains zero (0) if no other entries follow this one.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FileIdBothDirInfo.FileIndex">
            <summary>The byte offset of the file within the parent directory. This member is undefined for file systems, such as NTFS,
            in which the position of a file within the parent directory is not fixed and can be changed at any time to maintain sort order.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FileIdBothDirInfo.CreationTime">
            <summary>The time that the file was created.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FileIdBothDirInfo.LastAccessTime">
            <summary>The time that the file was last accessed.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FileIdBothDirInfo.LastWriteTime">
            <summary>The time that the file was last written to.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FileIdBothDirInfo.ChangeTime">
            <summary>The time that the file was last changed.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FileIdBothDirInfo.EndOfFile">
            <summary>The absolute new end-of-file position as a byte offset from the start of the file to the end of the file.
            Because this value is zero-based, it actually refers to the first free byte in the file.
            In other words, EndOfFile is the offset to the byte that immediately follows the last valid byte in the file.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FileIdBothDirInfo.AllocationSize">
            <summary>The number of bytes that are allocated for the file. This value is usually a multiple of the sector or cluster size of the underlying physical device.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FileIdBothDirInfo.FileAttributes">
            <summary>The file attributes.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FileIdBothDirInfo.FileNameLength">
            <summary>The length of the file name.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FileIdBothDirInfo.EaSize">
            <summary>The size of the extended attributes for the file.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FileIdBothDirInfo.ShortNameLength">
            <summary>The length of ShortName.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FileIdBothDirInfo.ShortName">
            <summary>The short 8.3 file naming convention (for example, "FILENAME.TXT") name of the file.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FileIdBothDirInfo.FileId">
            <summary>The file ID.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FileIdBothDirInfo.FileName">
            <summary>The first character of the file name string. This is followed in memory by the remainder of the string.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.NativeMethods.Win32FileAttributeData">
            <summary>WIN32_FILE_ATTRIBUTE_DATA structure contains attribute information for a file or directory. The GetFileAttributesEx function uses this structure.</summary>
            <remarks>
            Not all file systems can record creation and last access time, and not all file systems record them in the same manner.
            For example, on the FAT file system, create time has a resolution of 10 milliseconds, write time has a resolution of 2 seconds,
            and access time has a resolution of 1 day. On the NTFS file system, access time has a resolution of 1 hour. 
            For more information, see File Times.
            </remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.Win32FileAttributeData.FileAttributes">
            <summary>The file attributes of a file.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.Win32FileAttributeData.CreationTime">
            <summary>A <see cref="T:Alphaleonis.Win32.Filesystem.FileTime"/> structure that specifies when a file or directory was created.
            If the underlying file system does not support creation time, this member is zero.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.Win32FileAttributeData.LastAccessTime">
            <summary>A <see cref="T:Alphaleonis.Win32.Filesystem.FileTime"/> structure.
            For a file, the structure specifies when the file was last read from, written to, or for executable files, run.
            For a directory, the structure specifies when the directory is created. If the underlying file system does not support last access time, this member is zero.
            On the FAT file system, the specified date for both files and directories is correct, but the time of day is always set to midnight.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.Win32FileAttributeData.LastWriteTime">
            <summary>A <see cref="T:Alphaleonis.Win32.Filesystem.FileTime"/> structure.
            For a file, the structure specifies when the file was last written to, truncated, or overwritten, for example, when WriteFile or SetEndOfFile are used.
            The date and time are not updated when file attributes or security descriptors are changed.
            For a directory, the structure specifies when the directory is created. If the underlying file system does not support last write time, this member is zero.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.Win32FileAttributeData.FileSizeHigh">
            <summary>The high-order DWORD of the file size. This member does not have a meaning for directories.
            This value is zero unless the file size is greater than MAXDWORD.
            The size of the file is equal to (nFileSizeHigh * (MAXDWORD+1)) + nFileSizeLow.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.Win32FileAttributeData.FileSizeLow">
            <summary>The low-order DWORD of the file size. This member does not have a meaning for directories.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.NativeMethods.Win32FindData">
            <summary>WIN32_FIND_DATA - Contains information about the file that is found by the FindFirstFile, FindFirstFileEx, or FindNextFile function.</summary>
            <remarks>
            If a file has a long file name, the complete name appears in the cFileName member, and the 8.3 format truncated version of the name appears
            in the cAlternateFileName member. Otherwise, cAlternateFileName is empty. If the FindFirstFileEx function was called with a value of FindExInfoBasic
            in the fInfoLevelId parameter, the cAlternateFileName member will always contain a NULL string value. This remains true for all subsequent calls to the
            FindNextFile function. As an alternative method of retrieving the 8.3 format version of a file name, you can use the GetShortPathName function.
            For more information about file names, see File Names, Paths, and Namespaces.
            </remarks>
            <remarks>
            Not all file systems can record creation and last access times, and not all file systems record them in the same manner.
            For example, on the FAT file system, create time has a resolution of 10 milliseconds, write time has a resolution of 2 seconds,
            and access time has a resolution of 1 day. The NTFS file system delays updates to the last access time for a file by up to 1 hour
            after the last access. For more information, see File Times.
            </remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.Win32FindData.FileAttributes">
            <summary>The file attributes of a file.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.Win32FindData.CreationTime">
            <summary>A <see cref="T:Alphaleonis.Win32.Filesystem.FileTime"/> structure that specifies when a file or directory was created.
            If the underlying file system does not support creation time, this member is zero.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.Win32FindData.LastAccessTime">
            <summary>A <see cref="T:Alphaleonis.Win32.Filesystem.FileTime"/> structure.
            For a file, the structure specifies when the file was last read from, written to, or for executable files, run.
            For a directory, the structure specifies when the directory is created. If the underlying file system does not support last access time, this member is zero.
            On the FAT file system, the specified date for both files and directories is correct, but the time of day is always set to midnight.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.Win32FindData.LastWriteTime">
            <summary>A <see cref="T:Alphaleonis.Win32.Filesystem.FileTime"/> structure.
            For a file, the structure specifies when the file was last written to, truncated, or overwritten, for example, when WriteFile or SetEndOfFile are used.
            The date and time are not updated when file attributes or security descriptors are changed.
            For a directory, the structure specifies when the directory is created. If the underlying file system does not support last write time, this member is zero.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.Win32FindData.FileSizeHigh">
            <summary>The high-order DWORD of the file size. This member does not have a meaning for directories.
            This value is zero unless the file size is greater than MAXDWORD.
            The size of the file is equal to (nFileSizeHigh * (MAXDWORD+1)) + nFileSizeLow.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.Win32FindData.FileSizeLow">
            <summary>The low-order DWORD of the file size. This member does not have a meaning for directories.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.Win32FindData.Reserved0">
            <summary>If the dwFileAttributes member includes the FILE_ATTRIBUTE_REPARSE_POINT attribute, this member specifies the reparse point tag.
            Otherwise, this value is undefined and should not be used.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.Win32FindData.Reserved1">
            <summary>Reserved for future use.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.Win32FindData.FileName">
            <summary>The name of the file.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.Win32FindData.AlternateFileName">
            <summary>An alternative name for the file. This name is in the classic 8.3 file name format.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.NativeMethods.Win32StreamId">
            <summary>The Win32StreamId structure contains stream data.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.Win32StreamId.StreamId">
            <summary>Type of data.
            This member can be one of the following values:
              BACKUP_DATA            0x00000001  Standard data. This corresponds to the NTFS $DATA stream type on the default (unnamed) data stream.
              BACKUP_EA_DATA         0x00000002  Extended attribute data. This corresponds to the NTFS $EA stream type.
              BACKUP_SECURITY_DATA   0x00000003  Security descriptor data.
              BACKUP_ALTERNATE_DATA  0x00000004  Alternative data streams. This corresponds to the NTFS $DATA stream type on a named data stream.
              BACKUP_LINK            0x00000005  Hard link information. This corresponds to the NTFS $FILE_NAME stream type.
              BACKUP_PROPERTY_DATA   0x00000006  Property data.
              BACKUP_OBJECT_ID       0x00000007  Objects identifiers. This corresponds to the NTFS $OBJECT_ID stream type.
              BACKUP_REPARSE_DATA    0x00000008  Reparse points. This corresponds to the NTFS $REPARSE_POINT stream type.
              BACKUP_SPARSE_BLOCK    0x00000009  Sparse file. This corresponds to the NTFS $DATA stream type for a sparse file.
              BACKUP_TXFS_DATA       0x0000000A  Transactional NTFS (TxF) data stream. This corresponds to the NTFS $TXF_DATA stream type.
                                                 Windows Server 2003 and Windows XP:  This value is not supported.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.Win32StreamId.StreamAttributes">
            <summary>Attributes of data to facilitate cross-operating system transfer.
            This member can be one or more of the following values:
              STREAM_MODIFIED_WHEN_READ  0x00000001  Attribute set if the stream contains data that is modified when read. Allows the backup application to know that verification of data will fail.
              STREAM_CONTAINS_SECURITY   0x00000002  Stream contains security data (general attributes). Allows the stream to be ignored on cross-operations restore.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.Win32StreamId.Size">
            <summary>Size of data, in bytes.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.Win32StreamId.StreamNameSize">
            <summary>Length of the name of the alternative data stream, in bytes.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.FinalPathFormats">
            <summary>Used by Win32 API GetFinalPathNameByHandle()</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FinalPathFormats.FileNameNormalized">
            <summary>Return the normalized drive name. This is the default.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FinalPathFormats.VolumeNameDos">
            <summary>Return the path with the drive letter. This is the default.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FinalPathFormats.VolumeNameGuid">
            <summary>Return the path with a volume GUID path instead of the drive name.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FinalPathFormats.VolumeNameNT">
            <summary>Return the path with the volume device path.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FinalPathFormats.VolumeNameNone">
            <summary>Return the path with no drive information.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FinalPathFormats.FileNameOpened">
            <summary>Return the opened file name (not normalized).</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.FileTypes">
            <summary>Retrieves the file type of the specified file.</summary>
            <remarks>Used by GetFileType() function.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileTypes.None">
            <summary>Either the type of the specified file is unknown, or the function failed.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileTypes.DiskFile">
            <summary>The specified file is a disk file.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileTypes.CharacterFile">
            <summary>The specified file is a character file, typically an LPT device or a console.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileTypes.Pipe">
            <summary>The specified file is a socket, a named pipe, or an anonymous pipe.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileTypes.Remote">
            <summary>The specified file is a remote file.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.AlreadyExistsException">
            <summary>The exception that is thrown when an attempt to create a directory or file that already exists was made.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.AlreadyExistsException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.AlreadyExistsException"/> class.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.AlreadyExistsException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.AlreadyExistsException"/> class.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.AlreadyExistsException.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.AlreadyExistsException"/> class.</summary>
            <param name="message">The message.</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.AlreadyExistsException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.AlreadyExistsException"/> class.</summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.AlreadyExistsException.#ctor(System.String,System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.AlreadyExistsException"/> class.</summary>
            <param name="message">The message.</param>
            <param name="path">The path.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.AlreadyExistsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.AlreadyExistsException"/> class.</summary>
            <param name="info">The data for serializing or deserializing the object.</param>
            <param name="context">The source and destination for the object.</param>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.CopyOptions">
            <summary>Flags that specify how a file is to be copied.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.CopyOptions.None">
            <summary>No CopyOptions used.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.CopyOptions.FailIfExists">
            <summary>The copy operation fails immediately if the target file already exists.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.CopyOptions.Restartable">
            <summary>Progress of the copy is tracked in the target file in case the copy fails. 
            The failed copy can be restarted at a later time by specifying the same values for 
            existing file name and new file name as those used in the call that failed.
            This can significantly slow down the copy operation as the new file may be flushed multiple times during the copy operation.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.CopyOptions.OpenSourceForWrite">
            <summary>The file is copied and the original file is opened for write access.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.CopyOptions.AllowDecryptedDestination">
            <summary>An attempt to copy an encrypted file will succeed even if the destination copy cannot be encrypted.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.CopyOptions.CopySymlink">
            <summary>If the source file is a symbolic link, the destination file is also a symbolic link pointing to the same file that the source symbolic link is pointing to.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.CopyOptions.NoBuffering">
            <summary>The copy operation is performed using unbuffered I/O, bypassing system I/O cache resources. Recommended for very large file transfers.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.CopyProgressCallbackReason">
            <summary>The reason that <see cref="T:Alphaleonis.Win32.Filesystem.CopyProgressRoutine"/> was called.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.CopyProgressCallbackReason.ChunkFinished">
            <summary>Another part of the data file was copied.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.CopyProgressCallbackReason.StreamSwitch">
            <summary>Another stream was created and is about to be copied. This is the callback reason given when the callback routine is first invoked.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.DeviceNotReadyException">
            <summary>The requested operation could not be completed because the device was not ready.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DeviceNotReadyException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.DeviceNotReadyException"/> class.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DeviceNotReadyException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.DeviceNotReadyException"/> class.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DeviceNotReadyException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.DeviceNotReadyException"/> class.</summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DeviceNotReadyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.DeviceNotReadyException"/> class.</summary>
            <param name="info">The data for serializing or deserializing the object.</param>
            <param name="context">The source and destination for the object.</param>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.Directory">
            <summary>Exposes static methods for creating, moving, and enumerating through directories and subdirectories. This class cannot be inherited.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CreateDirectory(System.String)">
            <summary>Creates all directories and subdirectories in the specified path.</summary>
            <param name="path">The directory path to create.</param>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> object that represents the directory for the specified path.</returns>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CreateDirectory(System.String,System.Security.AccessControl.DirectorySecurity)">
            <summary>Creates all the directories in the specified path, applying the specified Windows security.</summary>
            <param name="path">The directory path to create.</param>
            <param name="directorySecurity">The <see cref="T:System.Security.AccessControl.DirectorySecurity"/> access control to apply to the directory.</param>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> object that represents the directory for the specified path.</returns>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CreateDirectory(System.String,System.String)">
            <summary>Creates a new directory with the attributes of a specified template directory. 
            If the underlying file system supports security on files and directories, the function 
            applies a default security descriptor to the new directory. The new directory retains 
            the other attributes of the specified template directory.
            </summary>
            <param name="templatePath">The path of the directory to use as a template when creating the new directory.</param>
            <param name="path">The directory path to create.</param>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> object that represents the directory for the specified path.</returns>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CreateDirectory(System.String,System.String,System.Security.AccessControl.DirectorySecurity)">
            <summary>Creates a new directory with the attributes of a specified template directory. 
            If the underlying file system supports security on files and directories, the function 
            applies the specified security descriptor to the new directory. The new directory retains 
            the other attributes of the specified template directory.
            </summary>
            <param name="templatePath">The path of the directory to use as a template when creating the new directory.</param>
            <param name="path">The directory path to create.</param>
            <param name="directorySecurity">The <see cref="T:System.Security.AccessControl.DirectorySecurity"/> access control to apply to the directory.</param>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> object that represents the directory for the specified path.</returns>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CreateDirectory(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Creates all the directories in a specified path as a transacted operation. 
            If the underlying file system supports security on files and directories,
            the function applies a default security descriptor to the new directory. 
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory path to create.</param>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> object that represents the directory for the specified path.</returns>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CreateDirectory(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Security.AccessControl.DirectorySecurity)">
            <summary>Creates all the directories in a specified path as a transacted operation, with the attributes of a specified template directory. 
            If the underlying file system supports security on files and directories, the function applies a default security descriptor to the new directory. 
            The new directory retains the other attributes of the specified template directory.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory path to create.</param>
            <param name="directorySecurity">The <see cref="T:System.Security.AccessControl.DirectorySecurity"/> access control to apply to the directory.</param>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> object that represents the directory for the specified path.</returns>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CreateDirectory(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>Creates a new directory as a transacted operation, with the attributes of a specified template directory. 
            If the underlying file system supports security on files and directories, the function applies a default security descriptor to the new directory. 
            The new directory retains the other attributes of the specified template directory.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="templatePath">
            <para>The path of the directory to use as a template when creating the new directory. This parameter can be <see langword="null"/>. </para>
            <para>The directory must reside on the local computer; otherwise, the an exception of type <see cref="T:Alphaleonis.Win32.Filesystem.UnsupportedRemoteTransactionException"/> is thrown.</para>
            </param>
            <param name="path">The directory path to create.</param>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> object that represents the directory for the specified path.</returns>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CreateDirectory(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.Security.AccessControl.DirectorySecurity)">
            <summary>Creates a new directory as a transacted operation, with the attributes of a specified template directory. 
            If the underlying file system supports security on files and directories, the function applies a default security descriptor to the new directory. 
            The new directory retains the other attributes of the specified template directory.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="templatePath">
            <para>The path of the directory to use as a template when creating the new directory. This parameter can be <see langword="null"/>. </para>
            <para>The directory must reside on the local computer; otherwise, the an exception of type <see cref="T:Alphaleonis.Win32.Filesystem.UnsupportedRemoteTransactionException"/> is thrown.</para>
            </param>
            <param name="path">The directory path to create.</param>
            <param name="directorySecurity">The <see cref="T:System.Security.AccessControl.DirectorySecurity"/> access control to apply to the directory.</param>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> object that represents the directory for the specified path.</returns>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Delete(System.String)">
            <summary>Deletes an empty directory from a specified path.</summary>
            <param name="path">The name of the empty directory to remove. This directory must be writable and empty.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Delete(System.String,System.Boolean)">
            <summary>Deletes the specified directory and, if indicated, any subdirectories in the directory.</summary>
            <param name="path">The name of the directory to remove.</param>
            <param name="recursive"><c>true</c> to remove directories, subdirectories, and files in path; otherwise, <c>false</c>.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Delete(System.String,System.Boolean,System.Boolean)">
            <summary>Deletes the specified directory and, if indicated, any subdirectories in the directory.</summary>
            <param name="path">The name of the directory to remove.</param>
            <param name="recursive"><c>true</c> to remove directories, subdirectories, and files in path; otherwise, <c>false</c>.</param>
            <param name="ignoreReadOnly">If set to <c>true</c> overrides read only <see cref="T:System.IO.FileAttributes"/> of files and directories.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Delete(System.String,System.Boolean,System.Boolean,System.String)">
            <summary>Deletes the specified directory and, if indicated, any subdirectories in the directory.</summary>
            <param name="path">The name of the directory to remove.</param>
            <param name="recursive"><c>true</c> to remove directories, subdirectories, and files in path; otherwise, <c>false</c>.</param>
            <param name="ignoreReadOnly">If set to <c>true</c> overrides read only <see cref="T:System.IO.FileAttributes"/> of files and directories.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Delete(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Deletes an empty directory from a specified path.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The name of the empty directory to remove. This directory must be writable and empty.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Delete(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Boolean)">
            <summary>Deletes the specified directory and, if indicated, any subdirectories in the directory.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The name of the directory to remove.</param>
            <param name="recursive"><c>true</c> to remove directories, subdirectories, and files in path; otherwise, <c>false</c>.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Delete(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Boolean,System.Boolean)">
            <summary>Deletes the specified directory and, if indicated, any subdirectories in the directory.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The name of the directory to remove.</param>
            <param name="recursive"><c>true</c> to remove directories, subdirectories, and files in path; otherwise, <c>false</c>.</param>
            <param name="ignoreReadOnly">If set to <c>true</c> overrides read only <see cref="T:System.IO.FileAttributes"/> of files and directories.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Delete(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>Deletes the specified directory and, if indicated, any subdirectories in the directory.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The name of the directory to remove.</param>
            <param name="recursive"><c>true</c> to remove directories, subdirectories, and files in path; otherwise, <c>false</c>.</param>
            <param name="ignoreReadOnly">If set to <c>true</c> overrides read only <see cref="T:System.IO.FileAttributes"/> of files and directories.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateDirectories(System.String)">
            <summary>Returns an enumerable collection of directory names in a specified path.</summary>
            <param name="path">The directory to search.</param>
            <returns>An enumerable <see langref="string"/> collection, of the full names (including paths) for the directories in the directory specified by path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateDirectories(System.String,System.String)">
            <summary>Returns an enumerable collection of directory names that match a search pattern in a specified path.</summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <returns>
            An enumerable <see langref="string"/> collection, of the full names (including paths) for the directories in the directory specified by path
            and that match the specified search pattern.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateDirectories(System.String,System.String,System.IO.SearchOption)">
            <summary>Returns an enumerable collection of directory names that match a search pattern in a specified path, and optionally searches subdirectories.</summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <returns>
            An enumerable <see langref="string"/> collection, of the full names (including paths) for the directories in the directory specified by path
            and that match the specified search pattern and option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateDirectories(System.String,System.String,System.IO.SearchOption,System.Boolean)">
            <summary>Returns an enumerable collection of directory names that match a search pattern in a specified path, and optionally searches subdirectories.</summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <param name="continueOnAccessError">If set to <c>true</c> skip on access errors resulted from ACLs protected directories or non-accessible reparse points.</param>
            <returns>
            An enumerable <see langref="string"/> collection, of the full names (including paths) for the directories in the directory specified by path
            and that match the specified search pattern and option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateDirectories(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Returns an enumerable collection of directory names in a specified path.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <returns>An enumerable <see langref="string"/> collection, of the full names (including paths) for the directories in the directory specified by path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateDirectories(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>Returns an enumerable collection of directory names that match a search pattern in a specified path.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <returns>
            An enumerable <see langref="string"/> collection, of the full names (including paths) for the directories in the directory specified by path
            and that match the specified search pattern.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateDirectories(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption)">
            <summary>Returns an enumerable collection of directory names that match a search pattern in a specified path, and optionally searches subdirectories.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <returns>
            An enumerable <see langref="string"/> collection, of the full names (including paths) for the directories in the directory specified by path
            and that match the specified search pattern and option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateDirectories(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption,System.Boolean)">
            <summary>Returns an enumerable collection of directory names that match a search pattern in a specified path, and optionally searches subdirectories.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <param name="continueOnAccessError">If set to <c>true</c> skip on access errors resulted from ACLs protected directories or non-accessible reparse points.</param>
            <returns>
            An enumerable <see langref="string"/> collection, of the full names (including paths) for the directories in the directory specified by path
            and that match the specified search pattern and option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFiles(System.String)">
            <summary>Returns an enumerable collection of file names in a specified path.</summary>
            <param name="path">The directory to search.</param>
            <returns>An enumerable <see langref="string"/> collection, of the full names (including paths) for the files in the directory specified by path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFiles(System.String,System.String)">
            <summary>Returns an enumerable collection of file names that match a search pattern in a specified path.</summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <returns>
            An enumerable <see langref="string"/> collection, of the full names (including paths) for the files in the directory specified by path
            and that match the specified search pattern.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>Returns an enumerable collection of file names that match a search pattern in a specified path, and optionally searches subdirectories.</summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <returns>
            An enumerable <see langref="string"/> collection, of the full names (including paths) for the files in the directory specified by path
            and that match the specified search pattern and option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFiles(System.String,System.String,System.IO.SearchOption,System.Boolean)">
            <summary>Returns an enumerable collection of file names that match a search pattern in a specified path, and optionally searches subdirectories.</summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <param name="continueOnAccessError">If set to <c>true</c> skip on access errors resulted from ACLs protected directories or non-accessible reparse points.</param>
            <returns>
            An enumerable <see langref="string"/> collection, of the full names (including paths) for the files in the directory specified by path
            and that match the specified search pattern and option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFiles(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Returns an enumerable collection of file names in a specified path.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <returns>An enumerable <see langref="string"/> collection, of the full names (including paths) for the files in the directory specified by path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFiles(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>Returns an enumerable collection of file names that match a search pattern in a specified path.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <returns>
            An enumerable <see langref="string"/> collection, of the full names (including paths) for the files in the directory specified by path
            and that match the specified search pattern.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFiles(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption)">
            <summary>Returns an enumerable collection of file names that match a search pattern in a specified path, and optionally searches subdirectories.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <returns>
            An enumerable <see langref="string"/> collection, of the full names (including paths) for the files in the directory specified by path
            and that match the specified search pattern and option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFiles(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption,System.Boolean)">
            <summary>Returns an enumerable collection of file names that match a search pattern in a specified path, and optionally searches subdirectories.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <param name="continueOnAccessError">If set to <c>true</c> skip on access errors resulted from ACLs protected directories or non-accessible reparse points.</param>
            <returns>
            An enumerable <see langref="string"/> collection, of the full names (including paths) for the files in the directory specified by path
            and that match the specified search pattern and option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemEntries(System.String)">
            <summary>Returns an enumerable collection of file-system entries in a specified path.</summary>
            <param name="path">The directory to search.</param>
            <returns>An enumerable <see langref="string"/> collection of file-system entries in the directory specified by path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemEntries(System.String,System.String)">
            <summary>Returns an enumerable collection of file-system entries that match a search pattern in a specified path.</summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <returns>An enumerable <see langref="string"/> collection of file-system entries in the directory specified by path and that match the specified search pattern.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemEntries(System.String,System.String,System.IO.SearchOption)">
            <summary>Returns an enumerable collection of file names and directory names that match a search pattern in a specified path, and optionally searches subdirectories.</summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <returns>An enumerable <see langref="string"/> collection of file-system entries in the directory specified by path and that match the specified search pattern and option.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemEntries(System.String,System.String,System.IO.SearchOption,System.Boolean)">
            <summary>Returns an enumerable collection of file names and directory names that match a search pattern in a specified path, and optionally searches subdirectories.</summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <param name="continueOnAccessError">If set to <c>true</c> skip on access errors resulted from ACLs protected directories or non-accessible reparse points.</param>
            <returns>An enumerable <see langref="string"/> collection, of the full names (including paths) for the directories in the directory specified by path and that match the specified search pattern and option.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemEntries(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Returns an enumerable collection of file-system entries in a specified path.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <returns>An enumerable <see langref="string"/> collection, of the full names (including paths) for the directories in the directory specified by path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemEntries(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>Returns an enumerable collection of file-system entries that match a search pattern in a specified path.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <returns>An enumerable <see langref="string"/> collection, of the full names (including paths) for the directories in the directory specified by path and that match the specified search pattern.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemEntries(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption)">
            <summary>Returns an enumerable collection of directory names that match a search pattern in a specified path, and optionally searches subdirectories.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <returns>An enumerable <see langref="string"/> collection, of the full names (including paths) for the directories in the directory specified by path and that match the specified search pattern and option.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemEntries(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption,System.Boolean)">
            <summary>Returns an enumerable collection of file names and directory names that match a search pattern in a specified path, and optionally searches subdirectories.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <param name="continueOnAccessError">If set to <c>true</c> skip on access errors resulted from ACLs protected directories or non-accessible reparse points.</param>
            <returns>An enumerable <see langref="string"/> collection, of the full names (including paths) for the directories in the directory specified by path and that match the specified search pattern and option.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Exists(System.String)">
            <summary>Determines whether the given path refers to an existing directory on disk.</summary>
            <param name="path">The path to test.</param>
            <returns><c>true</c> if path refers to an existing directory, <c>false</c> otherwise.</returns>
            <remarks>Possible performance improvement may be achieved by utilizing <see cref="F:Alphaleonis.Win32.Filesystem.NativeMethods.FindExSearchOps.SearchLimitToDirectories"/>.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Exists(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Determines whether the given path refers to an existing directory on disk.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path to test.</param>
            <returns><c>true</c> if path refers to an existing directory, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetAccessControl(System.String)">
            <summary>Gets a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that encapsulates the access control list (ACL) entries for the specified directory.</summary>
            <param name="path">The path to a directory containing a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that describes the file's access control list (ACL) information.</param>
            <returns>A <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that encapsulates the access control rules for the file described by the <paramref name="path"/> parameter.</returns>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)">
            <summary>Gets a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that encapsulates the specified type of access control list (ACL) entries for a particular directory.</summary>
            <param name="path">The path to a directory containing a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that describes the directory's access control list (ACL) information.</param>
            <param name="includeSections">One (or more) of the <see cref="T:System.Security.AccessControl.AccessControlSections"/> values that specifies the type of access control list (ACL) information to receive.</param>
            <returns>A <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that encapsulates the access control rules for the directory described by the <paramref name="path"/> parameter. </returns>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetCreationTime(System.String)">
            <summary>Gets the creation date and time of the specified directory.</summary>
            <param name="path">The directory for which to obtain creation date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified directory. This value is expressed in local time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetCreationTime(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Gets the creation date and time of the specified directory.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory for which to obtain creation date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified directory. This value is expressed in local time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetCreationTimeUtc(System.String)">
            <summary>Gets the creation date and time, in Coordinated Universal Time (UTC) format, of the specified directory.</summary>
            <param name="path">The directory for which to obtain creation date and time information, in Coordinated Universal Time (UTC) format.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified directory. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetCreationTimeUtc(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Gets the creation date and time, in Coordinated Universal Time (UTC) format, of the specified directory.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory for which to obtain creation date and time information, in Coordinated Universal Time (UTC) format.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified directory. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetCurrentDirectory">
            <summary>Gets the current working directory of the application.</summary>
            <returns>A string that contains the path of the current working directory, and does not end with a backslash (\).</returns>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetDirectories(System.String)">
            <summary>Gets the names of subdirectories (including their paths) in the specified directory.</summary>
            <param name="path">The path for which an array of subdirectory names is returned.</param>
            <returns>An <see cref="T:System.String"/>[] array of the full names (including paths) of subdirectories in the specified path.</returns>
            <remarks>
            The EnumerateDirectories and GetDirectories methods differ as follows: When you use EnumerateDirectories, you can start enumerating the collection of names
            before the whole collection is returned; when you use GetDirectories, you must wait for the whole array of names to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateDirectories can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetDirectories(System.String,System.String)">
            <summary>Gets the names of subdirectories (including their paths) that match the specified search pattern in the current directory.</summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <returns>An <see cref="T:System.String"/>[] array of the full names (including paths) of the subdirectories that match the search pattern.</returns>
            <remarks>
            The EnumerateDirectories and GetDirectories methods differ as follows: When you use EnumerateDirectories, you can start enumerating the collection of names
            before the whole collection is returned; when you use GetDirectories, you must wait for the whole array of names to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateDirectories can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetDirectories(System.String,System.String,System.IO.SearchOption)">
            <summary>Gets the names of the subdirectories (including their paths) that match the specified search pattern in the current directory, and optionally searches subdirectories.</summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <returns>An <see cref="T:System.String"/>[] array of the full names (including paths) of subdirectories in the specified path.</returns>
            <remarks>
            The EnumerateDirectories and GetDirectories methods differ as follows: When you use EnumerateDirectories, you can start enumerating the collection of names
            before the whole collection is returned; when you use GetDirectories, you must wait for the whole array of names to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateDirectories can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetDirectories(System.String,System.String,System.IO.SearchOption,System.Boolean)">
            <summary>Gets the names of the subdirectories (including their paths) that match the specified search pattern in the current directory, and optionally searches subdirectories.</summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <param name="continueOnAccessError">If set to <c>true</c> skip on access errors resulted from ACLs protected directories or non-accessible reparse points.</param>
            <returns>An <see cref="T:System.String"/>[] array of the full names (including paths) of subdirectories in the specified path.</returns>
            <remarks>
            The EnumerateDirectories and GetDirectories methods differ as follows: When you use EnumerateDirectories, you can start enumerating the collection of names
            before the whole collection is returned; when you use GetDirectories, you must wait for the whole array of names to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateDirectories can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetDirectories(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Gets the names of subdirectories (including their paths) in the specified directory.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path for which an array of subdirectory names is returned.</param>
            <returns>An <see cref="T:System.String"/>[] array of the full names (including paths) of subdirectories in the specified path.</returns>
            <remarks>
            The EnumerateDirectories and GetDirectories methods differ as follows: When you use EnumerateDirectories, you can start enumerating the collection of names
            before the whole collection is returned; when you use GetDirectories, you must wait for the whole array of names to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateDirectories can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetDirectories(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>Gets the names of subdirectories (including their paths) that match the specified search pattern in the current directory.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path to search.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <returns>An <see cref="T:System.String"/>[] array of the full names (including paths) of the subdirectories that match the search pattern.</returns>
            <remarks>
            The EnumerateDirectories and GetDirectories methods differ as follows: When you use EnumerateDirectories, you can start enumerating the collection of names
            before the whole collection is returned; when you use GetDirectories, you must wait for the whole array of names to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateDirectories can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetDirectories(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption)">
            <summary>Gets the names of the subdirectories (including their paths) that match the specified search pattern in the current directory, and optionally searches subdirectories.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path to search.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <returns>An <see cref="T:System.String"/>[] array of the full names (including paths) of subdirectories in the specified path.</returns>
            <remarks>
            The EnumerateDirectories and GetDirectories methods differ as follows: When you use EnumerateDirectories, you can start enumerating the collection of names
            before the whole collection is returned; when you use GetDirectories, you must wait for the whole array of names to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateDirectories can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetDirectories(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption,System.Boolean)">
            <summary>Gets the names of the subdirectories (including their paths) that match the specified search pattern in the current directory, and optionally searches subdirectories.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path to search.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <param name="continueOnAccessError">If set to <c>true</c> skip on access errors resulted from ACLs protected directories or non-accessible reparse points.</param>
            <returns>An <see cref="T:System.String"/>[] array of the full names (including paths) of subdirectories in the specified path.</returns>
            <remarks>
            The EnumerateDirectories and GetDirectories methods differ as follows: When you use EnumerateDirectories, you can start enumerating the collection of names
            before the whole collection is returned; when you use GetDirectories, you must wait for the whole array of names to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateDirectories can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetDirectoryRoot(System.String)">
            <summary>Returns the volume information, root information, or both for the specified path.</summary>
            <param name="path">The path of a file or directory.</param>
            <returns>A string that contains the volume information, root information, or both for the specified path, or <see langref="null"/> if <paramref name="path"/> path does not contain root directory information.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetDirectoryRoot(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Returns the volume information, root information, or both for the specified path.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path of a file or directory.</param>
            <returns>A string that contains the volume information, root information, or both for the specified path, or <see langref="null"/> if <paramref name="path"/> path does not contain root directory information.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFiles(System.String)">
            <summary>Returns the names of files (including their paths) in the specified directory.</summary>
            <param name="path">The directory from which to retrieve the files.</param>
            <returns>An <see cref="T:System.String"/>[] array of the full names (including paths) for the files in the specified directory.</returns>
            <remarks>
            The EnumerateFiles and GetFiles methods differ as follows: When you use EnumerateFiles, you can start enumerating the collection of names
            before the whole collection is returned; when you use GetFiles, you must wait for the whole array of names to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFiles(System.String,System.String)">
            <summary>Returns the names of files (including their paths) that match the specified search pattern in the specified directory.</summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <returns>An <see cref="T:System.String"/>[] array of the full names (including paths) for the files in the specified directory that match the specified search pattern.</returns>
            <remarks>
            The EnumerateFiles and GetFiles methods differ as follows: When you use EnumerateFiles, you can start enumerating the collection of names
            before the whole collection is returned; when you use GetFiles, you must wait for the whole array of names to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>Gets the names of the subdirectories (including their paths) that match the specified search pattern in the current directory, and optionally searches subdirectories.</summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <returns>An <see cref="T:System.String"/>[] array of the full names (including paths) for the files in the specified directory that match the specified search pattern and option.</returns>
            <remarks>
            The EnumerateFiles and GetFiles methods differ as follows: When you use EnumerateFiles, you can start enumerating the collection of names
            before the whole collection is returned; when you use GetFiles, you must wait for the whole array of names to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFiles(System.String,System.String,System.IO.SearchOption,System.Boolean)">
            <summary>Gets the names of the subdirectories (including their paths) that match the specified search pattern in the current directory, and optionally searches subdirectories.</summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <param name="continueOnAccessError">If set to <c>true</c> skip on access errors resulted from ACLs protected directories or non-accessible reparse points.</param>
            <returns>An <see cref="T:System.String"/>[] array of the full names (including paths) for the files in the specified directory that match the specified search pattern and option.</returns>
            <remarks>
            The EnumerateFiles and GetFiles methods differ as follows: When you use EnumerateFiles, you can start enumerating the collection of names
            before the whole collection is returned; when you use GetFiles, you must wait for the whole array of names to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFiles(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Returns the names of files (including their paths) in the specified directory.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory from which to retrieve the files.</param>
            <returns>An <see cref="T:System.String"/>[] array of the full names (including paths) for the files in the specified directory.</returns>
            <remarks>
            The EnumerateFiles and GetFiles methods differ as follows: When you use EnumerateFiles, you can start enumerating the collection of names
            before the whole collection is returned; when you use GetFiles, you must wait for the whole array of names to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFiles(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>Returns the names of files (including their paths) that match the specified search pattern in the specified directory.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <returns>An <see cref="T:System.String"/>[] array of the full names (including paths) for the files in the specified directory that match the specified search pattern.</returns>
            <remarks>
            The EnumerateFiles and GetFiles methods differ as follows: When you use EnumerateFiles, you can start enumerating the collection of names
            before the whole collection is returned; when you use GetFiles, you must wait for the whole array of names to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFiles(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption)">
            <summary>Gets the names of the subdirectories (including their paths) that match the specified search pattern in the current directory, and optionally searches subdirectories.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path to search.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <returns>An <see cref="T:System.String"/>[] array of the full names (including paths) for the files in the specified directory that match the specified search pattern and option.</returns>
            <remarks>
            The EnumerateFiles and GetFiles methods differ as follows: When you use EnumerateFiles, you can start enumerating the collection of names
            before the whole collection is returned; when you use GetFiles, you must wait for the whole array of names to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFiles(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption,System.Boolean)">
            <summary>Gets the names of the subdirectories (including their paths) that match the specified search pattern in the current directory, and optionally searches subdirectories.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path to search.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <param name="continueOnAccessError">If set to <c>true</c> skip on access errors resulted from ACLs protected directories or non-accessible reparse points.</param>
            <returns>An <see cref="T:System.String"/>[] array of the full names (including paths) for the files in the specified directory that match the specified search pattern and option.</returns>
            <remarks>
            The EnumerateFiles and GetFiles methods differ as follows: When you use EnumerateFiles, you can start enumerating the collection of names
            before the whole collection is returned; when you use GetFiles, you must wait for the whole array of names to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFileSystemEntries(System.String)">
            <summary>Returns the names of all files and subdirectories in the specified directory.</summary>
            <param name="path">The directory for which file and subdirectory names are returned.</param>
            <returns>An <see cref="T:System.String"/>[] array of the names of files and subdirectories in the specified directory.</returns>
            <remarks>
            The EnumerateFileSystemEntries and GetFileSystemEntries methods differ as follows: When you use EnumerateFileSystemEntries,
            you can start enumerating the collection of entries before the whole collection is returned; when you use GetFileSystemEntries,
            you must wait for the whole array of entries to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFileSystemEntries(System.String,System.String)">
            <summary>Returns an array of file system entries that match the specified search criteria.</summary>
            <param name="path">The path to be searched.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <returns>An <see cref="T:System.String"/>[] array of file system entries that match the specified search criteria.</returns>
            <remarks>
            The EnumerateFileSystemEntries and GetFileSystemEntries methods differ as follows: When you use EnumerateFileSystemEntries,
            you can start enumerating the collection of entries before the whole collection is returned; when you use GetFileSystemEntries,
            you must wait for the whole array of entries to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFileSystemEntries(System.String,System.String,System.IO.SearchOption)">
            <summary>Gets an array of all the file names and directory names that match a search pattern in a specified path, and optionally searches subdirectories.</summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <returns>An <see cref="T:System.String"/>[] array of file system entries that match the specified search criteria.</returns>
            <remarks>
            The EnumerateFileSystemEntries and GetFileSystemEntries methods differ as follows: When you use EnumerateFileSystemEntries,
            you can start enumerating the collection of entries before the whole collection is returned; when you use GetFileSystemEntries,
            you must wait for the whole array of entries to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFileSystemEntries(System.String,System.String,System.IO.SearchOption,System.Boolean)">
            <summary>Gets an array of all the file names and directory names that match a search pattern in a specified path, and optionally searches subdirectories.</summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <param name="continueOnAccessError">If set to <c>true</c> skip on access errors resulted from ACLs protected directories or non-accessible reparse points.</param>
            <returns>An <see cref="T:System.String"/>[] array of file system entries that match the specified search criteria.</returns>
            <remarks>
            The EnumerateFileSystemEntries and GetFileSystemEntries methods differ as follows: When you use EnumerateFileSystemEntries,
            you can start enumerating the collection of entries before the whole collection is returned; when you use GetFileSystemEntries,
            you must wait for the whole array of entries to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFileSystemEntries(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Returns the names of all files and subdirectories in the specified directory.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory for which file and subdirectory names are returned.</param>
            <returns>An <see cref="T:System.String"/>[] array of the names of files and subdirectories in the specified directory.</returns>
            <remarks>
            The EnumerateFileSystemEntries and GetFileSystemEntries methods differ as follows: When you use EnumerateFileSystemEntries,
            you can start enumerating the collection of entries before the whole collection is returned; when you use GetFileSystemEntries,
            you must wait for the whole array of entries to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFileSystemEntries(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>Returns an array of file system entries that match the specified search criteria.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path to be searched.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <returns>An <see cref="T:System.String"/>[] array of file system entries that match the specified search criteria.</returns>
            <remarks>
            The EnumerateFileSystemEntries and GetFileSystemEntries methods differ as follows: When you use EnumerateFileSystemEntries,
            you can start enumerating the collection of entries before the whole collection is returned; when you use GetFileSystemEntries,
            you must wait for the whole array of entries to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFileSystemEntries(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption)">
            <summary>Gets an array of all the file names and directory names that match a search pattern in a specified path, and optionally searches subdirectories.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <returns>An <see cref="T:System.String"/>[] array of file system entries that match the specified search criteria.</returns>
            <remarks>
            The EnumerateFileSystemEntries and GetFileSystemEntries methods differ as follows: When you use EnumerateFileSystemEntries,
            you can start enumerating the collection of entries before the whole collection is returned; when you use GetFileSystemEntries,
            you must wait for the whole array of entries to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFileSystemEntries(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption,System.Boolean)">
            <summary>Gets an array of all the file names and directory names that match a search pattern in a specified path, and optionally searches subdirectories.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <param name="continueOnAccessError">If set to <c>true</c> skip on access errors resulted from ACLs protected directories or non-accessible reparse points.</param>
            <returns>An <see cref="T:System.String"/>[] array of file system entries that match the specified search criteria.</returns>
            <remarks>
            The EnumerateFileSystemEntries and GetFileSystemEntries methods differ as follows: When you use EnumerateFileSystemEntries,
            you can start enumerating the collection of entries before the whole collection is returned; when you use GetFileSystemEntries,
            you must wait for the whole array of entries to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetLastAccessTime(System.String)">
            <summary>Gets the date and time that the specified directory was last accessed.</summary>
            <param name="path">The directory for which to obtain access date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified directory was last accessed. This value is expressed in local time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetLastAccessTime(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Gets the date and time that the specified directory was last accessed.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory for which to obtain access date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified directory was last accessed. This value is expressed in local time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetLastAccessTimeUtc(System.String)">
            <summary>Gets the date and time, in coordinated universal time (UTC), that the specified directory was last accessed.</summary>
            <param name="path">The directory for which to obtain access date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified directory was last accessed. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetLastAccessTimeUtc(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Gets the date and time, in coordinated universal time (UTC), that the specified directory was last accessed.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory for which to obtain access date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified directory was last accessed. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetLastWriteTime(System.String)">
            <summary>Gets the date and time that the specified directory was last written to.</summary>
            <param name="path">The directory for which to obtain write date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified directory was last written to. This value is expressed in local time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetLastWriteTime(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Gets the date and time that the specified directory was last written to.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory for which to obtain write date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified directory was last written to. This value is expressed in local time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetLastWriteTimeUtc(System.String)">
            <summary>Gets the date and time, in coordinated universal time (UTC) time, that the specified directory was last written to.</summary>
            <param name="path">The directory for which to obtain write date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified directory was last written to. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetLastWriteTimeUtc(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Gets the date and time, in coordinated universal time (UTC) time, that the specified directory was last written to.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory for which to obtain write date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified directory was last written to. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetLogicalDrives">
            <summary>Retrieves the names of the logical drives on this computer in the form "driveLetter:\"</summary>
            <returns>The logical drives on this computer as a <see cref="T:System.String"/>[] array.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetParent(System.String)">
            <summary>Retrieves the parent directory of the specified path, including both absolute and relative paths.</summary>
            <param name="path">The path for which to retrieve the parent directory.</param>
            <returns>The parent directory, or null if <paramref name="path"/> is the root directory, including the root of a UNC server or share name.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetParent(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Retrieves the parent directory of the specified path, including both absolute and relative paths.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path for which to retrieve the parent directory.</param>
            <returns>The parent directory, or null if <paramref name="path"/> is the root directory, including the root of a UNC server or share name.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Move(System.String,System.String)">
            <summary>Moves a file or a directory and its contents to a new location.</summary>
            <param name="sourcePath">The path of the file or directory to move.</param>
            <param name="destinationPath">The path to the new location for sourcePath. If sourcePath is a file, then destinationPath must also be a file name.</param>
            <remarks>This method works across disk volumes.</remarks>
            <remarks>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Move(System.String,System.String,System.Boolean)">
            <summary>Moves a file or a directory and its contents to a new location.</summary>
            <param name="sourcePath">The path of the file or directory to move.</param>
            <param name="destinationPath">The path to the new location for sourcePath. If sourcePath is a file, then destinationPath must also be a file name.</param>
            <param name="overwrite"><c>true</c> Delete destination folder if it exists; <c>false</c> Move will fail on existing folders or files.</param>
            <remarks>This method works across disk volumes.</remarks>
            <remarks>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Move(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>Moves a file or a directory and its contents to a new location.</summary>
            <param name="sourcePath">The source folder path, of type <see cref="T:System.String"/></param>
            <param name="destinationPath">The destination folder path, of type <see cref="T:System.String"/></param>
            <param name="overwrite"><c>true</c> Delete destination folder if it exists; <c>false</c> Move will fail on existing folders or files.</param>
            <param name="preserveSecurity"><c>true</c> Preserves directory ACLs information.</param>
            <remarks>This method works across disk volumes.</remarks>
            <remarks>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Move(System.String,System.String,Alphaleonis.Win32.Filesystem.MoveOptions,System.Boolean,Alphaleonis.Win32.Filesystem.CopyProgressRoutine,System.Object)">
            <summary>Moves a file or a directory and its contents to a new location.</summary>
            <param name="sourcePath">The source folder path, of type <see cref="T:System.String"/></param>
            <param name="destinationPath">The destination folder path, of type <see cref="T:System.String"/></param>
            <param name="moveOptions"><see cref="T:Alphaleonis.Win32.Filesystem.MoveOptions"/> that specify how the directory is to be moved. This parameter can be <see langword="null"/>.</param>
            <param name="preserveSecurity"><c>true</c> Preserves directory ACLs information.</param>
            <param name="copyProgress">A callback function that is called each time another portion of the file has been copied. This parameter can be <see langword="null"/>.</param>
            <param name="userProgressData">The argument to be passed to the callback function. This parameter can be <see langword="null"/>.</param>
            <remarks>This method works across disk volumes.</remarks>
            <remarks>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Move(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>Moves a file or a directory and its contents to a new location.</summary>
            <param name="transaction">The transaction.</param>
            <param name="sourcePath">The path of the file or directory to move.</param>
            <param name="destinationPath">The path to the new location for sourcePath. If sourcePath is a file, then destinationPath must also be a file name.</param>
            <remarks>This method works across disk volumes.</remarks>
            <remarks>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Move(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.Boolean)">
            <summary>Moves a file or a directory and its contents to a new location.</summary>
            <param name="transaction">The transaction.</param>
            <param name="sourcePath">The path of the file or directory to move.</param>
            <param name="destinationPath">The path to the new location for sourcePath. If sourcePath is a file, then destinationPath must also be a file name.</param>
            <param name="overwrite"><c>true</c> Delete destination folder if it exists; <c>false</c> Move will fail on existing folders or files.</param>
            <remarks>This method works across disk volumes.</remarks>
            <remarks>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Move(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>Moves a file or a directory and its contents to a new location.</summary>
            <param name="transaction">The transaction.</param>
            <param name="sourcePath">The source folder path, of type <see cref="T:System.String"/></param>
            <param name="destinationPath">The destination folder path, of type <see cref="T:System.String"/></param>
            <param name="overwrite"><c>true</c> Delete destination folder if it exists; <c>false</c> Move will fail on existing folders or files.</param>
            <param name="preserveSecurity"><c>true</c> Preserves directory ACLs information.</param>
            <remarks>This method works across disk volumes.</remarks>
            <remarks>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Move(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.MoveOptions,System.Boolean,Alphaleonis.Win32.Filesystem.CopyProgressRoutine,System.Object)">
            <summary>Moves a file or a directory and its contents to a new location.</summary>
            <param name="transaction">The transaction.</param>
            <param name="sourcePath">The source folder path, of type <see cref="T:System.String"/></param>
            <param name="destinationPath">The destination folder path, of type <see cref="T:System.String"/></param>
            <param name="moveOptions"><see cref="T:Alphaleonis.Win32.Filesystem.MoveOptions"/> that specify how the directory is to be moved. This parameter can be <see langword="null"/>.</param>
            <param name="preserveSecurity"><c>true</c> Preserves directory ACLs information.</param>
            <param name="copyProgress">A callback function that is called each time another portion of the file has been copied. This parameter can be <see langword="null"/>.</param>
            <param name="userProgressData">The argument to be passed to the callback function. This parameter can be <see langword="null"/>.</param>
            <remarks>This method works across disk volumes.</remarks>
            <remarks>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetAccessControl(System.String,System.Security.AccessControl.DirectorySecurity)">
            <summary>Applies access control list (ACL) entries described by a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object to the specified directory.</summary>
            <param name="path">A directory to add or remove access control list (ACL) entries from.</param>
            <param name="directorySecurity">A <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that describes an ACL entry to apply to the directory described by the path parameter.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetAccessControl(System.String,System.Security.AccessControl.DirectorySecurity,System.Security.AccessControl.AccessControlSections)">
            <summary>Applies access control list (ACL) entries described by a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object to the specified directory.</summary>
            <param name="path">A directory to add or remove access control list (ACL) entries from.</param>
            <param name="directorySecurity">A <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that describes an ACL entry to apply to the directory described by the path parameter.</param>
            <param name="includeSections">One or more of the <see cref="T:System.Security.AccessControl.AccessControlSections"/> values that specifies the type of access control list (ACL) information to set.</param>
            <remarks>Note that unlike <see cref="M:System.IO.File.SetAccessControl(System.String,System.Security.AccessControl.FileSecurity)"/> this method does <b>not</b> automatically
            determine what parts of the specified <see cref="T:System.Security.AccessControl.DirectorySecurity"/> instance has been modified. Instead, the
            parameter <paramref name="includeSections"/> is used to specify what entries from <paramref name="directorySecurity"/> to apply to <paramref name="path"/>.</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetCreationTime(System.String,System.DateTime)">
            <summary>Sets the date and time the directory was created.</summary>
            <param name="path">The directory for which to set the creation date and time information.</param>
            <param name="creationTime">A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value is expressed in local time.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetCreationTime(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime)">
            <summary>Sets the date and time the directory was created.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory for which to set the creation date and time information.</param>
            <param name="creationTime">A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value is expressed in local time.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetCreationTimeUtc(System.String,System.DateTime)">
            <summary>Sets the date and time, in coordinated universal time (UTC), that the directory was created.</summary>
            <param name="path">The directory for which to set the creation date and time information.</param>
            <param name="creationTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetCreationTimeUtc(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime)">
            <summary>Sets the date and time, in coordinated universal time (UTC), that the directory was created.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory for which to set the creation date and time information.</param>
            <param name="creationTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetCurrentDirectory(System.String)">
            <summary>Sets the application's current working directory to the specified directory.</summary>
            <param name="path">The path to which the current working directory is set.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetLastAccessTime(System.String,System.DateTime)">
            <summary>Sets the date and time that the specified directory was last accessed.</summary>
            <param name="path">The file for which to set the access date and time information.</param>
            <param name="lastAccessTime">A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This value is expressed in local time.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetLastAccessTime(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime)">
            <summary>Sets the date and time that the specified directory was last accessed.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory for which to set the access date and time information.</param>
            <param name="lastAccessTime">A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This value is expressed in local time.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <summary>Sets the date and time, in coordinated universal time (UTC), that the specified directory was last accessed.</summary>
            <param name="path">The directory for which to set the access date and time information.</param>
            <param name="lastAccessTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetLastAccessTimeUtc(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime)">
            <summary>Sets the date and time, in coordinated universal time (UTC), that the specified directory was last accessed.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory for which to set the access date and time information.</param>
            <param name="lastAccessTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetLastWriteTime(System.String,System.DateTime)">
            <summary>Sets the date and time that the specified directory was last written to.</summary>
            <param name="path">The directory for which to set the date and time information.</param>
            <param name="lastWriteTime">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value is expressed in local time.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetLastWriteTime(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime)">
            <summary>Sets the date and time that the specified directory was last written to.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory for which to set the date and time information.</param>
            <param name="lastWriteTime">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value is expressed in local time.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>Sets the date and time, in coordinated universal time (UTC), that the specified directory was last written to.</summary>
            <param name="path">The directory for which to set the date and time information.</param>
            <param name="lastWriteTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetLastWriteTimeUtc(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime)">
            <summary>Sets the date and time, in coordinated universal time (UTC), that the specified directory was last written to.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory for which to set the date and time information.</param>
            <param name="lastWriteTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Compress(System.String)">
            <summary>Compresses a directory using NTFS compression.</summary>
            <param name="path">A path that describes a directory to compress.</param>
            <remarks>This will only compress the root items, non recursive.</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Compress(System.String,System.IO.SearchOption)">
            <summary>Compresses a directory using NTFS compression.</summary>
            <param name="path">A path that describes a directory to compress.</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Compress(System.String,System.IO.SearchOption,System.Boolean)">
            <summary>Compresses a directory using NTFS compression.</summary>
            <param name="path">A path that describes a directory to compress.</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <param name="continueOnAccessError">If set to <c>true</c> skip on access errors resulted from ACLs protected directories or non-accessible reparse points.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Compress(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Compresses a directory using NTFS compression.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A path that describes a directory to compress.</param>
            <remarks>This will only compress the root items, non recursive.</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Compress(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.SearchOption)">
            <summary>Compresses a directory using NTFS compression.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A path that describes a directory to compress.</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Compress(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.SearchOption,System.Boolean)">
            <summary>Compresses a directory using NTFS compression.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A path that describes a directory to compress.</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <param name="continueOnAccessError">If set to <c>true</c> skip on access errors resulted from ACLs protected directories or non-accessible reparse points.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Copy(System.String,System.String)">
            <summary>Recursive copying of folders and files from one root to another.</summary>
            <param name="sourcePath">The source folder path, of type <see cref="T:System.String"/></param>
            <param name="destinationPath">The destination folder path, of type <see cref="T:System.String"/></param>
            <remarks>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Copy(System.String,System.String,System.Boolean)">
            <summary>Recursive copying of folders and files from one root to another.</summary>
            <param name="sourcePath">The source folder path, of type <see cref="T:System.String"/></param>
            <param name="destinationPath">The destination folder path, of type <see cref="T:System.String"/></param>
            <param name="overwrite"><c>true</c> Delete destination folder if it exists; <c>false</c> Copy will fail on existing folders or files.</param>
            <remarks>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Copy(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>Recursive copying of folders and files from one root to another.</summary>
            <param name="sourcePath">The source folder path, of type <see cref="T:System.String"/></param>
            <param name="destinationPath">The destination folder path, of type <see cref="T:System.String"/></param>
            <param name="overwrite"><c>true</c> Delete destination folder if it exists; <c>false</c> Copy will fail on existing folders or files.</param>
            <param name="preserveSecurity"><c>true</c> Preserves directory ACLs information.</param>
            <remarks>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Copy(System.String,System.String,Alphaleonis.Win32.Filesystem.CopyOptions,System.Boolean,Alphaleonis.Win32.Filesystem.CopyProgressRoutine,System.Object)">
            <summary>Recursive copying of folders and files from one root to another.</summary>
            <param name="sourcePath">The source folder path, of type <see cref="T:System.String"/></param>
            <param name="destinationPath">The destination folder path, of type <see cref="T:System.String"/></param>
            <param name="copyOptions"><see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> that specify how the directory is to be copied. This parameter can be <see langword="null"/>.</param>
            <param name="preserveSecurity"><c>true</c> Preserves directory ACLs information.</param>
            <param name="copyProgress">A callback function that is called each time another portion of the file has been copied. This parameter can be <see langword="null"/>.</param>
            <param name="userProgressData">The argument to be passed to the callback function. This parameter can be <see langword="null"/>.</param>
            <remarks>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Copy(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>Recursive copying of folders and files from one root to another.</summary>
            <param name="transaction">The transaction.</param>
            <param name="sourcePath">The source folder path, of type <see cref="T:System.String"/></param>
            <param name="destinationPath">The destination folder path, of type <see cref="T:System.String"/></param>
            <remarks>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Copy(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.Boolean)">
            <summary>Recursive copying of folders and files from one root to another.</summary>
            <param name="transaction">The transaction.</param>
            <param name="sourcePath">The source folder path, of type <see cref="T:System.String"/></param>
            <param name="destinationPath">The destination folder path, of type <see cref="T:System.String"/></param>
            <param name="overwrite"><c>true</c> Delete destination folder if it exists; <c>false</c> Copy will fail on existing folders or files.</param>
            <remarks>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Copy(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>Recursive copying of folders and files from one root to another.</summary>
            <param name="transaction">The transaction.</param>
            <param name="sourcePath">The source folder path, of type <see cref="T:System.String"/></param>
            <param name="destinationPath">The destination folder path, of type <see cref="T:System.String"/></param>
            <param name="overwrite"><c>true</c> Delete destination folder if it exists; <c>false</c> Copy will fail on existing folders or files.</param>
            <param name="preserveSecurity"><c>true</c> Preserves directory ACLs information.</param>
            <remarks>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Copy(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.CopyOptions,System.Boolean,Alphaleonis.Win32.Filesystem.CopyProgressRoutine,System.Object)">
            <summary>Recursive copying of folders and files from one root to another.</summary>
            <param name="transaction">The transaction.</param>
            <param name="sourcePath">The source folder path, of type <see cref="T:System.String"/></param>
            <param name="destinationPath">The destination folder path, of type <see cref="T:System.String"/></param>
            <param name="copyOptions"><see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> that specify how the directory is to be copied. This parameter can be <see langword="null"/>.</param>
            <param name="preserveSecurity"><c>true</c> Preserves directory ACLs information.</param>
            <param name="copyProgress">A callback function that is called each time another portion of the file has been copied. This parameter can be <see langword="null"/>.</param>
            <param name="userProgressData">The argument to be passed to the callback function. This parameter can be <see langword="null"/>.</param>
            <remarks>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CountDirectories(System.String)">
            <summary>Counts directories in a given directory.</summary>
            <param name="path">The directory path.</param>
            <returns>The counted number of directories.</returns>
            <exception cref="T:System.UnauthorizedAccessException">An exception is thrown case of access errors.</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CountDirectories(System.String,System.String)">
            <summary>Counts directories in a given directory.</summary>
            <param name="path">The directory path.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <returns>The counted number of directories.</returns>
            <exception cref="T:System.UnauthorizedAccessException">An exception is thrown case of access errors.</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CountDirectories(System.String,System.String,System.IO.SearchOption)">
            <summary>Counts directories in a given directory.</summary>
            <param name="path">The directory path.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <returns>The counted number of directories.</returns>
            <exception cref="T:System.UnauthorizedAccessException">An exception is thrown case of access errors.</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CountDirectories(System.String,System.String,System.IO.SearchOption,System.Boolean)">
            <summary>Counts directories in a given directory.</summary>
            <param name="path">The directory path.</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <param name="continueOnAccessError">If set to <c>true</c> skip on access errors resulted from ACLs protected directories or non-accessible reparse points.</param>
            <returns>The counted number of directories.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CountDirectories(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Counts directories in a given directory.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory path.</param>
            <returns>The counted number of directories.</returns>
            <exception cref="T:System.UnauthorizedAccessException">An exception is thrown case of access errors.</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CountDirectories(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>Counts directories in a given directory.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory path.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <returns>The counted number of directories.</returns>
            <exception cref="T:System.UnauthorizedAccessException">An exception is thrown case of access errors.</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CountDirectories(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption)">
            <summary>Counts directories in a given directory.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory path.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <returns>The counted number of directories.</returns>
            <exception cref="T:System.UnauthorizedAccessException">An exception is thrown case of access errors.</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CountDirectories(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption,System.Boolean)">
            <summary>Counts directories in a given directory.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory path.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <param name="continueOnAccessError">If set to <c>true</c> skip on access errors resulted from ACLs protected directories or non-accessible reparse points.</param>
            <returns>The counted number of directories.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CountFiles(System.String)">
            <summary>Counts files in a given directory.</summary>
            <param name="path">The directory path.</param>
            <returns>The counted number of files.</returns>
            <exception cref="T:System.UnauthorizedAccessException">An exception is thrown case of access errors.</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CountFiles(System.String,System.String)">
            <summary>Counts files in a given directory.</summary>
            <param name="path">The directory path.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <returns>The counted number of files.</returns>
            <exception cref="T:System.UnauthorizedAccessException">An exception is thrown case of access errors.</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CountFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>Counts files in a given directory.</summary>
            <param name="path">The directory path.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <returns>The counted number of files.</returns>
            <exception cref="T:System.UnauthorizedAccessException">An exception is thrown case of access errors.</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CountFiles(System.String,System.String,System.IO.SearchOption,System.Boolean)">
            <summary>Counts files in a given directory.</summary>
            <param name="path">The directory path.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <param name="continueOnAccessError">If set to <c>true</c> skip on access errors resulted from ACLs protected directories or non-accessible reparse points.</param>
            <returns>The counted number of files.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CountFiles(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Counts files in a given directory.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory path.</param>
            <returns>The counted number of files.</returns>
            <exception cref="T:System.UnauthorizedAccessException">An exception is thrown case of access errors.</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CountFiles(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>Counts files in a given directory.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory path.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <returns>The counted number of files.</returns>
            <exception cref="T:System.UnauthorizedAccessException">An exception is thrown case of access errors.</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CountFiles(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption)">
            <summary>Counts files in a given directory.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory path.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <returns>The counted number of files.</returns>
            <exception cref="T:System.UnauthorizedAccessException">An exception is thrown case of access errors.</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CountFiles(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption,System.Boolean)">
            <summary>Counts files in a given directory.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory path.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <param name="continueOnAccessError">If set to <c>true</c> skip on access errors resulted from ACLs protected directories or non-accessible reparse points.</param>
            <returns>The counted number of files.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.DisableCompression(System.String)">
            <summary>Disables NTFS compression of the specified directory and the files in it.</summary>
            <param name="path">A path to a folder to decompress.</param>
            <remarks>This method disables the folder-compression attribute. It will not decompress the current contents of the folder.
            However, newly created files and folders will be uncompressed.</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.DisableCompression(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Disables NTFS compression of the specified directory and the files in it.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A path to a folder to decompress.</param>
            <remarks>This method disables the folder-compression attribute. It will not decompress the current contents of the folder.
            However, newly created files and folders will be uncompressed.</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Decompress(System.String)">
            <summary>Decompresses an NTFS compressed directory.</summary>
            <param name="path">A path that describes a directory to decompress.</param>
            <remarks>This will only decompress the root items, non recursive.</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Decompress(System.String,System.IO.SearchOption)">
            <summary>Decompresses an NTFS compressed directory.</summary>
            <param name="path">A path that describes a directory to decompress.</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Decompress(System.String,System.IO.SearchOption,System.Boolean)">
            <summary>Decompresses an NTFS compressed directory.</summary>
            <param name="path">A path that describes a directory to decompress.</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <param name="continueOnAccessError">If set to <c>true</c> skip on access errors resulted from ACLs protected directories or non-accessible reparse points.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Decompress(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Decompresses an NTFS compressed directory.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A path that describes a directory to decompress.</param>
            <remarks>This will only decompress the root items, non recursive.</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Decompress(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.SearchOption)">
            <summary>Decompresses an NTFS compressed directory.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A path that describes a directory to decompress.</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Decompress(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.SearchOption,System.Boolean)">
            <summary>Decompresses an NTFS compressed directory.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A path that describes a directory to decompress.</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <param name="continueOnAccessError">If set to <c>true</c> skip on access errors resulted from ACLs protected directories or non-accessible reparse points.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Decrypt(System.String)">
            <summary>Decrypts a directory that was encrypted by the current account using the Encrypt method.</summary>
            <param name="path">A path that describes a directory to decrypt.</param>
            <remarks>This will only decrypt the root items, non recursive.</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.DeleteEmpty(System.String)">
            <summary>Deletes empty subdirectores from the specified directory.</summary>
            <param name="path">The name of the directory to remove empty subdirectories from.</param>
            <returns><c>true</c> on success, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.DeleteEmpty(System.String,System.Boolean)">
            <summary>Deletes empty subdirectores from the specified directory.</summary>
            <param name="path">The name of the directory to remove empty subdirectories from.</param>
            <param name="recursive"><c>true</c> to remove empty subdirectories in path; otherwise, <c>false</c>.</param>
            <returns><c>true</c> on success, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.DeleteEmpty(System.String,System.Boolean,System.Boolean)">
            <summary>Deletes empty subdirectores from the specified directory.</summary>
            <param name="path">The name of the directory to remove empty subdirectories from.</param>
            <param name="recursive"><c>true</c> to remove empty subdirectories in path; otherwise, <c>false</c>.</param>
            <param name="ignoreReadOnly">If set to <c>true</c> overrides read only <see cref="T:System.IO.FileAttributes"/> of empty subdirectories.</param>
            <returns><c>true</c> on success, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.DeleteEmpty(System.String,System.Boolean,System.Boolean,System.String)">
            <summary>Deletes empty subdirectores from the specified directory.</summary>
            <param name="path">The name of the directory to remove empty subdirectories from.</param>
            <param name="recursive"><c>true</c> to remove empty subdirectories in path; otherwise, <c>false</c>.</param>
            <param name="ignoreReadOnly">If set to <c>true</c> overrides read only <see cref="T:System.IO.FileAttributes"/> of empty subdirectories.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <returns><c>true</c> on success, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.DeleteEmpty(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Deletes empty subdirectores from the specified directory.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The name of the directory to remove empty subdirectories from.</param>
            <returns><c>true</c> on success, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.DeleteEmpty(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Boolean)">
            <summary>Deletes empty subdirectores from the specified directory.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The name of the directory to remove empty subdirectories from.</param>
            <param name="recursive"><c>true</c> to remove empty subdirectories in path; otherwise, <c>false</c>.</param>
            <returns><c>true</c> on success, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.DeleteEmpty(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Boolean,System.Boolean)">
            <summary>Deletes empty subdirectores from the specified directory.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The name of the directory to remove empty subdirectories from.</param>
            <param name="recursive"><c>true</c> to remove empty subdirectories in path; otherwise, <c>false</c>.</param>
            <param name="ignoreReadOnly">If set to <c>true</c> overrides read only <see cref="T:System.IO.FileAttributes"/> of empty subdirectories.</param>
            <returns><c>true</c> on success, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.DeleteEmpty(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>Deletes empty subdirectores from the specified directory.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The name of the directory to remove empty subdirectories from.</param>
            <param name="recursive"><c>true</c> to remove empty subdirectories in path; otherwise, <c>false</c>.</param>
            <param name="ignoreReadOnly">If set to <c>true</c> overrides read only <see cref="T:System.IO.FileAttributes"/> of empty subdirectories.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <returns><c>true</c> on success, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.DisableEncryption(System.String)">
            <summary>Disables encryption of the specified directory and the files in it. It does not affect encryption of subdirectories below the indicated directory.</summary>
            <param name="path">The name of the directory for which to disable encryption.</param>
            <remarks>This method will create/change the file "Desktop.ini" and wil set Encryption value: "Disable=0"</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnableCompression(System.String)">
            <summary>Enables NTFS compression of the specified directory and the files in it.</summary>
            <param name="path">A path to a folder to compress.</param>
            <remarks>This method enables the folder-compression attribute. It will not compress the current contents of the folder.
            However, newly created files and folders will be compressed.</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnableCompression(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Enables NTFS compression of the specified directory and the files in it.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A path to a folder to compress.</param>
            <remarks>This method enables the folder-compression attribute. It will not compress the current contents of the folder.
            However, newly created files and folders will be compressed.</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnableEncryption(System.String)">
            <summary>Enables encryption of the specified directory and the files in it. It does not affect encryption of subdirectories below the indicated directory.</summary>
            <param name="path">The name of the directory for which to enable encryption.</param>
            <remarks>This method will create/change the file "Desktop.ini" and wil set Encryption value: "Disable=1"</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemInfos(System.String)">
            <summary>Returns an enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> entries in a specified path.</summary>
            <param name="path">The directory to search.</param>
            <returns>An enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> entries in the directory specified by path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemInfos(System.String,System.String)">
            <summary>Returns an enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> entries that match a search pattern in a specified path.</summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <returns>An enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> entries in the directory specified by path and that match the specified search pattern.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemInfos(System.String,System.String,System.IO.SearchOption)">
            <summary>Returns an enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> entries that match a search pattern in a specified path, and optionally searches subdirectories.</summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <returns>An enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> entries in the directory specified by path
            and that match the specified search pattern and option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemInfos(System.String,System.String,System.IO.SearchOption,System.Boolean)">
            <summary>Returns an enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> information that matches a specified search pattern and search subdirectory option.</summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <param name="continueOnAccessError">If set to <c>true</c> skip on access errors resulted from ACLs protected directories or non-accessible reparse points.</param>
            <returns>An enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> information objects that matches searchPattern and searchOption.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemInfos(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Returns an enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> entries in a specified path.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <returns>An enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> entries in the directory specified by path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemInfos(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>Returns an enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> entries that match a search pattern in a specified path.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <returns>An enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> entries in the directory specified by path and that match the specified search pattern.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemInfos(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption)">
            <summary>Returns an enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> entries that match a search pattern in a specified path, and optionally searches subdirectories.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <returns>An enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> entries in the directory specified by path
            and that match the specified search pattern and option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemInfos(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption,System.Boolean)">
            <summary>Returns an enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> information that matches a specified search pattern and search subdirectory option.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <param name="continueOnAccessError">If set to <c>true</c> skip on access errors resulted from ACLs protected directories or non-accessible reparse points.</param>
            <returns>An enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> information objects that matches searchPattern and searchOption.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateStreams(System.String)">
            <summary>Returns an enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.BackupStreamInfo"/> instances, associated with the directory.</summary>
            <param name="path">A path that describes a directory.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection of streams for the directory specified by path, or <see langword="null"/> on error.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateStreams(System.String,System.String,System.IO.SearchOption)">
            <summary>Returns an enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.BackupStreamInfo"/> instances, associated with the directory.</summary>
            <param name="path">A path that describes a directory.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection of streams for the directory specified by path, or <see langword="null"/> on error.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateStreams(System.String,System.String,System.IO.SearchOption,System.Boolean)">
            <summary>Returns an enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.BackupStreamInfo"/> instances, associated with the directory.</summary>
            <param name="path">A path that describes a directory.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <param name="continueOnAccessError">If set to <c>true</c> skip on access errors resulted from ACLs protected directories or non-accessible reparse points.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection of streams for the directory specified by path, or <see langword="null"/> on error.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateStreams(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Returns an enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.BackupStreamInfo"/> instances, associated with the directory.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A path that describes a directory.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection of streams for the directory specified by path, or <see langword="null"/> on error.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateStreams(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption)">
            <summary>Returns an enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.BackupStreamInfo"/> instances, associated with the directory.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A path that describes a directory.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection of streams for the directory specified by path, or <see langword="null"/> on error.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateStreams(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption,System.Boolean)">
            <summary>Returns an enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.BackupStreamInfo"/> instances, associated with the directory.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A path that describes a directory.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <param name="continueOnAccessError">If set to <c>true</c> skip on access errors resulted from ACLs protected directories or non-accessible reparse points.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection of streams for the directory specified by path, or <see langword="null"/> on error.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Encrypt(System.String)">
            <summary>Encrypts a directory so that only the account used to encrypt the directory can decrypt it.</summary>
            <param name="path">A path that describes a directory to encrypt.</param>
            <remarks>This will only encrypt the root items, non recursive.</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetAttributes(System.String)">
            <summary>Gets the <see cref="T:System.IO.FileAttributes"/> of the directory on the path.</summary>
            <param name="path">The path to the directory.</param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the directory on the path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetAttributes(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Gets the <see cref="T:System.IO.FileAttributes"/> of the directory on the path.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path to the directory.</param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the directory on the path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFileIdBothDirectoryInfo(System.String)">
            <summary>Retrieves information about files in the directory specified by <paramref name="path"/> in <see cref="F:System.IO.FileShare.ReadWrite"/> mode.</summary>
            <param name="path">A path to a directory from which to retrieve information.</param>
            <returns>An enumeration of <see cref="T:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo"/> records for each file system entry in the specified diretory.</returns>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFileIdBothDirectoryInfo(System.String,System.IO.FileShare)">
            <summary>Retrieves information about files in the directory specified by <paramref name="path"/> in specified <see cref="T:System.IO.FileShare"/> mode.</summary>
            <param name="path">A path to a directory from which to retrieve information.</param>
            <param name="shareMode">The <see cref="T:System.IO.FileShare"/> mode with which to open a handle to the directory.</param>
            <returns>An enumeration of <see cref="T:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo"/> records for each file system entry in the specified diretory.</returns>      
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFileIdBothDirectoryInfo(Microsoft.Win32.SafeHandles.SafeFileHandle)">
            <summary>Retrieves information about files in the directory handle specified.</summary>
            <param name="directoryHandle">An open handle to the directory from which to retrieve information.</param>
            <returns>An IEnumerable of <see cref="T:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo"/> records for each file system entry in the specified diretory.</returns>    
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFileIdBothDirectoryInfo(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Retrieves information about files in the directory specified by <paramref name="path"/> in <see cref="F:System.IO.FileShare.ReadWrite"/> mode.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A path to a directory from which to retrieve information.</param>
            <returns>An enumeration of <see cref="T:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo"/> records for each file system entry in the specified diretory.</returns>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFileIdBothDirectoryInfo(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.FileShare)">
            <summary>Retrieves information about files in the directory specified by <paramref name="path"/> in specified <see cref="T:System.IO.FileShare"/> mode.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A path to a directory from which to retrieve information.</param>
            <param name="shareMode">The <see cref="T:System.IO.FileShare"/> mode with which to open a handle to the directory.</param>
            <returns>An enumeration of <see cref="T:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo"/> records for each file system entry in the specified diretory.</returns>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetLogicalDrives(System.Boolean)">
            <summary>Retrieves the names of the logical drives on this computer in the form "driveLetter:\"</summary>
            <param name="fromEnvironment">Retrieve logical drives as known by the Environment.</param>
            <returns>The logical drives on this computer as <see cref="T:System.String"/>[] array.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetLogicalDrives(System.Boolean,System.Boolean)">
            <summary>Retrieves the names of the logical drives on this computer in the form "driveLetter:\"</summary>
            <param name="fromEnvironment">Retrieve logical drives as known by the Environment.</param>
            <param name="isReady">Retrieve only when accessible (IsReady) logical drives.</param>
            <returns>The logical drives on this computer as <see cref="T:System.String"/>[] array.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetLogicalDrives(System.Boolean,System.Boolean,System.Boolean)">
            <summary>Retrieves the names of the logical drives on this computer in the form "driveLetter:\"</summary>
            <param name="fromEnvironment">Retrieve logical drives as known by the Environment.</param>
            <param name="isReady">Retrieve only when accessible (IsReady) logical drives.</param>
            <param name="removeDirectorySeparator">Remove the <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> from the logical drive name.</param>
            <returns>The logical drives on this computer as <see cref="T:System.String"/>[] array.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetProperties(System.String)">
            <summary>Gets the properties of the particular folder without following any symbolic links or mount points.
            Properties include aggregated info from <see cref="T:System.IO.FileAttributes"/> of each encountered file system object.
            Plus additional ones: Total, File, Size, Error
            <para><b>Total:</b> is the total number of enumerated objects.</para>
            <para><b>File:</b> is the total number of files. File is considered when object is neither <see cref="F:System.IO.FileAttributes.Directory"/> nor <see cref="F:System.IO.FileAttributes.ReparsePoint"/>.</para>
            <para><b>Size:</b> is the total size of enumerated objects.</para>
            <para><b>Error:</b> is the total number of errors encountered during request.</para>
            </summary>
            <remarks><b>Directory:</b> is an object which has <see cref="F:System.IO.FileAttributes.Directory"/> attribute without <see cref="F:System.IO.FileAttributes.ReparsePoint"/> one.</remarks>
            <param name="path">The target directory.</param>
            <returns>A dictionary mapping the keys mentioned above to their respective aggregated values.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetProperties(System.String,System.Boolean)">
            <summary>Gets the properties of the particular folder without following any symbolic links or mount points.
            Properties include aggregated info from <see cref="T:System.IO.FileAttributes"/> of each encountered file system object.
            Plus additional ones: Total, File, Size, Error
            <para><b>Total:</b> is the total number of enumerated objects.</para>
            <para><b>File:</b> is the total number of files. File is considered when object is neither <see cref="F:System.IO.FileAttributes.Directory"/> nor <see cref="F:System.IO.FileAttributes.ReparsePoint"/>.</para>
            <para><b>Size:</b> is the total size of enumerated objects.</para>
            <para><b>Error:</b> is the total number of errors encountered during request.</para>
            </summary>
            <remarks><b>Directory:</b> is an object which has <see cref="F:System.IO.FileAttributes.Directory"/> attribute without <see cref="F:System.IO.FileAttributes.ReparsePoint"/> one.</remarks>
            <param name="path">The target directory.</param>
            <param name="continueOnAccessError">If set to <c>true</c> continue on <see cref="T:System.UnauthorizedAccessException"/> errors.</param>
            <returns>A dictionary mapping the keys mentioned above to their respective aggregated values.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetProperties(System.String,System.Boolean,System.IO.SearchOption)">
            <summary>Gets the properties of the particular folder without following any symbolic links or mount points.
            Properties include aggregated info from <see cref="T:System.IO.FileAttributes"/> of each encountered file system object.
            Plus additional ones: Total, File, Size, Error
            <para><b>Total:</b> is the total number of enumerated objects.</para>
            <para><b>File:</b> is the total number of files. File is considered when object is neither <see cref="F:System.IO.FileAttributes.Directory"/> nor <see cref="F:System.IO.FileAttributes.ReparsePoint"/>.</para>
            <para><b>Size:</b> is the total size of enumerated objects.</para>
            <para><b>Error:</b> is the total number of errors encountered during request.</para>
            </summary>
            <remarks><b>Directory:</b> is an object which has <see cref="F:System.IO.FileAttributes.Directory"/> attribute without <see cref="F:System.IO.FileAttributes.ReparsePoint"/> one.</remarks>
            <param name="path">The target directory.</param>
            <param name="continueOnAccessError">If set to <c>true</c> continue on <see cref="T:System.UnauthorizedAccessException"/> errors.</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <returns>A dictionary mapping the keys mentioned above to their respective aggregated values.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetProperties(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Gets the properties of the particular folder without following any symbolic links or mount points.
            Properties include aggregated info from <see cref="T:System.IO.FileAttributes"/> of each encountered file system object.
            Plus additional ones: Total, File, Size, Error
            <para><b>Total:</b> is the total number of enumerated objects.</para>
            <para><b>File:</b> is the total number of files. File is considered when object is neither <see cref="F:System.IO.FileAttributes.Directory"/> nor <see cref="F:System.IO.FileAttributes.ReparsePoint"/>.</para>
            <para><b>Size:</b> is the total size of enumerated objects.</para>
            <para><b>Error:</b> is the total number of errors encountered during request.</para>
            </summary>
            <remarks><b>Directory:</b> is an object which has <see cref="F:System.IO.FileAttributes.Directory"/> attribute without <see cref="F:System.IO.FileAttributes.ReparsePoint"/> one.</remarks>
            <param name="transaction">The transaction.</param>
            <param name="path">The target directory.</param>
            <returns>A dictionary mapping the keys mentioned above to their respective aggregated values.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetProperties(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Boolean)">
            <summary>Gets the properties of the particular folder without following any symbolic links or mount points.
            Properties include aggregated info from <see cref="T:System.IO.FileAttributes"/> of each encountered file system object.
            Plus additional ones: Total, File, Size, Error
            <para><b>Total:</b> is the total number of enumerated objects.</para>
            <para><b>File:</b> is the total number of files. File is considered when object is neither <see cref="F:System.IO.FileAttributes.Directory"/> nor <see cref="F:System.IO.FileAttributes.ReparsePoint"/>.</para>
            <para><b>Size:</b> is the total size of enumerated objects.</para>
            <para><b>Error:</b> is the total number of errors encountered during request.</para>
            </summary>
            <remarks><b>Directory:</b> is an object which has <see cref="F:System.IO.FileAttributes.Directory"/> attribute without <see cref="F:System.IO.FileAttributes.ReparsePoint"/> one.</remarks>
            <param name="transaction">The transaction.</param>
            <param name="path">The target directory.</param>
            <param name="continueOnAccessError">If set to <c>true</c> continue on <see cref="T:System.UnauthorizedAccessException"/> errors.</param>
            <returns>A dictionary mapping the keys mentioned above to their respective aggregated values.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetProperties(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Boolean,System.IO.SearchOption)">
            <summary>Gets the properties of the particular folder without following any symbolic links or mount points.
            Properties include aggregated info from <see cref="T:System.IO.FileAttributes"/> of each encountered file system object.
            Plus additional ones: Total, File, Size, Error
            <para><b>Total:</b> is the total number of enumerated objects.</para>
            <para><b>File:</b> is the total number of files. File is considered when object is neither <see cref="F:System.IO.FileAttributes.Directory"/> nor <see cref="F:System.IO.FileAttributes.ReparsePoint"/>.</para>
            <para><b>Size:</b> is the total size of enumerated objects.</para>
            <para><b>Error:</b> is the total number of errors encountered during request.</para>
            </summary>
            <remarks><b>Directory:</b> is an object which has <see cref="F:System.IO.FileAttributes.Directory"/> attribute without <see cref="F:System.IO.FileAttributes.ReparsePoint"/> one.</remarks>
            <param name="transaction">The transaction.</param>
            <param name="path">The target directory.</param>
            <param name="continueOnAccessError">If set to <c>true</c> continue on <see cref="T:System.UnauthorizedAccessException"/> errors.</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <returns>A dictionary mapping the keys mentioned above to their respective aggregated values.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.HasInheritedPermissions(System.String)">
            <summary>Check if the directory has permission inheritance enabled.</summary>
            <param name="directoryPath">The full path to the directory to check.</param>
            <returns><c>true</c> if permission inheritance is enabled, <c>false</c> if permission inheritance is disabled.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.HasInheritedPermissions(Alphaleonis.Win32.Filesystem.DirectoryInfo)">
            <summary>Check if the directory has permission inheritance enabled.</summary>
            <param name="directoryInfo">A <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> instance check.</param>
            <returns><c>true</c> if permission inheritance is enabled, <c>false</c> if permission inheritance is disabled.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>Sets the attributes for a directory.</summary>
            <param name="path">The name of the directory whose attributes are to be set.</param>
            <param name="fileAttributes">The file attributes to set for the directory. Note that all other values override <see cref="F:System.IO.FileAttributes.Normal"/>.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetAttributes(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.FileAttributes)">
            <summary>Sets the attributes for a directory.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The name of the directory whose attributes are to be set.</param>
            <param name="fileAttributes">The file attributes to set for the directory. Note that all other values override <see cref="F:System.IO.FileAttributes.Normal"/>.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetTimestamps(System.String,System.DateTime,System.DateTime,System.DateTime)">
            <summary>Sets all the date and time stamps for the specified directory, at once.</summary>
            <param name="path">The directory for which to set the dates and times information.</param>
            <param name="creationTime">A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value is expressed in local time.</param>
            <param name="lastAccessTime">A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This value is expressed in local time.</param>
            <param name="lastWriteTime">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value is expressed in local time.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetTimestamps(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime,System.DateTime,System.DateTime)">
            <summary>Sets all the date and time stamps for the specified directory, at once.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory for which to set the dates and times information.</param>
            <param name="creationTime">A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value is expressed in local time.</param>
            <param name="lastAccessTime">A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This value is expressed in local time.</param>
            <param name="lastWriteTime">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value is expressed in local time.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetTimestampsUtc(System.String,System.DateTime,System.DateTime,System.DateTime)">
            <summary>Sets all the date and time stamps, in coordinated universal time (UTC), for the specified directory, at once.</summary>
            <param name="path">The directory for which to set the dates and times information.</param>
            <param name="creationTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
            <param name="lastAccessTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
            <param name="lastWriteTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetTimestampsUtc(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime,System.DateTime,System.DateTime)">
            <summary>Sets all the date and time stamps, in coordinated universal time (UTC), for the specified directory, at once.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory for which to set the dates and times information.</param>
            <param name="creationTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
            <param name="lastAccessTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
            <param name="lastWriteTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.TransferTimestamps(System.String,System.String)">
            <summary>Transfers the date and time stamps for the specified directories.</summary>
            <param name="source">The source directory to get the date and time stamps from.</param>
            <param name="destination">The destination directory to set the date and time stamps.</param>
            <remarks>This method uses BackupSemantics flag to get Timestamp changed for directories.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.TransferTimestamps(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>Transfers the date and time stamps for the specified directories.</summary>
            <param name="transaction">The transaction.</param>
            <param name="source">The source directory to get the date and time stamps from.</param>
            <param name="destination">The destination directory to set the date and time stamps.</param>
            <remarks>This method uses BackupSemantics flag to get Timestamp changed for directories.</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CompressDecompressInternal(System.Boolean,Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption,System.Boolean)">
            <summary>Unified method CompressDecompressInternal() to compress/decompress Non-/Transacted directories/files.</summary>
            <param name="compress">When <c>true</c> compress, when <c>false</c> decompress.</param>
            <param name="transaction">The transaction.</param>
            <param name="path">A path that describes a directory to compress.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <param name="continueOnAccessError">If set to <c>true</c> skip on access errors resulted from ACLs protected directories or non-accessible reparse points.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CopyMoveInternal(System.Boolean,Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.Boolean,System.Nullable{Alphaleonis.Win32.Filesystem.CopyOptions},System.Nullable{Alphaleonis.Win32.Filesystem.MoveOptions},Alphaleonis.Win32.Filesystem.CopyProgressRoutine,System.Object)">
            <summary>Unified method CopyMoveInternal() to copy/move a Non-/Transacted file or directory including its children.
            You can provide a callback function that receives progress notifications.</summary>
            <param name="isFolder"><c>true</c> indicates a directory object, <c>false</c> indicates a file object.</param>
            <param name="transaction">The transaction.</param>
            <param name="sourcePath">The source directory path.</param>
            <param name="destinationPath">The destination directory path.</param>
            <param name="preserveSecurity"><c>true</c> Preserves directory ACLs information.</param>
            <param name="copyOptions"><see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> that specify how the directory is to be copied. This parameter can be <see langword="null"/>.</param>
            <param name="moveOptions"><see cref="T:Alphaleonis.Win32.Filesystem.MoveOptions"/> that specify how the directory is to be moved. This parameter can be <see langword="null"/>.</param>
            <param name="copyProgress">A callback function that is called each time another portion of the file has been copied. This parameter can be <see langword="null"/>.</param>
            <param name="userProgressData">The argument to be passed to the callback function. This parameter can be <see langword="null"/>.</param>
            <remarks>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior</remarks>
            <remarks>This Move method works across disk volumes, and it does not throw an exception if the source and destination are
            the same. Note that if you attempt to replace a file by moving a file of the same name into that directory, you
            get an IOException. You cannot use the Move method to overwrite an existing file.</remarks>
            <returns><c>true</c> when successfully copied or moved, <c>false</c> on failure or the operation was aborted.</returns>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CreateDirectoryInternal(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.Security.AccessControl.ObjectSecurity,Alphaleonis.Win32.Security.NativeMethods.SecurityAttributes)">
            <summary>Unified method CreateDirectoryInternal() to create a new directory with the attributes of a specified template directory (if one is specified). 
            If the underlying file system supports security on files and directories, the function 
            applies the specified security descriptor to the new directory. The new directory retains 
            the other attributes of the specified template directory.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="templatePath">The path of the directory to use as a template when creating the new directory. May be <see langword="null"/> to indicate that no template should be used.</param>
            <param name="path">The directory path to create.</param>
            <param name="directorySecurity">The <see cref="T:System.Security.AccessControl.DirectorySecurity"/> access control to apply to the directory, may be <see langword="null"/>.</param>
            <param name="securityAttributes">The security descriptor to apply to the newly created directory. May be <see langword="null"/> in which case a default security descriptor will be applied.</param>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> object that represents the directory for the specified path.</returns>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetDirectoryRootInternal(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Unified method  to return the volume information, root information, or both for the specified path.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path of a file or directory.</param>
            <returns>A string that contains the volume information, root information, or both for the specified path, or <see langref="null"/> if <paramref name="path"/> path does not contain root directory information.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFileIdBothDirectoryInfoInternal(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileShare,System.Boolean)">
            <summary>Unified method GetFileIdBothDirectoryInfoInternal() to retrieves information about files in the directory handle specified.</summary>
            <param name="transaction"></param>
            <param name="directoryPath">A path to the directory.</param>
            <param name="directoryHandle">An open handle to the directory from which to retrieve information.</param>
            <param name="shareMode">The <see cref="T:System.IO.FileShare"/> mode with which to open a handle to the directory.</param>
            <param name="raiseException">If <c>true</c> raises Exceptions, when <c>false</c> no Exceptions are raised and the method returns <see langref="null"/>.</param>
            <returns>An IEnumerable of <see cref="T:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo"/> records for each file system entry in the specified diretory.</returns>    
            <remarks>Either use <paramref name="directoryPath"/> or <paramref name="directoryHandle"/>, not both.</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetLogicalDrivesInternal(System.Boolean,System.Boolean,System.Boolean)">
            <summary>Retrieves the names of the logical drives on this computer in the form "driveLetter:\"</summary>
            <param name="fromEnvironment">Retrieve logical drives as known by the Environment.</param>
            <param name="isReady">Retrieve only when accessible (IsReady) logical drives.</param>
            <param name="removeDirectorySeparator">Remove the <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> from the logical drive name.</param>
            <returns>The logical drives on this computer as <see cref="T:System.String"/>[] array.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetParentInternal(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Unified method GetParent() to retrieve the parent directory of the specified path, including both absolute and relative paths.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path for which to retrieve the parent directory.</param>
            <returns>The parent directory, or <see langref="null"/> if <paramref name="path"/> is the root directory, including the root of a UNC server or share name.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.DeleteDirectoryInternal(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Boolean,System.Boolean,System.String,System.Boolean)">
            <summary>Unified method DeleteDirectoryInternal() to delete a Non-/Transacted directory.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The name of the directory to remove.</param>
            <param name="recursive"><c>true</c> to remove all files and subdirectories recursively; otherwise, <c>false</c> only the top level empty directory.</param>
            <param name="ignoreReadOnly">If set to <c>true</c> overrides read only attribute of files and directories.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <param name="requireEmpty">If set to <c>true</c> requires the the directory must be empty.</param>
            One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include
            only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            <returns>Returns <c>true</c> on success, <c>false</c> on failure.</returns>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.DeleteEmptyDirectoryInternal(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>Unified method DeleteEmptyDirectoryInternal() to delete empty subdirectores from the specified directory.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The name of the directory to remove empty subdirectories from.</param>
            <param name="recursive"><c>true</c> to remove empty subdirectories in path; otherwise, <c>false</c>.</param>
            <param name="ignoreReadOnly">If set to <c>true</c> overrides read only <see cref="T:System.IO.FileAttributes"/> of empty subdirectories.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <returns>Returns <c>true</c> on success, <c>false</c> on failure.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnableDisableEncryptionInternal(System.String,System.Boolean)">
            <summary>Enables encryption of the specified directory and the files in it. It does not affect encryption of subdirectories below the indicated directory.</summary>
            <param name="path">The name of the directory for which to enable encryption.</param>
            <param name="enable">When <c>true</c> enabled encryption, <c>false</c> disables encryption.</param>
            <remarks>This method will create/change the file "Desktop.ini" and wil set Encryption value: "Disable=0 | 1"</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateStreamsInternal(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption,System.Boolean)">
            <summary>Unified method EnumerateStreamsInternal() to return an enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.BackupStreamInfo"/> instances, associated with the directory.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A path that describes a directory.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <param name="continueOnAccessError">If set to <c>true</c> skip on access errors resulted from ACLs protected directories or non-accessible reparse points.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection of streams for the directory specified by path, or <see langword="null"/> on error.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetPropertiesInternal(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.SearchOption,System.Boolean)">
            <summary>Unified method GetPropertiesInternal() to gets the properties of the particular folder without following any symbolic links or mount points.
            Properties include aggregated info from <see cref="T:System.IO.FileAttributes"/> of each encountered file system object.
            Plus additional ones: "Total", "File", "Size" and "SizeCompressed".
            <para><b>Total:</b> is the total number of enumerated objects.</para>
            <para><b>File:</b> is the total number of files. File is considered when object is neither <see cref="F:System.IO.FileAttributes.Directory"/> nor <see cref="F:System.IO.FileAttributes.ReparsePoint"/>.</para>
            <para><b>Size:</b> is the total size of enumerated objects.</para>
            <para><b>Size:</b> is the total compressed size of enumerated objects.</para>
            <para><b>Error:</b> is the total number of errors encountered during request.</para>
            </summary>
            <remarks><b>Directory:</b> is an object which has <see cref="F:System.IO.FileAttributes.Directory"/> attribute without <see cref="F:System.IO.FileAttributes.ReparsePoint"/> one.</remarks>
            <param name="transaction">The transaction.</param>
            <param name="path">The target directory.</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <param name="continueOnAccessError">If set to <c>true</c> continue on <see cref="T:System.UnauthorizedAccessException"/> errors.</param>
            <returns>A dictionary mapping the keys mentioned above to their respective aggregated values.</returns>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.DirectoryInfo">
            <summary>Exposes instance methods for creating, moving, and enumerating through directories and subdirectories. This class cannot be inherited.</summary>
            <remarks>Unlike .NET, no Exceptions are thrown if properties are inaccessible. Use Refresh() and Exist() properties to retrieve current file information.</remarks>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.FileSystemInfo">
            <summary>Provides the base class for both FileInfo and DirectoryInfo objects.</summary>
            <remarks>Unlike .NET, no Exceptions are thrown if properties are inaccessible. Use Refresh() and Exist() properties to retrieve current file information.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemInfo.Equals(System.Object)">
            <summary>Determines whether the specified Object is equal to the current Object.</summary>
            <param name="obj">Another object to compare to.</param>
            <returns>true if the specified Object is equal to the current Object; otherwise, false.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemInfo.GetHashCode">
            <summary>Serves as a hash function for a particular type.</summary>
            <returns>A hash code for the current Object.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemInfo.op_Equality(Alphaleonis.Win32.Filesystem.FileSystemInfo,Alphaleonis.Win32.Filesystem.FileSystemInfo)">
            <summary>Implements the operator ==</summary>
            <param name="left">A.</param>
            <param name="right">B.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemInfo.op_Inequality(Alphaleonis.Win32.Filesystem.FileSystemInfo,Alphaleonis.Win32.Filesystem.FileSystemInfo)">
            <summary>Implements the operator !=</summary>
            <param name="left">A.</param>
            <param name="right">B.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileSystemInfo.FullPath">
            <summary>Represents the fully qualified path of the directory or file.</summary>
            <remarks>Classes derived from <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> can use the FullPath field to determine the full path of the object being manipulated.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileSystemInfo.OriginalPath">
            <summary>The path originally specified by the user, whether relative or absolute.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileSystemInfo.InitIsDirectory">
            <summary>The initial "IsDirectory" indicator that was passed to the constructor.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemInfo.Delete">
            <summary>Deletes a file or directory.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemInfo.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <remarks>
            DirectoryInfo.ToString(): Returns the original path that was passed by the user.
            FileInfo.ToString(): The string returned by the ToString method represents path that was passed to the constructor.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemInfo.Refresh">
            <summary>Refreshes the state of the object.</summary>
            <remarks>
            FileSystemInfo.Refresh() takes a snapshot of the file from the current file system.
            Refresh cannot correct the underlying file system even if the file system returns incorrect or outdated information.
            This can happen on platforms such as Windows 98.
            Calls must be made to Refresh() before attempting to get the attribute information, or the information will be outdated.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemInfo.VerifyObjectExists">
            <summary>Performs a <see cref="M:Alphaleonis.Win32.Filesystem.FileSystemInfo.Refresh"/> and checks that the directory or file exists. If the filesystem object is not found, a <see cref="T:System.IO.DirectoryNotFoundException"/> or <see cref="T:System.IO.FileNotFoundException"/> is thrown.</summary>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemInfo.Reset">
            <summary>Resets the state of the filesystem object to uninitialized.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemInfo.CreateFileInternal(System.Nullable{System.Boolean},Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.EFileAttributes,System.Security.AccessControl.FileSecurity,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare)">
            <summary>Unified method CreateFileInternal() to create or open a file or I/O device. 
            The most commonly used I/O devices are as follows: file, file stream, directory, physical disk,
            volume, console buffer, tape drive, communications resource, mailslot, and pipe.
            </summary>
            <param name="isFile"><c>true</c> indicates a file object, <c>false</c> indicates a folder object.</param>
            <param name="transaction">The transaction.</param>
            <param name="path">The path and name of the file to create.</param>
            <param name="share"></param>
            <param name="attributes">One of the <see cref="T:Alphaleonis.Win32.Filesystem.EFileAttributes"/> values that describes how to create or overwrite the file.</param>
            <param name="fileSecurity">A <see cref="T:System.Security.AccessControl.FileSecurity"/> instance that determines the access control and audit security for the file.</param>
            <param name="mode"></param>
            <param name="rights"></param>
            <returns>A <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle"/> that provides read/write access to the file specified in path or null on failure.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemInfo.EncryptDecryptDirectoryInternal(System.String,System.Boolean)">
            <summary>Unified method EncryptDecryptFileInternal() to decrypt/encrypt a file or directory so that only the account used to encrypt the file can decrypt it.</summary>
            <param name="path">A path that describes a directory to encrypt.</param>
            <param name="encrypt">When <c>true</c> encrypts when <c>false</c> decrypt.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemInfo.EncryptDecryptFileInternal(System.String,System.Boolean)">
            <summary>Unified method EncryptDecryptFileInternal() to decrypt/encrypt a file or directory so that only the account used to encrypt the file can decrypt it.</summary>
            <param name="encrypt"></param>
            <param name="path">A path that describes a file to encrypt.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemInfo.EnumerateFileSystemObjectsInternal(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption,System.Boolean,System.Nullable{System.Boolean},System.Boolean,System.Boolean)">
            <summary>Unified method EnumerateFileSystemObjectsInternal() to enumerate Non-/Transacted directories/files.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <param name="basicSearch">When <c>true</c>, does not query the short file name, improving overall enumeration speed.</param>
            <param name="getFolders">When <c>true</c>, folders will be returned, when <c>false</c>, files will be returned. When <see langword="null"/> both folders and files will be returned.</param>
            <param name="getPath">When <c>true</c>, returns the results as an enumerable <see langref="string"/> object, when <c>false</c> the returned enumerable is of a <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> object.</param>
            <param name="continueOnAccessError">If set to <c>true</c> skip on access errors resulted from ACLs protected directories or non-accessible reparse points.</param>
            <returns>
            If <paramref name="getPath"/> is <c>true</c>, an enumerable <see langref="string"/> collection of the full pathnames that match searchPattern and searchOption.
            If <paramref name="getPath"/> is <c>false</c>, an enumerable <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> (<see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> / <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/>) collection that match searchPattern and searchOption.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemInfo.ExistsInternal(System.Boolean,Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Unified method ExistsInternal() to determine whether the given path refers to an existing directory or file on disk.</summary>
            <param name="isFolder"><c>true</c> indicates a folder object, <c>false</c> indicates a file object.</param>
            <param name="transaction">The transaction.</param>
            <param name="path">The path to test.</param>
            <returns><c>true</c> on success, <c>false</c> otherwise.</returns>
            <remarks>Note that this files may contain wildcards, such as '*'</remarks>
            <remarks>Return value is <c>true</c> if the caller has the required permissions and path contains the name of an existing file; otherwise, <c>false</c>.</remarks>
            <remarks>This method also returns <c>false</c> if path is NULL reference (Nothing in Visual Basic), an invalid path, or a zero-length string.</remarks>
            <remarks>If the caller does not have sufficient permissions to read the specified file, no exception is thrown and the method returns <c>false</c> regardless of the existence of path.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemInfo.GetAccessControlInternal(System.Boolean,System.String,System.Security.AccessControl.AccessControlSections)">
            <summary>Unified method GetAccessControlInternal() to get/set an <see cref="T:System.Security.AccessControl.ObjectSecurity"/> for a particular directory or file.</summary>
            <param name="isFolder"><c>true</c> indicates a folder object, <c>false</c> indicates a file object.</param>
            <param name="path">The path to a directory containing a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that describes the directory's or file's access control list (ACL) information.</param>
            <param name="includeSections">One (or more) of the <see cref="T:System.Security.AccessControl.AccessControlSections"/> values that specifies the type of access control list (ACL) information to receive.</param>
            <returns>An <see cref="T:System.Security.AccessControl.ObjectSecurity"/> object that encapsulates the access control rules for the directory or file described by the <paramref name="path"/> parameter. </returns>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemInfo.GetCreationTimeInternal(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Boolean)">
            <summary>Gets the creation date and time, in Coordinated Universal Time (UTC) or local time, of the specified file or directory.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file or directory for which to obtain creation date and time information.</param>
            <param name="getUtc"><c>true</c> gets the Coordinated Universal Time (UTC), <c>false</c> gets the local time.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified file or directory. Depending on <paramref name="getUtc"/> this value is expressed in UTC- or local time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemInfo.GetFileSystemEntryInfoInternal(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Boolean,System.Boolean)">
            <summary>Unified method GetFileSystemEntryInfoInternal() to get a FileSystemEntryInfo from a Non-/Transacted folder/file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path to the file.</param>
            <param name="basicSearch">When <c>true</c>, does not query the short file name, improving overall enumeration speed.</param>
            <param name="raiseException">On failure <c>true</c> will throw an <see cref="M:Alphaleonis.Win32.NativeError.ThrowException"/> while <c>false</c> will return null without throwing any exceptions.</param>
            <returns>The <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> instance of the folder or file on the path, or <see langref="null"/> on Exception.</returns>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"></exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemInfo.GetLastAccessTimeInternal(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Boolean)">
            <summary>Gets the date and time, in coordinated universal time (UTC) or local time, that the specified file or directory was last accessed.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file or directory for which to obtain access date and time information.</param>
            <param name="getUtc"><c>true</c> gets the Coordinated Universal Time (UTC), <c>false</c> gets the local time.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last accessed. Depending on <paramref name="getUtc"/> this value is expressed in UTC- or local time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemInfo.GetLastWriteTimeInternal(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Boolean)">
            <summary>Gets the date and time, in coordinated universal time (UTC) or local time, that the specified file or directory was last written to.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file or directory for which to obtain write date and time information.</param>
            <param name="getUtc"><c>true</c> gets the Coordinated Universal Time (UTC), <c>false</c> gets the local time.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last written to. Depending on <paramref name="getUtc"/> this value is expressed in UTC- or local time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemInfo.InitializeInternal(Alphaleonis.Win32.Filesystem.KernelTransaction,System.Boolean,System.String)">
            <summary>Initializes the specified file name.</summary>
            <param name="transaction">The transaction.</param>
            <param name="isFolder"><c>true</c> indicates a directory object, <c>false</c> indicates a file object.</param>
            <param name="path">The full path and name of the file.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemInfo.SetAccessControlInternal(System.String,System.Runtime.InteropServices.SafeHandle,System.Security.AccessControl.ObjectSecurity,System.Security.AccessControl.AccessControlSections)">
            <summary>Unified method SetAccessControlInternal() applies access control list (ACL) entries described by a <see cref="T:System.Security.AccessControl.FileSecurity"/> FileSecurity object to the specified file.</summary>
            <param name="path">A file to add or remove access control list (ACL) entries from. This parameter may be <see langword="null"/>.</param>
            <param name="handle">A handle to add or remove access control list (ACL) entries from. This parameter may be <see langword="null"/>.</param>
            <param name="objectSecurity">A <see cref="T:System.Security.AccessControl.DirectorySecurity"/> or <see cref="T:System.Security.AccessControl.FileSecurity"/> object that describes an ACL entry to apply to the file described by the <paramref name="path"/> parameter.</param>
            <param name="includeSections">One or more of the <see cref="T:System.Security.AccessControl.AccessControlSections"/> values that specifies the type of access control list (ACL) information to set.</param>
            <remarks>Supply either a path or handle, not both.</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemInfo.SetAttributesInternal(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.FileAttributes)">
            <summary>Unified method SetAttributesInternal() to set the attributes for a Non-/Transacted file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The name of the file whose attributes are to be set.</param>
            <param name="fileAttributes">The file attributes to set for the file. Note that all other values override <see cref="F:System.IO.FileAttributes.Normal"/>.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemInfo.SetFsoDateTimeInternal(System.Boolean,Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>Unified method SetFsoDateTimeInternal() to set the date and time, in coordinated universal time (UTC), that the file or directory was created and/or last accessed and/or written to.</summary>
            <param name="isFolder"><c>true</c> indicates a folder object, <c>false</c> indicates a file object.</param>
            <param name="transaction">The transaction.</param>
            <param name="path">The file or directory for which to set the date and time information.</param>
            <param name="creationTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
            <param name="lastAccessTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
            <param name="lastWriteTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemInfo.TransferTimestampsInternal(System.Boolean,Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>Unified method TransferTimestampsInternal() to transfer the date and time stamps for the specified files and directories.</summary>
            <param name="isFolder"><c>true</c> indicates a directory object, <c>false</c> indicates a file object.</param>
            <param name="transaction">The transaction.</param>
            <param name="source">The source path.</param>
            <param name="destination">The destination path.</param>
            <remarks>This method does not change last access time for the source file.</remarks>
            <remarks>This method uses BackupSemantics flag to get Timestamp changed for directories.</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemInfo.Attributes">
            <summary>Gets or sets the attributes for the current file or directory.</summary>
            <returns><see cref="T:System.IO.FileAttributes"/> of the current <see cref="T:FileSystemInfo"/>.</returns>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemInfo.CreationTime">
            <summary>Gets or sets the creation time of the current file or directory.</summary>
            <returns>The creation date and time of the current <see cref="T:FileSystemInfo"/> object.</returns>
            <remarks>This value is expressed in local time.</remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemInfo.CreationTimeUtc">
            <summary>Gets or sets the creation time, in coordinated universal time (UTC), of the current file or directory.</summary>
            <returns>The creation date and time in UTC format of the current <see cref="T:FileSystemInfo"/> object.</returns>
            <remarks>This value is expressed in UTC time.</remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemInfo.Exists">
            <summary>Gets a value indicating whether the file or directory exists.</summary>
            <returns>true if the file or directory exists; otherwise, false.</returns>
            <remarks>The <see cref="P:Alphaleonis.Win32.Filesystem.FileSystemInfo.Exists"/> property returns false if any error occurs while trying to determine if the specified directory or file exists. This can occur in situations that raise exceptions such as passing a directory- or file name with invalid characters or too many characters, a failing or missing disk, or if the caller does not have permission to read the directory or file.</remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemInfo.Extension">
            <summary>Gets the string representing the extension part of the file.</summary>
            <returns>A string containing the <see cref="T:System.IO.FileSystemInfo"/> extension.</returns>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemInfo.FullName">
            <summary>Gets the full path of the directory or file.</summary>
            <returns>A string containing the full path.</returns>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemInfo.LastAccessTime">
            <summary>Gets or sets the time the current file or directory was last accessed.</summary>
            <returns>The time that the current file or directory was last accessed.</returns>
            <remarks>This value is expressed in local time.</remarks>
            <remarks>When first called, <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> calls Refresh and returns the cached information on APIs to get attributes and so on. On subsequent calls, you must call Refresh to get the latest copy of the information. 
            If the file described in the <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> object does not exist, this property will return 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC), adjusted to local time. 
            </remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemInfo.LastAccessTimeUtc">
            <summary>Gets or sets the time, in coordinated universal time (UTC), that the current file or directory was last accessed.</summary>
            <returns>The UTC time that the current file or directory was last accessed.</returns>
            <remarks>This value is expressed in UTC time.</remarks>
            <remarks>When first called, <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> calls Refresh and returns the cached information on APIs to get attributes and so on. On subsequent calls, you must call Refresh to get the latest copy of the information. 
            If the file described in the <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> object does not exist, this property will return 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC), adjusted to local time. 
            </remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemInfo.LastWriteTime">
            <summary>Gets or sets the time when the current file or directory was last written to.</summary>
            <returns>The time the current file was last written.</returns>
            <remarks>This value is expressed in local time.</remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemInfo.LastWriteTimeUtc">
            <summary>Gets or sets the time, in coordinated universal time (UTC), when the current file or directory was last written to.</summary>
            <returns>The UTC time when the current file was last written to.</returns>
            <remarks>This value is expressed in UTC time.</remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemInfo.Name">
            <summary>For files, gets the name of the file. For directories, gets the name of the last directory in the hierarchy if a hierarchy exists. Otherwise, the Name property gets the name of the directory.</summary>
            <returns>A string that is the name of the parent directory, the name of the last directory in the hierarchy, or the name of a file, including the file name extension.</returns>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemInfo.SystemInfo">
            <summary>Gets the instance of the <see cref="T:FileSystemEntryInfo"/> class.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemInfo.Transaction">
            <summary>Represents the KernelTransaction that was passed to the constructor.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> class on the specified path.</summary>
            <param name="path">A string specifying the path on which to create the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/>.</param>
            <remarks>
            This constructor does not check if a directory exists. This constructor is a placeholder for a string that is used to access the disk in subsequent operations.
            The path parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.#ctor(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> class on the specified path.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A string specifying the path on which to create the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/>.</param>
            <remarks>
            This constructor does not check if a directory exists. This constructor is a placeholder for a string that is used to access the disk in subsequent operations.
            The path parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.Create">
            <summary>Creates a directory.</summary>
            <remarks>If the directory already exists, this method does nothing.</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.Create(System.Security.AccessControl.DirectorySecurity)">
            <summary>Creates a directory using a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object.</summary>
            <param name="directorySecurity">The access control to apply to the directory.</param>
            <remarks>If the directory already exists, this method does nothing.</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.CreateSubdirectory(System.String)">
            <summary>Creates a subdirectory or subdirectories on the specified path. The specified path can be relative to this instance of the <see cref="T:DirectoryInfo"/> class.</summary>
            <param name="path">The specified path. This cannot be a different disk volume.</param>
            <returns>The last directory specified in <paramref name="path"/>.</returns>
            <remarks>
            Any and all directories specified in path are created, unless some part of path is invalid.
            The path parameter specifies a directory path, not a file path.
            If the subdirectory already exists, this method does nothing.
            </remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.CreateSubdirectory(System.String,System.Security.AccessControl.DirectorySecurity)">
            <summary>Creates a subdirectory or subdirectories on the specified path. The specified path can be relative to this instance of the <see cref="T:DirectoryInfo"/> class.</summary>
            <param name="path">The specified path. This cannot be a different disk volume.</param>
            <param name="directorySecurity">The <see cref="T:System.Security.AccessControl.DirectorySecurity"/> security to apply.</param>
            <returns>The last directory specified in <paramref name="path"/>.</returns>
            <remarks>
            Any and all directories specified in path are created, unless some part of path is invalid.
            The path parameter specifies a directory path, not a file path.
            If the subdirectory already exists, this method does nothing.
            </remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.Delete">
            <summary>Deletes this <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> if it is empty.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.Delete(System.Boolean)">
            <summary>Deletes this instance of a <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/>, specifying whether to delete subdirectories and files.</summary>
            <param name="recursive">true to delete this directory, its subdirectories, and all files; otherwise, false. </param>
            <remarks>
            If the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> has no files or subdirectories, this method deletes the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> even if recursive is false.
            Attempting to delete a <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> that is not empty when recursive is false throws an <see cref="T:System.IO.IOException"/>.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.Delete(System.Boolean,System.Boolean)">
            <summary>Deletes this instance of a <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/>, specifying whether to delete files and subdirectories.</summary>
            <param name="recursive"><c>true</c> to delete this directory, its subdirectories, and all files; otherwise, <c>false</c>.</param>
            <param name="ignoreReadOnly">If set to <c>true</c> ignores read only attribute of files and directories.</param>
            <remarks>
            If the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> has no files or subdirectories, this method deletes the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> even if recursive is false.
            Attempting to delete a <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> that is not empty when recursive is false throws an <see cref="T:System.IO.IOException"/>.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.Delete(System.Boolean,System.Boolean,System.String)">
            <summary>Deletes this instance of a <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/>, specifying whether to delete files and subdirectories.</summary>
            <param name="recursive"><c>true</c> to delete this directory, its subdirectories, and all files; otherwise, <c>false</c>.</param>
            <param name="ignoreReadOnly">If set to <c>true</c> ignores read only attribute of files and directories.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <remarks>
            If the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> has no files or subdirectories, this method deletes the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> even if recursive is false.
            Attempting to delete a <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> that is not empty when recursive is false throws an <see cref="T:System.IO.IOException"/>.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.EnumerateDirectories">
            <summary>Returns an enumerable collection of directory information in the current directory.</summary>
            <returns>An enumerable collection of type <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> directories in the current directory.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.EnumerateDirectories(System.String)">
            <summary>Returns an enumerable collection of directory information that matches a specified search pattern.</summary>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <returns>An enumerable collection of type <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> directories that matches searchPattern.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.EnumerateDirectories(System.String,System.IO.SearchOption)">
            <summary>Returns an enumerable collection of directory information that matches a specified search pattern and search subdirectory option.</summary>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <returns>An enumerable collection of type <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> directories that matches searchPattern and searchOption.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.EnumerateDirectories(System.Boolean)">
            <summary>Returns an enumerable collection of directory information that matches a specified search pattern and search subdirectory option.</summary>
            <param name="continueOnAccessError">If set to <c>true</c> skip on access errors resulted from ACLs protected directories or not accessible reparse points.</param>
            <returns>An enumerable collection of type <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> directories that matches searchPattern and searchOption.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.EnumerateDirectories(System.String,System.IO.SearchOption,System.Boolean)">
            <summary>Returns an enumerable collection of directory information that matches a specified search pattern and search subdirectory option.</summary>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <param name="continueOnAccessError">If set to <c>true</c> skip on access errors resulted from ACLs protected directories or not accessible reparse points.</param>
            <returns>An enumerable collection of type <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> directories that matches searchPattern and searchOption.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.EnumerateFiles">
            <summary>Returns an enumerable collection of file information in the current directory.</summary>
            <returns>An enumerable collection of type <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> files in the current directory.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.EnumerateFiles(System.String)">
            <summary>Returns an enumerable collection of file information that matches a search pattern.</summary>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <returns>An enumerable collection of type <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> files that matches searchPattern.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.EnumerateFiles(System.String,System.IO.SearchOption)">
            <summary>Returns an enumerable collection of file information that matches a specified search pattern and search subdirectory option.</summary>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <returns>An enumerable collection of type <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> files that matches searchPattern and searchOption.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.EnumerateFiles(System.Boolean)">
            <summary>Returns an enumerable collection of file information in the current directory.</summary>
            <param name="continueOnAccessError">If set to <c>true</c> skip on access errors resulted from ACLs protected directories or non-accessible reparse points.</param>
            <returns>An enumerable collection of type <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> files in the current directory.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.EnumerateFiles(System.String,System.IO.SearchOption,System.Boolean)">
            <summary>Returns an enumerable collection of directory information that matches a specified search pattern and search subdirectory option.</summary>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <param name="continueOnAccessError">If set to <c>true</c> skip on access errors resulted from ACLs protected directories or not accessible reparse points.</param>
            <returns>An enumerable collection of type <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> files that matches searchPattern and searchOption.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.EnumerateFileSystemInfos">
            <summary>Returns an enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> information in the current directory.</summary>
            <returns>An enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> information in the current directory.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.EnumerateFileSystemInfos(System.String)">
            <summary>Returns an enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> information that matches a specified search pattern and search subdirectory option.</summary>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <returns>An enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> information objects that matches searchPattern.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.EnumerateFileSystemInfos(System.String,System.IO.SearchOption)">
            <summary>Returns an enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> information that matches a specified search pattern and search subdirectory option.</summary>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <returns>An enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> information objects that matches searchPattern and searchOption.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.EnumerateFileSystemInfos(System.Boolean)">
            <summary>Returns an enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> information that matches a specified search pattern and search subdirectory option.</summary>
            <param name="continueOnAccessError">If set to <c>true</c> skip on access errors resulted from ACLs protected directories or not accessible reparse points.</param>
            <returns>An enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> information objects that matches searchPattern and searchOption.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.EnumerateFileSystemInfos(System.String,System.IO.SearchOption,System.Boolean)">
            <summary>Returns an enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> information that matches a specified search pattern and search subdirectory option.</summary>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <param name="continueOnAccessError">If set to <c>true</c> skip on access errors resulted from ACLs protected directories or not accessible reparse points.</param>
            <returns>An enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> information objects that matches searchPattern and searchOption.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.GetAccessControl">
            <summary>Gets a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that encapsulates the access control list (ACL) entries for the directory described by the current DirectoryInfo object.</summary>
            <returns>A <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that encapsulates the access control rules for the directory.</returns>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.GetAccessControl(System.Security.AccessControl.AccessControlSections)">
            <summary>Gets a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that encapsulates the specified type of access control list (ACL) entries for the directory described by the current <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> object.</summary>
            <param name="includeSections">One of the <see cref="T:System.Security.AccessControl.AccessControlSections"/> values that specifies the type of access control list (ACL) information to receive.</param>
            <returns>A <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that encapsulates the access control rules for the file described by the path parameter.</returns>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.GetDirectories">
            <summary>Returns the subdirectories of the current directory.</summary>
            <returns>An array of <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> objects. If there are no subdirectories, this method returns an empty array. This method is not recursive.</returns>
            <remarks>
            The EnumerateDirectories and GetDirectories methods differ as follows: When you use EnumerateDirectories, you can start enumerating the collection of names
            before the whole collection is returned; when you use GetDirectories, you must wait for the whole array of names to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateDirectories can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.GetDirectories(System.String)">
            <summary>Returns an array of directories in the current <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> matching the given search criteria.</summary>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <returns>An array of <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> objects matching searchPattern. If there are no subdirectories, this method returns an empty array. This method is not recursive.</returns>
            <remarks>
            The EnumerateDirectories and GetDirectories methods differ as follows: When you use EnumerateDirectories, you can start enumerating the collection of names
            before the whole collection is returned; when you use GetDirectories, you must wait for the whole array of names to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateDirectories can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.GetDirectories(System.String,System.IO.SearchOption)">
            <summary>Returns an array of directories in the current <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> matching the given search criteria and using a value to determine whether to search subdirectories.</summary>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <returns>An array of <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> objects matching searchPattern. If there are no subdirectories, this method returns an empty array. This method is not recursive.</returns>
            <remarks>
            The EnumerateDirectories and GetDirectories methods differ as follows: When you use EnumerateDirectories, you can start enumerating the collection of names
            before the whole collection is returned; when you use GetDirectories, you must wait for the whole array of names to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateDirectories can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.GetDirectories(System.String,System.IO.SearchOption,System.Boolean)">
            <summary>Returns an array of directories in the current <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> matching the given search criteria and using a value to determine whether to search subdirectories.</summary>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <param name="continueOnAccessError">If set to <c>true</c> skip on access errors resulted from ACLs protected directories or not accessible reparse points.</param>
            <returns>An array of <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> objects matching searchPattern. If there are no subdirectories, this method returns an empty array. This method is not recursive.</returns>
            <remarks>
            The EnumerateDirectories and GetDirectories methods differ as follows: When you use EnumerateDirectories, you can start enumerating the collection of names
            before the whole collection is returned; when you use GetDirectories, you must wait for the whole array of names to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateDirectories can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.GetFiles">
            <summary>Returns a file list from the current directory.</summary>
            <returns>An array of type <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/>.</returns>
            <remarks>
            The EnumerateFiles and GetFiles methods differ as follows: When you use EnumerateFiles, you can start enumerating the collection of names
            before the whole collection is returned; when you use GetFiles, you must wait for the whole array of names to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.GetFiles(System.String)">
            <summary>Returns a file list from the current directory matching the given search pattern.</summary>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <returns>An array of type <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/>.</returns>
            <remarks>
            The EnumerateFiles and GetFiles methods differ as follows: When you use EnumerateFiles, you can start enumerating the collection of names
            before the whole collection is returned; when you use GetFiles, you must wait for the whole array of names to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.GetFiles(System.String,System.IO.SearchOption)">
            <summary>Returns a file list from the current directory matching the given search pattern and using a value to determine whether to search subdirectories.</summary>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <returns>An array of type <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/>.</returns>
            <remarks>
            The EnumerateFiles and GetFiles methods differ as follows: When you use EnumerateFiles, you can start enumerating the collection of names
            before the whole collection is returned; when you use GetFiles, you must wait for the whole array of names to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.GetFiles(System.String,System.IO.SearchOption,System.Boolean)">
            <summary>Returns a file list from the current directory matching the given search pattern and using a value to determine whether to search subdirectories.</summary>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <param name="continueOnAccessError">If set to <c>true</c> skip on access errors resulted from ACLs protected directories or not accessible reparse points.</param>
            <returns>An array of type <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/>.</returns>
            <remarks>
            The EnumerateFiles and GetFiles methods differ as follows: When you use EnumerateFiles, you can start enumerating the collection of names
            before the whole collection is returned; when you use GetFiles, you must wait for the whole array of names to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.GetFileSystemInfos">
            <summary>Returns an array of strongly typed <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> entries representing all the files and subdirectories in a directory.</summary>
            <returns>An array of strongly typed <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> entries.</returns>
            <remarks>
            If there are no files or directories in the DirectoryInfo, this method returns an empty array. This method is not recursive.
            For subdirectories, the FileSystemInfo objects returned by this method can be cast to the derived class DirectoryInfo.
            Use the FileAttributes value returned by the Attributes property to determine whether the FileSystemInfo represents a file or a directory.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.GetFileSystemInfos(System.String)">
            <summary>Retrieves an array of strongly typed <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> objects representing the files and subdirectories that match the specified search criteria.</summary>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <returns>An array of strongly typed <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> entries.</returns>
            <remarks>
            If there are no files or directories in the DirectoryInfo, this method returns an empty array. This method is not recursive.
            For subdirectories, the FileSystemInfo objects returned by this method can be cast to the derived class DirectoryInfo.
            Use the FileAttributes value returned by the Attributes property to determine whether the FileSystemInfo represents a file or a directory.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.GetFileSystemInfos(System.String,System.IO.SearchOption)">
            <summary>Retrieves an array of strongly typed <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> objects representing the files and subdirectories that match the specified search criteria.</summary>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <returns>An array of strongly typed <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> entries.</returns>
            <remarks>
            If there are no files or directories in the DirectoryInfo, this method returns an empty array.
            For subdirectories, the FileSystemInfo objects returned by this method can be cast to the derived class DirectoryInfo.
            Use the FileAttributes value returned by the Attributes property to determine whether the FileSystemInfo represents a file or a directory.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.GetFileSystemInfos(System.String,System.IO.SearchOption,System.Boolean)">
            <summary>Retrieves an array of strongly typed <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> objects representing the files and subdirectories that match the specified search criteria.</summary>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <param name="continueOnAccessError">If set to <c>true</c> skip on access errors resulted from ACLs protected directories or not accessible reparse points.</param>
            <returns>An array of strongly typed <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> entries.</returns>
            <remarks>
            If there are no files or directories in the DirectoryInfo, this method returns an empty array.
            For subdirectories, the FileSystemInfo objects returned by this method can be cast to the derived class DirectoryInfo.
            Use the FileAttributes value returned by the Attributes property to determine whether the FileSystemInfo represents a file or a directory.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.MoveTo(System.String)">
            <summary>Moves a <see cref="T:DirectoryInfo"/> instance and its contents to a new path.</summary>
            <param name="destinationPath">The name and path to which to move this directory. The destination cannot be another disk volume or a directory with the identical name. It can be an existing directory to which you want to add this directory as a subdirectory. </param>
            <remarks>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.MoveTo(System.String,System.Boolean)">
            <summary>Moves a <see cref="T:DirectoryInfo"/> instance and its contents to a new path.</summary>
            <param name="destinationPath">The path to the new location for sourcePath.</param>
            <param name="overwrite"><c>true</c> Delete destination folder if it exists; <c>false</c> Move will fail on existing folders or files.</param>
            <remarks>This method works across disk volumes.</remarks>
            <remarks>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.MoveTo(System.String,System.Boolean,System.Boolean)">
            <summary>Moves a <see cref="T:DirectoryInfo"/> instance and its contents to a new path.</summary>
            <param name="destinationPath">The destination folder path, of type <see cref="T:System.String"/></param>
            <param name="overwrite"><c>true</c> Delete destination folder if it exists; <c>false</c> Move will fail on existing folders or files.</param>
            <param name="preserveSecurity"><c>true</c> Preserves ACLs information.</param>
            <remarks>This method works across disk volumes.</remarks>
            <remarks>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.MoveTo(System.String,Alphaleonis.Win32.Filesystem.MoveOptions,System.Boolean,Alphaleonis.Win32.Filesystem.CopyProgressRoutine,System.Object)">
            <summary>Moves a <see cref="T:DirectoryInfo"/> instance and its contents to a new path.</summary>
            <param name="destinationPath">The destination folder path, of type <see cref="T:System.String"/></param>
            <param name="moveOptions">Flags that specify how the file is to be move. This parameter can be <see langword="null"/>.</param>
            <param name="preserveSecurity"><c>true</c> Preserves ACLs information.</param>
            <param name="copyProgress">A callback function that is called each time another portion of the file has been copied. This parameter can be <see langword="null"/>.</param>
            <param name="userProgressData">The argument to be passed to the callback function. This parameter can be <see langword="null"/>.</param>
            <remarks>This method works across disk volumes.</remarks>
            <remarks>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.Refresh">
            <summary>Refreshes the state of the object.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.SetAccessControl(System.Security.AccessControl.DirectorySecurity)">
            <summary>Applies access control list (ACL) entries described by a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object to the directory described by the current DirectoryInfo object.</summary>
            <param name="directorySecurity">A <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that describes an ACL entry to apply to the directory described by the path parameter.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.SetAccessControl(System.Security.AccessControl.DirectorySecurity,System.Security.AccessControl.AccessControlSections)">
            <summary>Applies access control list (ACL) entries described by a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object to the directory described by the current DirectoryInfo object.</summary>
            <param name="directorySecurity">A <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that describes an ACL entry to apply to the directory described by the path parameter.</param>
            <param name="includeSections">One or more of the <see cref="T:System.Security.AccessControl.AccessControlSections"/> values that specifies the type of access control list (ACL) information to set.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.ToString">
            <summary>Returns the original path that was passed by the user.</summary>
            <returns>Returns the original path that was passed by the user.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.CopyTo(System.String)">
            <summary>Recursive copying of folders and files from one root to another.</summary>
            <param name="destinationPath">The destination folder path, of type <see cref="T:System.String"/></param>
            <remarks>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.CopyTo(System.String,System.Boolean)">
            <summary>Recursive copying of folders and files from one root to another.</summary>
            <param name="destinationPath">The destination folder path, of type <see cref="T:System.String"/></param>
            <param name="overwrite"><c>true</c> Delete destination folder if it exists; <c>false</c> Copy will fail on existing folders or files.</param>
            <remarks>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.CopyTo(System.String,System.Boolean,System.Boolean)">
            <summary>Recursive copying of folders and files from one root to another.</summary>
            <param name="destinationPath">The destination folder path, of type <see cref="T:System.String"/></param>
            <param name="overwrite"><c>true</c> Delete destination folder if it exists; <c>false</c> Copy will fail on existing folders or files.</param>
            <param name="preserveSecurity"><c>true</c> Preserves ACLs information.</param>
            <remarks>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.CopyTo(System.String,Alphaleonis.Win32.Filesystem.CopyOptions,System.Boolean,Alphaleonis.Win32.Filesystem.CopyProgressRoutine,System.Object)">
            <summary>Recursive copying of folders and files from one root to another.</summary>
            <param name="destinationPath">The destination folder path, of type <see cref="T:System.String"/></param>
            <param name="copyOptions"><see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> that specify how the file is to be copied. This parameter can be <see langword="null"/>.</param>
            <param name="preserveSecurity"><c>true</c> Preserves ACLs information.</param>
            <param name="copyProgress">A callback function that is called each time another portion of the file has been copied. This parameter can be <see langword="null"/>.</param>
            <param name="userProgressData">The argument to be passed to the callback function. This parameter can be <see langword="null"/>.</param>
            <remarks>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.CountDirectories">
            <summary>Counts directories in a given directory.</summary>
            <returns>The counted number of directories.</returns>
            <exception cref="T:System.UnauthorizedAccessException">An exception is thrown case of access errors.</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.CountDirectories(System.String)">
            <summary>Counts directories in a given directory.</summary>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <returns>The counted number of directories.</returns>
            <exception cref="T:System.UnauthorizedAccessException">An exception is thrown case of access errors.</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.CountDirectories(System.String,System.IO.SearchOption)">
            <summary>Counts directories in a given directory.</summary>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <returns>The counted number of directories.</returns>
            <exception cref="T:System.UnauthorizedAccessException">An exception is thrown case of access errors.</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.CountDirectories(System.String,System.IO.SearchOption,System.Boolean)">
            <summary>Counts directories in a given directory.</summary>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <param name="continueOnAccessError">If set to <c>true</c> skip on access errors resulted from ACLs protected directories or not accessible reparse points.</param>
            <returns>The counted number of directories.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.CountFiles">
            <summary>Counts files in a given directory.</summary>
            <returns>The counted number of files.</returns>
            <exception cref="T:System.UnauthorizedAccessException">An exception is thrown case of access errors.</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.CountFiles(System.String)">
            <summary>Counts files in a given directory.</summary>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <returns>The counted number of files.</returns>
            <exception cref="T:System.UnauthorizedAccessException">An exception is thrown case of access errors.</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.CountFiles(System.String,System.IO.SearchOption)">
            <summary>Counts files in a given directory.</summary>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <returns>The counted number of files.</returns>
            <exception cref="T:System.UnauthorizedAccessException">An exception is thrown case of access errors.</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.CountFiles(System.String,System.IO.SearchOption,System.Boolean)">
            <summary>Counts files in a given directory.</summary>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <param name="continueOnAccessError">If set to <c>true</c> skip on access errors resulted from ACLs protected directories or not accessible reparse points.</param>
            <returns>The counted number of files.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.Compress">
            <summary>Compresses a directory using NTFS compression.</summary>
            <remarks>This will only compress the root items, non recursive.</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.Compress(System.IO.SearchOption)">
            <summary>Compresses a directory using NTFS compression.</summary>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.Compress(System.IO.SearchOption,System.Boolean)">
            <summary>Compresses a directory using NTFS compression.</summary>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <param name="continueOnAccessError">If set to <c>true</c> skip on access errors resulted from ACLs protected directories or non-accessible reparse points.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.DisableCompression">
            <summary>Disables compression of the specified directory and the files in it.</summary>
            <remarks>
            This method disables the folder-compression attribute. It will not decompress the current contents of the folder.
            However, newly created files and folders will be uncompressed.
            </remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.DisableEncryption">
            <summary>Disables encryption of the specified directory and the files in it. It does not affect encryption of subdirectories below the indicated directory.</summary>
            <returns><c>true</c> on success, <c>false</c> otherwise.</returns>
            <remarks>This method will create/change the file "Desktop.ini" and wil set Encryption value: "Disable=0"</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.Decompress">
            <summary>Decompresses an NTFS compressed directory.</summary>
            <remarks>This will only decompress the root items, non recursive.</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.Decompress(System.IO.SearchOption)">
            <summary>Decompresses an NTFS compressed directory.</summary>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.Decompress(System.IO.SearchOption,System.Boolean)">
            <summary>Decompresses an NTFS compressed directory.</summary>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <param name="continueOnAccessError">If set to <c>true</c> skip on access errors resulted from ACLs protected directories or non-accessible reparse points.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.Decrypt">
            <summary>Decrypts a directory that was encrypted by the current account using the Encrypt method.</summary>
            <remarks>This will only decrypt the root items, non recursive.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.DeleteEmpty">
            <summary>Deletes empty subdirectores from the this <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> instance.</summary>
            <returns><c>true</c> on success, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.DeleteEmpty(System.Boolean)">
            <summary>Deletes empty subdirectores from the this <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> instance.</summary>
            <param name="recursive"><c>true</c> to delete this directory, its subdirectories, and all files; otherwise, <c>false</c>.</param>
            <returns><c>true</c> on success, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.DeleteEmpty(System.Boolean,System.Boolean)">
            <param name="recursive"><c>true</c> to delete this directory, its subdirectories, and all files; otherwise, <c>false</c>.</param>
            <param name="ignoreReadOnly">If set to <c>true</c> ignores read only attribute of files and directories.</param>
            <returns><c>true</c> on success, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.DeleteEmpty(System.Boolean,System.Boolean,System.String)">
            <summary>Deletes empty subdirectores from the this <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> instance.</summary>
            <param name="recursive"><c>true</c> to delete this directory, its subdirectories, and all files; otherwise, <c>false</c>.</param>
            <param name="ignoreReadOnly">If set to <c>true</c> ignores read only attribute of files and directories.</param>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <returns><c>true</c> on success, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.EnableCompression">
            <summary>Enables compression of the specified directory and the files in it.</summary>
            <remarks>
            This method enables the folder-compression attribute. It will not compress the current contents of the folder.
            However, newly created files and folders will be compressed.
            </remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.EnableEncryption">
            <summary>Enables encryption of the specified directory and the files in it. It does not affect encryption of subdirectories below the indicated directory.</summary>
            <returns><c>true</c> on success, <c>false</c> otherwise.</returns>
            <remarks>This method will create/change the file "Desktop.ini" and wil set Encryption value: "Disable=1"</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.Encrypt">
            <summary>Encrypts a directory so that only the account used to encrypt the directory can decrypt it.</summary>
            <remarks>This will only encrypt the root items, non recursive.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.EnumerateStreams">
            <summary>Returns an enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.BackupStreamInfo"/> instances, associated with the directory.</summary>
            <returns>An enumerable <see langref="BackupStreamInfo"/> collection of streams for the directory or <see langword="null"/> on error.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.EnumerateStreams(System.String,System.IO.SearchOption)">
            <summary>Returns an enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.BackupStreamInfo"/> instances, associated with the directory.</summary>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <returns>An enumerable <see langref="BackupStreamInfo"/> collection of streams for the directory or <see langword="null"/> on error.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.EnumerateStreams(System.String,System.IO.SearchOption,System.Boolean)">
            <summary>Returns an enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.BackupStreamInfo"/> instances, associated with the directory.</summary>
            <param name="searchPattern">A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</param>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <param name="continueOnAccessError">If set to <c>true</c> skip on access errors resulted from ACLs protected directories or not accessible reparse points.</param>
            <returns>An enumerable <see langref="BackupStreamInfo"/> collection of streams for the directory or <see langword="null"/> on error.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.CreateSubdirectoryInternal(System.String,System.Security.AccessControl.DirectorySecurity)">
            <summary>Unified method CreateSubdirectory() to create a subdirectory or subdirectories on the specified path. The specified path can be relative to this instance of the DirectoryInfo class.</summary>
            <param name="path">The specified path. This cannot be a different disk volume or Universal Naming Convention (UNC) name.</param>
            <param name="directorySecurity">The <see cref="T:System.Security.AccessControl.DirectorySecurity"/> security to apply.</param>
            <returns>The last directory specified in path as an <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> object.</returns>
            <remarks>
            Any and all directories specified in path are created, unless some part of path is invalid.
            The path parameter specifies a directory path, not a file path.
            If the subdirectory already exists, this method does nothing.
            </remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.CopyToMoveToInternal(System.String,System.Boolean,System.Nullable{Alphaleonis.Win32.Filesystem.CopyOptions},System.Nullable{Alphaleonis.Win32.Filesystem.MoveOptions},Alphaleonis.Win32.Filesystem.CopyProgressRoutine,System.Object)">
            <summary>Unified method CopyToMoveToInternal() to recursively copy folders and files from one root to another.</summary>
            <param name="destinationPath">The destination folder path, of type <see cref="T:System.String"/></param>
            <param name="preserveSecurity"><c>true</c> Preserves ACLs information.</param>
            <param name="copyOptions"><see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> that specify how the file is to be copied. This parameter can be <see langword="null"/>.</param>
            <param name="moveOptions"><see cref="T:Alphaleonis.Win32.Filesystem.MoveOptions"/> that specify how the file is to be moved. This parameter can be <see langword="null"/>.</param>
            <param name="copyProgress">A callback function that is called each time another portion of the file has been copied. This parameter can be <see langword="null"/>.</param>
            <param name="userProgressData">The argument to be passed to the callback function. This parameter can be <see langword="null"/>.</param>
            <remarks>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior</remarks>
            <remarks>This Move method works across disk volumes, and it does not throw an exception if the source and destination are
            the same. Note that if you attempt to replace a file by moving a file of the same name into that directory, you
            get an IOException. You cannot use the Move method to overwrite an existing file.
            </remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DirectoryInfo.Exists">
            <summary>Gets a value indicating whether the directory exists.</summary>
            <returns>true if the directory exists; otherwise, false.</returns>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DirectoryInfo.Name">
            <summary>Gets the name of this <see cref="T:DirectoryInfo"/> instance.</summary>
            <returns>The directory name.</returns>
            <remarks>Returns only the name of the directory, such as "Bin". To get the full path, such as "c:\public\Bin", use the FullName property.</remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DirectoryInfo.Parent">
            <summary>Gets the parent directory of a specified subdirectory.</summary>
            <returns>The parent directory, or null if the path is null or if the file path denotes a root (such as "\", "C:", or * "\\server\share").</returns>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DirectoryInfo.Root">
            <summary>Gets the root portion of the directory.</summary>
            <returns>An object that represents the root of the directory.</returns>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.DirectoryNotEmptyException">
            <summary>The exception that is thrown when an attempt to create a directory or file that already exists was made.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryNotEmptyException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryNotEmptyException"/> class.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryNotEmptyException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryNotEmptyException"/> class.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryNotEmptyException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryNotEmptyException"/> class.</summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryNotEmptyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryNotEmptyException"/> class.</summary>
            <param name="info">The data for serializing or deserializing the object.</param>
            <param name="context">The source and destination for the object.</param>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.File">
            <summary>Provides static methods for the creation, copying, deletion, moving, and opening of files, and aids in the creation of <see cref="T:System.IO.FileStream"/> objects.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Appends lines to a file, and then closes the file. If the specified file does not exist, this method creates a file, writes the specified lines to the file, and then closes the file.</summary>
            <param name="path">The file to append the lines to. The file is created if it doesn't already exist.</param>
            <param name="contents">The lines to append to the file.</param>
            <remarks>The method creates the file if it doesn’t exist, but it doesn't create new directories. Therefore, the value of the path parameter must contain existing directories.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>Appends lines to a file, and then closes the file. If the specified file does not exist, this method creates a file, writes the specified lines to the file, and then closes the file.</summary>
            <param name="path">The file to append the lines to. The file is created if it doesn't already exist.</param>
            <param name="contents">The lines to append to the file.</param>
            <param name="encoding">The character <see cref="T:System.Text.Encoding"/> to use.</param>
            <remarks>The method creates the file if it doesn’t exist, but it doesn't create new directories. Therefore, the value of the path parameter must contain existing directories.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.AppendAllLines(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Appends lines to a file, and then closes the file. If the specified file does not exist, this method creates a file, writes the specified lines to the file, and then closes the file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to append the lines to. The file is created if it doesn't already exist.</param>
            <param name="contents">The lines to append to the file.</param>
            <remarks>The method creates the file if it doesn’t exist, but it doesn't create new directories. Therefore, the value of the path parameter must contain existing directories.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.AppendAllLines(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>Appends lines to a file, and then closes the file. If the specified file does not exist, this method creates a file, writes the specified lines to the file, and then closes the file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to append the lines to. The file is created if it doesn't already exist.</param>
            <param name="contents">The lines to append to the file.</param>
            <param name="encoding">The character <see cref="T:System.Text.Encoding"/> to use.</param>
            <remarks>The method creates the file if it doesn’t exist, but it doesn't create new directories. Therefore, the value of the path parameter must contain existing directories.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.AppendAllText(System.String,System.String)">
            <summary>Appends the specified stringto the file, creating the file if it does not already exist.</summary>
            <param name="path">The file to append the specified string to.</param>
            <param name="contents">The string to append to the file.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.AppendAllText(System.String,System.String,System.Text.Encoding)">
            <summary>Appends the specified string to the file, creating the file if it does not already exist.</summary>
            <param name="path">The file to append the specified string to.</param>
            <param name="contents">The string to append to the file.</param>
            <param name="encoding">The character <see cref="T:System.Text.Encoding"/> to use.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.AppendAllText(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>Appends the specified stringto the file, creating the file if it does not already exist.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to append the specified string to.</param>
            <param name="contents">The string to append to the file.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.AppendAllText(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.Text.Encoding)">
            <summary>Appends the specified string to the file, creating the file if it does not already exist.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to append the specified string to.</param>
            <param name="contents">The string to append to the file.</param>
            <param name="encoding">The character <see cref="T:System.Text.Encoding"/> to use.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.AppendText(System.String)">
            <summary>Creates a <see cref="T:System.IO.StreamWriter"/> that appends <see cref="F:Alphaleonis.Win32.Filesystem.NativeMethods.DefaultFileEncoding"/> encoded text to an existing file,
            or to a new file if the specified file does not exist.</summary>
            <param name="path">The path to the file to append to.</param>
            <returns>A stream writer that appends <see cref="F:Alphaleonis.Win32.Filesystem.NativeMethods.DefaultFileEncoding"/> encoded text to the specified file or to a new file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.AppendText(System.String,System.Text.Encoding)">
            <summary>Creates a <see cref="T:System.IO.StreamWriter"/> that appends <see cref="F:Alphaleonis.Win32.Filesystem.NativeMethods.DefaultFileEncoding"/> encoded text to an existing file,
            or to a new file if the specified file does not exist.</summary>
            <param name="path">The path to the file to append to.</param>
            <returns>A stream writer that appends <see cref="F:Alphaleonis.Win32.Filesystem.NativeMethods.DefaultFileEncoding"/> encoded text to the specified file or to a new file.</returns>
            <param name="encoding">The character <see cref="T:System.Text.Encoding"/> to use.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.AppendText(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Creates a <see cref="T:System.IO.StreamWriter"/> that appends <see cref="F:Alphaleonis.Win32.Filesystem.NativeMethods.DefaultFileEncoding"/> encoded text to an existing file,
            or to a new file if the specified file does not exist.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path to the file to append to.</param>
            <returns>A stream writer that appends <see cref="F:Alphaleonis.Win32.Filesystem.NativeMethods.DefaultFileEncoding"/> encoded text to the specified file or to a new file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.AppendText(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Text.Encoding)">
            <summary>Creates a <see cref="T:System.IO.StreamWriter"/> that appends <see cref="F:Alphaleonis.Win32.Filesystem.NativeMethods.DefaultFileEncoding"/> encoded text to an existing file,
            or to a new file if the specified file does not exist.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path to the file to append to.</param>
            <returns>A stream writer that appends <see cref="F:Alphaleonis.Win32.Filesystem.NativeMethods.DefaultFileEncoding"/> encoded text to the specified file or to a new file.</returns>
            <param name="encoding">The character <see cref="T:System.Text.Encoding"/> to use.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Copy(System.String,System.String)">
            <summary>Copies an existing file to a new file. Overwriting a file of the same name is not allowed.</summary>
            <param name="sourceFileName">The file to copy.</param>
            <param name="destFileName">The name of the destination file. This cannot be a directory or an existing file.</param>
            <remarks>The attributes of the original file are retained in the copied file.</remarks>
            <remarks>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Copy(System.String,System.String,System.Boolean)">
            <summary>Copies an existing file to a new file. Overwriting a file of the same name is allowed.</summary>
            <param name="sourceFileName">The file to copy.</param>
            <param name="destFileName">The name of the destination file. This cannot be a directory.</param>
            <param name="overwrite"><c>true</c> if the destination file should be overwritten; otherwise, <c>false</c>.</param>
            <remarks>The attributes of the original file are retained in the copied file.</remarks>
            <remarks>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Copy(System.String,System.String,Alphaleonis.Win32.Filesystem.CopyOptions,System.Boolean)">
            <summary>Copies an existing file to a new file.</summary>
            <param name="sourceFileName">The name of an existing file.</param>
            <param name="destFileName">The name of the new file.</param>
            <param name="copyOptions"><see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> that specify how the file is to be copied.</param>
            <param name="preserveDates"><c>true</c> if original Timestamps must be preserved, otherwise <c>false</c></param>
            <remarks>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Copy(System.String,System.String,Alphaleonis.Win32.Filesystem.CopyOptions,System.Boolean,Alphaleonis.Win32.Filesystem.CopyProgressRoutine,System.Object)">
            <summary>Copies an existing file to a new file, notifying the application of its progress through a callback function.</summary>
            <param name="sourceFileName">The name of an existing file.</param>
            <param name="destFileName">The name of the new file.</param>
            <param name="copyOptions"><see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> that specify how the file is to be copied.</param>
            <param name="preserveDates"><c>true</c> if original Timestamps must be preserved, otherwise <c>false</c></param>
            <param name="copyProgress">A callback function that is called each time another portion of the file has been copied. This parameter can be <see langword="null"/>.</param>
            <param name="userProgressData">The argument to be passed to the callback function. This parameter can be <see langword="null"/>.</param>
            <remarks>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Copy(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>Copies an existing file to a new file. Overwriting a file of the same name is not allowed.</summary>
            <param name="transaction">The transaction.</param>
            <param name="sourceFileName">The file to copy.</param>
            <param name="destFileName">The name of the destination file. This cannot be a directory or an existing file.</param>
            <remarks>The attributes of the original file are retained in the copied file.</remarks>
            <remarks>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Copy(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.Boolean)">
            <summary>Copies an existing file to a new file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="sourceFileName">The file to copy.</param>
            <param name="destFileName">The name of the destination file. This cannot be a directory.</param>
            <param name="overwrite"><c>true</c> if the destination file should be overwritten; otherwise, <c>false</c>.</param>
            <remarks>The attributes of the original file are retained in the copied file.</remarks>
            <remarks>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Copy(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.CopyOptions,System.Boolean)">
            <summary>Copies an existing file to a new file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="sourceFileName">The name of an existing file.</param>
            <param name="destFileName">The name of the new file.</param>
            <param name="copyOptions"><see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> that specify how the file is to be copied.</param>
            <param name="preserveDates"><c>true</c> if original Timestamps must be preserved, otherwise <c>false</c></param>
            <remarks>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Copy(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.CopyOptions,System.Boolean,Alphaleonis.Win32.Filesystem.CopyProgressRoutine,System.Object)">
            <summary>Copies an existing file to a new file, notifying the application of its progress through a callback function.</summary>
            <param name="transaction">The transaction.</param>
            <param name="sourceFileName">The name of an existing file.</param>
            <param name="destFileName">The name of the new file.</param>
            <param name="copyOptions"><see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> that specify how the file is to be copied.</param>
            <param name="preserveDates"><c>true</c> if original Timestamps must be preserved, otherwise <c>false</c></param>
            <param name="copyProgress">A callback function that is called each time another portion of the file has been copied. This parameter can be <see langword="null"/>.</param>
            <param name="userProgressData">The argument to be passed to the callback function. This parameter can be <see langword="null"/>.</param>
            <returns><c>true</c> if the file was completely copied, or <c>false</c> if the copy operation was aborted/failed.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Create(System.String)">
            <summary>Creates or overwrites a file in the specified path.</summary>
            <param name="path">The path and name of the file to create.</param>
            <returns>A <see cref="T:System.IO.FileStream"/> that provides read/write access to the file specified in path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Create(System.String,System.Int32)">
            <summary>Creates or overwrites a file in the specified path, specifying a buffer size.</summary>
            <param name="path">The path and name of the file to create.</param>
            <param name="bufferSize">The number of bytes buffered for reads and writes to the file.</param>
            <returns>A <see cref="T:System.IO.FileStream"/> with the specified buffer size that provides read/write access to the file specified in path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Create(System.String,System.Int32,Alphaleonis.Win32.Filesystem.EFileAttributes)">
            <summary>Creates or overwrites a file in the specified path, specifying a buffer size and a <see cref="T:Alphaleonis.Win32.Filesystem.EFileAttributes"/> value.</summary>
            <param name="path">The path and name of the file to create.</param>
            <param name="bufferSize">The number of bytes buffered for reads and writes to the file.</param>
            <param name="attributes">One of the <see cref="T:Alphaleonis.Win32.Filesystem.EFileAttributes"/> values that describes how to create or overwrite the file.</param>
            <returns>A <see cref="T:System.IO.FileStream"/> that provides read/write access to the file specified in path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Create(System.String,System.Int32,Alphaleonis.Win32.Filesystem.EFileAttributes,System.Security.AccessControl.FileSecurity)">
            <summary>Creates or overwrites a file in the specified path, specifying a buffer size and a <see cref="T:Alphaleonis.Win32.Filesystem.EFileAttributes"/> value and a <see cref="T:System.Security.AccessControl.FileSecurity"/> value.</summary>
            <param name="path">The path and name of the file to create.</param>
            <param name="bufferSize">The number of bytes buffered for reads and writes to the file.</param>
            <param name="attributes">One of the <see cref="T:Alphaleonis.Win32.Filesystem.EFileAttributes"/> values that describes how to create or overwrite the file.</param>
            <param name="fileSecurity">A <see cref="T:System.Security.AccessControl.FileSecurity"/> instance that determines the access control and audit security for the file.</param>
            <returns>A <see cref="T:System.IO.FileStream"/> with the specified buffer size that provides read/write access to the file specified in path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Create(System.String,System.Int32,Alphaleonis.Win32.Filesystem.EFileAttributes,System.Security.AccessControl.FileSecurity,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>Creates or overwrites a file in the specified path, specifying a buffer size and advanced options:
            <see cref="T:Alphaleonis.Win32.Filesystem.EFileAttributes"/>, <see cref="T:System.Security.AccessControl.FileSecurity"/>, <see cref="T:System.IO.FileMode"/>, <see cref="T:System.IO.FileAccess"/>, <see cref="T:System.IO.FileShare"/>.
            </summary>
            <param name="path">The name of the file.</param>
            <param name="bufferSize">The number of bytes buffered for reads and writes to the file.</param>
            <param name="attributes">The <see cref="T:Alphaleonis.Win32.Filesystem.EFileAttributes"/> additional advanced options to create a file.</param>
            <param name="fileSecurity">A <see cref="T:System.Security.AccessControl.FileSecurity"/> instance that determines the access control and audit security for the file.</param>
            <param name="mode">The <see cref="T:System.IO.FileMode"/> option gives you more precise control over how you want to create a file.</param>
            <param name="access">The <see cref="T:System.IO.FileAccess"/> allow you additionaly specify to default redwrite capability - just write, bypassing any cache.</param>
            <param name="share">The <see cref="T:System.IO.FileShare"/> option controls how you would like to share created file with other requesters.</param>
            <returns>A <see cref="T:System.IO.FileStream"/> with the specified buffer size that provides read/write access to the file specified in path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Create(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Creates or overwrites a file in the specified path.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path and name of the file to create.</param>
            <returns>A <see cref="T:System.IO.FileStream"/> that provides read/write access to the file specified in path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Create(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Int32)">
            <summary>Creates or overwrites a file in the specified path, specifying a buffer size.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path and name of the file to create.</param>
            <param name="bufferSize">The number of bytes buffered for reads and writes to the file.</param>
            <returns>A <see cref="T:System.IO.FileStream"/> with the specified buffer size that provides read/write access to the file specified in path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Create(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Int32,Alphaleonis.Win32.Filesystem.EFileAttributes)">
            <summary>Creates or overwrites a file in the specified path, specifying a buffer size and a <see cref="T:Alphaleonis.Win32.Filesystem.EFileAttributes"/> value.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path and name of the file to create.</param>
            <param name="bufferSize">The number of bytes buffered for reads and writes to the file.</param>
            <param name="attributes">One of the <see cref="T:Alphaleonis.Win32.Filesystem.EFileAttributes"/> values that describes how to create or overwrite the file.</param>
            <returns>A <see cref="T:System.IO.FileStream"/> with the specified buffer size that provides read/write access to the file specified in path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Create(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Int32,Alphaleonis.Win32.Filesystem.EFileAttributes,System.Security.AccessControl.FileSecurity,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>Creates or overwrites a file in the specified path, specifying a buffer size and advanced options:
            <see cref="T:Alphaleonis.Win32.Filesystem.EFileAttributes"/>, <see cref="T:System.Security.AccessControl.FileSecurity"/>, <see cref="T:System.IO.FileMode"/>, <see cref="T:System.IO.FileAccess"/>, <see cref="T:System.IO.FileShare"/>.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The name of the file.</param>
            <param name="bufferSize">The number of bytes buffered for reads and writes to the file.</param>
            <param name="attributes">The <see cref="T:Alphaleonis.Win32.Filesystem.EFileAttributes"/> additional advanced options to create a file.</param>
            <param name="fileSecurity">A <see cref="T:System.Security.AccessControl.FileSecurity"/> instance that determines the access control and audit security for the file.</param>
            <param name="mode">The <see cref="T:System.IO.FileMode"/> option gives you more precise control over how you want to create a file.</param>
            <param name="access">The <see cref="T:System.IO.FileAccess"/> allow you additionaly specify to default redwrite capability - just write, bypassing any cache.</param>
            <param name="share">The <see cref="T:System.IO.FileShare"/> option controls how you would like to share created file with other requesters.</param>
            <returns>A <see cref="T:System.IO.FileStream"/> with the specified buffer size that provides read/write access to the file specified in path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CreateText(System.String)">
            <summary>Creates or opens a file for writing <see cref="F:Alphaleonis.Win32.Filesystem.NativeMethods.DefaultFileEncoding"/> encoded text.</summary>
            <param name="path">The file to be opened for writing.</param>
            <returns>A <see cref="T:System.IO.StreamWriter"/> that writes to the specified file using <see cref="F:Alphaleonis.Win32.Filesystem.NativeMethods.DefaultFileBufferSize"/> encoding.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CreateText(System.String,System.Text.Encoding)">
            <summary>Creates or opens a file for writing <see cref="F:Alphaleonis.Win32.Filesystem.NativeMethods.DefaultFileEncoding"/> encoded text.</summary>
            <param name="path">The file to be opened for writing.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> applied to the contents of the file.</param>
            <returns>A <see cref="T:System.IO.StreamWriter"/> that writes to the specified file using <see cref="F:Alphaleonis.Win32.Filesystem.NativeMethods.DefaultFileBufferSize"/> encoding.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CreateText(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Creates or opens a file for writing <see cref="F:Alphaleonis.Win32.Filesystem.NativeMethods.DefaultFileEncoding"/> encoded text.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to be opened for writing.</param>
            <returns>A <see cref="T:System.IO.StreamWriter"/> that writes to the specified file using <see cref="F:Alphaleonis.Win32.Filesystem.NativeMethods.DefaultFileEncoding"/> encoding.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CreateText(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Text.Encoding)">
            <summary>Creates or opens a file for writing <see cref="F:Alphaleonis.Win32.Filesystem.NativeMethods.DefaultFileEncoding"/> encoded text.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to be opened for writing.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> applied to the contents of the file.</param>
            <returns>A <see cref="T:System.IO.StreamWriter"/> that writes to the specified file using <see cref="F:Alphaleonis.Win32.Filesystem.NativeMethods.DefaultFileBufferSize"/> encoding.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Decrypt(System.String)">
            <summary>Decrypts a file that was encrypted by the current account using the Encrypt method.</summary>
            <param name="path">A path that describes a file to decrypt.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Delete(System.String)">
            <summary>Deletes the specified file.</summary>
            <param name="path">The name of the file to be deleted. Wildcard characters are not supported.</param>
            <remarks>If the file to be deleted does not exist, no exception is thrown.</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Delete(System.String,System.Boolean)">
            <summary>Deletes the specified file.</summary>
            <param name="path">The name of the file to be deleted. Wildcard characters are not supported.</param>
            <param name="ignoreReadOnly">If set to <c>true</c> overrides the read only <see cref="T:System.IO.FileAttributes"/> of the file.</param>
            <remarks>If the file to be deleted does not exist, no exception is thrown.</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Delete(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Deletes the specified file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The name of the file to be deleted. Wildcard characters are not supported.</param>
            <remarks>If the file to be deleted does not exist, no exception is thrown.</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Delete(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Boolean)">
            <summary>Deletes the specified file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The name of the file to be deleted. Wildcard characters are not supported.</param>
            <param name="ignoreReadOnly">If set to <c>true</c> overrides the read only <see cref="T:System.IO.FileAttributes"/> of the file.</param>
            <remarks>If the file to be deleted does not exist, no exception is thrown.</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Encrypt(System.String)">
            <summary>Encrypts a file so that only the account used to encrypt the file can decrypt it.</summary>
            <param name="path">A path that describes a file to encrypt.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Exists(System.String)">
            <summary>Determines whether the specified file exists.</summary>
            <param name="path">The file to check. Note that this files may contain wildcards, such as '*'.</param>
            <returns><c>true</c> on success, <c>false</c> otherwise.</returns>
            <remarks>Note that this files may contain wildcards, such as '*'</remarks>
            <remarks>Return value is <c>true</c> if the caller has the required permissions and path contains the name of an existing file; otherwise, <c>false</c>.</remarks>
            <remarks>This method also returns <c>false</c> if path is NULL reference (Nothing in Visual Basic), an invalid path, or a zero-length string.</remarks>
            <remarks>If the caller does not have sufficient permissions to read the specified file, no exception is thrown and the method returns <c>false</c> regardless of the existence of path.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Exists(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Determines whether the specified file exists.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to check. Note that this files may contain wildcards, such as '*'.</param>
            <returns><c>true</c> on success, <c>false</c> otherwise.</returns>
            <remarks>Note that this files may contain wildcards, such as '*'</remarks>
            <remarks>Return value is <c>true</c> if the caller has the required permissions and path contains the name of an existing file; otherwise, <c>false</c>.</remarks>
            <remarks>This method also returns <c>false</c> if path is NULL reference (Nothing in Visual Basic), an invalid path, or a zero-length string.</remarks>
            <remarks>If the caller does not have sufficient permissions to read the specified file, no exception is thrown and the method returns <c>false</c> regardless of the existence of path.</remarks>
            <remarks>A trailing backslash is not allowed and will be removed.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetAccessControl(System.String)">
            <summary>Gets a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the access control list (ACL) entries for a specified file.</summary>
            <param name="path">The path to a file containing a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that describes the file's access control list (ACL) information.</param>
            <returns>A <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the access control rules for the file described by the <paramref name="path"/> parameter.</returns>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)">
            <summary>Gets a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the access control list (ACL) entries for a specified file.</summary>
            <param name="path">The path to a file containing a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that describes the file's access control list (ACL) information.</param>
            <param name="includeSections">One (or more) of the <see cref="T:System.Security.AccessControl.AccessControlSections"/> values that specifies the type of access control list (ACL) information to receive.</param>
            <returns>A <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the access control rules for the file described by the <paramref name="path"/> parameter.</returns>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetAttributes(System.String)">
            <summary>Gets the <see cref="T:System.IO.FileAttributes"/> of the file on the path.</summary>
            <param name="path">The path to the file.</param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the file on the path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetAttributes(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Gets the <see cref="T:System.IO.FileAttributes"/> of the file on the path.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path to the file.</param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the file on the path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetCreationTime(System.String)">
            <summary>Gets the creation date and time of the specified file.</summary>
            <param name="path">The file for which to obtain creation date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified file. This value is expressed in local time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetCreationTime(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Gets the creation date and time of the specified file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to obtain creation date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified file. This value is expressed in local time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetCreationTimeUtc(System.String)">
            <summary>Gets the creation date and time, in Coordinated Universal Time (UTC) format, of the specified file.</summary>
            <param name="path">The file for which to obtain creation date and time information, in Coordinated Universal Time (UTC) format.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified file. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetCreationTimeUtc(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Gets the creation date and time, in Coordinated Universal Time (UTC) format, of the specified file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to obtain creation date and time information, in Coordinated Universal Time (UTC) format.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified file. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetLastAccessTime(System.String)">
            <summary>Gets the date and time that the specified file was last accessed.</summary>
            <param name="path">The file for which to obtain access date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file was last accessed. This value is expressed in local time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetLastAccessTime(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Gets the date and time that the specified file was last accessed.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to obtain access date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file was last accessed. This value is expressed in local time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetLastAccessTimeUtc(System.String)">
            <summary>Gets the date and time, in coordinated universal time (UTC), that the specified file was last accessed.</summary>
            <param name="path">The file for which to obtain access date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file was last accessed. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetLastAccessTimeUtc(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Gets the date and time, in coordinated universal time (UTC), that the specified file was last accessed.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to obtain access date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file was last accessed. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetLastWriteTime(System.String)">
            <summary>Gets the date and time that the specified file was last written to.</summary>
            <param name="path">The file for which to obtain write date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file was last written to. This value is expressed in local time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetLastWriteTime(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Gets the date and time that the specified file was last written to.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to obtain write date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file was last written to. This value is expressed in local time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetLastWriteTimeUtc(System.String)">
            <summary>Gets the date and time, in coordinated universal time (UTC) time, that the specified file was last written to.</summary>
            <param name="path">The file for which to obtain write date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file was last written to. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetLastWriteTimeUtc(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Gets the date and time, in coordinated universal time (UTC) time, that the specified file was last written to.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to obtain write date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file was last written to. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Move(System.String,System.String)">
            <summary>Moves a specified file to a new location, providing the option to specify a new file name.</summary>
            <param name="sourceFileName">The name of the file to move.</param>
            <param name="destFileName">The new path for the file.</param>
            <remarks>This method works across disk volumes.</remarks>
            <remarks>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Move(System.String,System.String,Alphaleonis.Win32.Filesystem.MoveOptions)">
            <summary>Moves a specified file to a new location, providing the option to specify a new file name.</summary>
            <param name="sourceFileName">The name of the file to move.</param>
            <param name="destFileName">The new path for the file.</param>
            <param name="options">The <see cref="T:Alphaleonis.Win32.Filesystem.MoveOptions"/> options.</param>
            <remarks>This method works across disk volumes.</remarks>
            <remarks>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Move(System.String,System.String,Alphaleonis.Win32.Filesystem.MoveOptions,Alphaleonis.Win32.Filesystem.CopyProgressRoutine,System.Object)">
            <summary>Moves a file or directory, including its children. You can provide a callback function that receives progress notifications.</summary>
            <param name="sourceFileName"><para>The name of the existing file or directory on the local computer.</para>
            <para>If <paramref name="options"/> specifies <see cref="F:Alphaleonis.Win32.Filesystem.MoveOptions.DelayUntilReboot"/>, the file cannot exist on
            a remote share because delayed operations are performed before the network is available.</para></param>
            <param name="destFileName">
            <para>The new name of the file or directory on the local computer.</para>
            <para>When moving a file, <paramref name="destFileName"/> can be on a different file system or volume.
            If <paramref name="destFileName"/> is on another drive, you must set the
            <see cref="F:Alphaleonis.Win32.Filesystem.MoveOptions.CopyAllowed"/> flag in <paramref name="options"/>.
            </para>
            <para>When moving a directory, <paramref name="sourceFileName"/> and <paramref name="destFileName"/> must be on the same drive. </para>
            </param>
            <param name="options">The move options.</param>
            <param name="copyProgress">A <see cref="T:Alphaleonis.Win32.Filesystem.CopyProgressRoutine"/> callback function that is called each time another
            portion of the file has been moved. The callback function can be useful if you provide a user interface that displays
            the progress of the operation. This parameter can be <see langword="null"/>.</param>
            <param name="userProgressData">An argument to be passed to the <see cref="T:Alphaleonis.Win32.Filesystem.CopyProgressRoutine"/> callback function. This parameter can be <see langword="null"/>.</param>
            <returns><c>true</c> when successfully moved, <c>false</c> on failure or the operation was aborted.</returns>
            <remarks>This method works across disk volumes.</remarks>
            <remarks>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Move(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>Moves a specified file to a new location as part of a transaction, providing the option to specify a new file name.</summary>
            <param name="transaction">The transaction.</param>
            <param name="sourceFileName">The name of the file to move.</param>
            <param name="destFileName">The new path for the file.</param>
            <returns><c>true</c> when successfully moved, <c>false</c> on failure.</returns>
            <remarks>This method works across disk volumes.</remarks>
            <remarks>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Move(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.MoveOptions)">
            <summary>Moves a file or directory  as part of a transaction, including its children.</summary>
            <param name="transaction">The transaction.</param>
            <param name="sourceFileName"><para>The name of the existing file or directory on the local computer.</para>
            	<para>If <paramref name="options"/> specifies <see cref="F:Alphaleonis.Win32.Filesystem.MoveOptions.DelayUntilReboot"/>, the file cannot exist on
            a remote share because delayed operations are performed before the network is available.</para></param>
            <param name="destFileName"><para>The new name of the file or directory on the local computer.</para>
            	<para>When moving a file, <paramref name="destFileName"/> can be on a different file system or volume.
            If <paramref name="destFileName"/> is on another drive, you must set the
            <see cref="F:Alphaleonis.Win32.Filesystem.MoveOptions.CopyAllowed"/> flag in <paramref name="options"/>.
            </para>
            	<para>When moving a directory, <paramref name="sourceFileName"/> and <paramref name="destFileName"/> must be on the same drive. </para></param>
            <param name="options">The move options.</param>
            <returns><c>true</c> when successfully moved, <c>false</c> on failure.</returns>
            <remarks>This method works across disk volumes.</remarks>
            <remarks>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Move(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.MoveOptions,Alphaleonis.Win32.Filesystem.CopyProgressRoutine,System.Object)">
            <summary>Moves a file or directory as part of a transaction, including its children. You can provide a callback function that receives progress notifications.</summary>
            <param name="transaction">The transaction.</param>
            <param name="sourceFileName"><para>The name of the existing file or directory on the local computer.</para>
            	<para>If <paramref name="options"/> specifies <see cref="F:Alphaleonis.Win32.Filesystem.MoveOptions.DelayUntilReboot"/>, the file cannot exist on
            a remote share because delayed operations are performed before the network is available.</para></param>
            <param name="destFileName"><para>The new name of the file or directory on the local computer.</para>
            	<para>When moving a file, <paramref name="destFileName"/> can be on a different file system or volume.
            If <paramref name="destFileName"/> is on another drive, you must set the
            <see cref="F:Alphaleonis.Win32.Filesystem.MoveOptions.CopyAllowed"/> flag in <paramref name="options"/>.
            </para>
            	<para>When moving a directory, <paramref name="sourceFileName"/> and <paramref name="destFileName"/> must be on the same drive. </para></param>
            <param name="options">The move options.</param>
            <param name="copyProgress">A <see cref="T:Alphaleonis.Win32.Filesystem.CopyProgressRoutine"/> callback function that is called each time another
            portion of the file has been moved. The callback function can be useful if you provide a user interface that displays
            the progress of the operation. This parameter can be <see langword="null"/>.</param>
            <param name="userProgressData">An argument to be passed to the <see cref="T:Alphaleonis.Win32.Filesystem.CopyProgressRoutine"/> callback function. This parameter can be <see langword="null"/>.</param>
            <returns><c>true</c> when successfully moved, <c>false</c> on failure or the operation was aborted.</returns>
            <remarks>This method works across disk volumes.</remarks>
            <remarks>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Open(System.String,System.IO.FileMode)">
            <summary>Opens a <see cref="T:System.IO.FileStream"/> on the specified path with read/write access.</summary>
            <param name="path">The file to open.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten.</param>
            <returns>A <see cref="T:System.IO.FileStream"/> opened in the specified mode and path, with read/write access and not shared.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>Opens a <see cref="T:System.IO.FileStream"/> on the specified path, with the specified mode and access.</summary>
            <param name="path">The file to open.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten.</param>
            <param name="access">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the file.</param>
            <returns>An unshared <see cref="T:System.IO.FileStream"/> that provides access to the specified file, with the specified mode and access.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>Opens a <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option.</summary>
            <param name="path">The file to open.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten.</param>
            <param name="access">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the file.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> value specifying the type of access other threads have to the file.</param>
            <returns>A <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Open(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.FileMode)">
            <summary>)(Transacted) Opens a <see cref="T:System.IO.FileStream"/> on the specified path with read/write access.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten.</param>
            <returns>A <see cref="T:System.IO.FileStream"/> opened in the specified mode and path, with read/write access and not shared.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Open(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>Opens a <see cref="T:System.IO.FileStream"/> on the specified path, with the specified mode and access.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten.</param>
            <param name="access">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the file.</param>
            <returns>An unshared <see cref="T:System.IO.FileStream"/> that provides access to the specified file, with the specified mode and access.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Open(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>Opens a <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten.</param>
            <param name="access">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the file.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> value specifying the type of access other threads have to the file.</param>
            <returns>A <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenRead(System.String)">
            <summary>Opens an existing file for reading.</summary>
            <param name="path">The file to be opened for reading.</param>
            <returns>A read-only <see cref="T:System.IO.FileStream"/> on the specified path.</returns>
            <remarks>This method is equivalent to the FileStream(string, FileMode, FileAccess, FileShare) constructor overload with a <see cref="T:System.IO.FileMode"/> value of Open, a <see cref="T:System.IO.FileAccess"/> value of Read and a <see cref="T:System.IO.FileShare"/> value of Read.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenRead(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Opens an existing file for reading.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to be opened for reading.</param>
            <returns>A read-only <see cref="T:System.IO.FileStream"/> on the specified path.</returns>
            <remarks>This method is equivalent to the FileStream(string, FileMode, FileAccess, FileShare) constructor overload with a <see cref="T:System.IO.FileMode"/> value of Open, a <see cref="T:System.IO.FileAccess"/> value of Read and a <see cref="T:System.IO.FileShare"/> value of Read.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenText(System.String)">
            <summary>Opens an existing <see cref="F:Alphaleonis.Win32.Filesystem.NativeMethods.DefaultFileEncoding"/> encoded text file for reading.</summary>
            <param name="path">The file to be opened for reading.</param>
            <returns>A <see cref="T:System.IO.StreamReader"/> on the specified path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenText(System.String,System.Text.Encoding)">
            <summary>Opens an existing <see cref="T:System.Text.Encoding"/> encoded text file for reading.</summary>
            <param name="path">The file to be opened for reading.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> applied to the contents of the file.</param>
            <returns>A <see cref="T:System.IO.StreamReader"/> on the specified path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenText(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Opens an existing <see cref="F:Alphaleonis.Win32.Filesystem.NativeMethods.DefaultFileEncoding"/> encoded text file for reading.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to be opened for reading.</param>
            <returns>A <see cref="T:System.IO.StreamReader"/> on the specified path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenText(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Text.Encoding)">
            <summary>Opens an existing <see cref="T:System.Text.Encoding"/> encoded text file for reading.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to be opened for reading.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> applied to the contents of the file.</param>
            <returns>A <see cref="T:System.IO.StreamReader"/> on the specified path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenWrite(System.String)">
            <summary>Opens an existing file or creates a new file for writing.</summary>
            <param name="path">The file to be opened for writing.</param>
            <returns>An unshared <see cref="T:System.IO.FileStream"/> object on the specified path with <see cref="F:System.IO.FileAccess.Write"/> access.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenWrite(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Opens an existing file or creates a new file for writing.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to be opened for writing.</param>
            <returns>An unshared <see cref="T:System.IO.FileStream"/> object on the specified path with <see cref="F:System.IO.FileAccess.Write"/> access.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadAllBytes(System.String)">
            <summary>Opens a binary file, reads the contents of the file into a byte array, and then closes the file.</summary>
            <param name="path">The file to open for reading.</param>
            <returns>A byte array containing the contents of the file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadAllBytes(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Opens a binary file, reads the contents of the file into a byte array, and then closes the file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open for reading.</param>
            <returns>A byte array containing the contents of the file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadAllLines(System.String)">
            <summary>Opens a text file, reads all lines of the file, and then closes the file.</summary>
            <param name="path">The file to open for reading.</param>
            <returns>A string array containing all lines of the file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadAllLines(System.String,System.Text.Encoding)">
            <summary>Opens a file, reads all lines of the file with the specified encoding, and then closes the file.</summary>
            <param name="path">The file to open for reading.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> applied to the contents of the file.</param>
            <returns>A string array containing all lines of the file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadAllLines(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Opens a text file, reads all lines of the file, and then closes the file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open for reading.</param>
            <returns>A string array containing all lines of the file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadAllLines(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Text.Encoding)">
            <summary>Opens a text file, reads all lines of the file, and then closes the file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open for reading.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> applied to the contents of the file.</param>
            <returns>A string array containing all lines of the file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadAllText(System.String)">
            <summary>Opens a text file, reads all lines of the file, and then closes the file.</summary>
            <param name="path">The file to open for reading.</param>
            <returns>A string containing all lines of the file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadAllText(System.String,System.Text.Encoding)">
            <summary>Opens a file, reads all lines of the file with the specified encoding, and then closes the file.</summary>
            <param name="path">The file to open for reading.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> applied to the contents of the file.</param>
            <returns>A string containing all lines of the file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadAllText(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Opens a text file, reads all lines of the file, and then closes the file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open for reading.</param>
            <returns>A string containing all lines of the file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadAllText(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Text.Encoding)">
            <summary>Opens a text file, reads all lines of the file, and then closes the file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open for reading.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> applied to the contents of the file.</param>
            <returns>A string containing all lines of the file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Replace(System.String,System.String,System.String)">
            <summary>Replaces one file with another file, with the option of creating a backup copy of the original file. The replacement file assumes the name of the replaced file and its identity.</summary>
            <param name="sourceFileName">The name of a file that replaces the file specified by <paramref name="destFileName"/>.</param>
            <param name="destFileName">The name of the file being replaced.</param>
            <param name="destinationBackupPath">The name of the backup file.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Replace(System.String,System.String,System.String,System.Boolean)">
            <summary>Replaces one file with another file, with the option of creating a backup copy of the original file. The replacement file assumes the name of the replaced file and its identity.</summary>
            <param name="sourceFileName">The name of a file that replaces the file specified by <paramref name="destFileName"/>.</param>
            <param name="destFileName">The name of the file being replaced.</param>
            <param name="destinationBackupPath">The name of the backup file.</param>
            <param name="ignoreMetadataErrors">set to <c>true</c> to ignore merge errors (such as attributes and access control lists (ACLs)) from the replaced file to the replacement file; otherwise, <c>false</c>.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetAccessControl(System.String,System.Security.AccessControl.FileSecurity)">
            <summary>Applies access control list (ACL) entries described by a <see cref="T:System.Security.AccessControl.FileSecurity"/> FileSecurity object to the specified file.</summary>
            <param name="path">A file to add or remove access control list (ACL) entries from.</param>
            <param name="fileSecurity">A  <see cref="T:System.Security.AccessControl.FileSecurity"/> object that describes an ACL entry to apply to the file described by the <paramref name="path"/> parameter.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetAccessControl(System.String,System.Security.AccessControl.FileSecurity,System.Security.AccessControl.AccessControlSections)">
            <summary>Applies access control list (ACL) entries described by a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object to the specified directory.</summary>
            <param name="path">A directory to add or remove access control list (ACL) entries from.</param>
            <param name="fileSecurity">A <see cref="T:System.Security.AccessControl.FileSecurity"/> object that describes an ACL entry to apply to the directory described by the path parameter.</param>
            <param name="includeSections">One or more of the <see cref="T:System.Security.AccessControl.AccessControlSections"/> values that specifies the type of access control list (ACL) information to set.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>Sets the attributes for a file.</summary>
            <param name="path">The name of the file whose attributes are to be set.</param>
            <param name="fileAttributes">The file attributes to set for the file. Note that all other values override <see cref="F:System.IO.FileAttributes.Normal"/>.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetAttributes(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.FileAttributes)">
            <summary>Sets the attributes for a file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The name of the file whose attributes are to be set.</param>
            <param name="fileAttributes">The file attributes to set for the file. Note that all other values override <see cref="F:System.IO.FileAttributes.Normal"/>.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetCreationTime(System.String,System.DateTime)">
            <summary>Sets the date and time the file was created.</summary>
            <param name="path">The file for which to set the creation date and time information.</param>
            <param name="creationTime">A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value is expressed in local time.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetCreationTime(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime)">
            <summary>Sets the date and time the file was created.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to set the creation date and time information.</param>
            <param name="creationTime">A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value is expressed in local time.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetCreationTimeUtc(System.String,System.DateTime)">
            <summary>Sets the date and time, in coordinated universal time (UTC), that the file was created.</summary>
            <param name="path">The file for which to set the creation date and time information.</param>
            <param name="creationTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetCreationTimeUtc(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime)">
            <summary>Sets the date and time, in coordinated universal time (UTC), that the file was created.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to set the creation date and time information.</param>
            <param name="creationTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetLastAccessTime(System.String,System.DateTime)">
            <summary>Sets the date and time that the specified file was last accessed.</summary>
            <param name="path">The file for which to set the access date and time information.</param>
            <param name="lastAccessTime">A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This value is expressed in local time.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetLastAccessTime(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime)">
            <summary>Sets the date and time that the specified file was last accessed.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to set the access date and time information.</param>
            <param name="lastAccessTime">A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This value is expressed in local time.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <summary>Sets the date and time, in coordinated universal time (UTC), that the specified file was last accessed.</summary>
            <param name="path">The file for which to set the access date and time information.</param>
            <param name="lastAccessTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetLastAccessTimeUtc(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime)">
            <summary>Sets the date and time, in coordinated universal time (UTC), that the specified file was last accessed.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to set the access date and time information.</param>
            <param name="lastAccessTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetLastWriteTime(System.String,System.DateTime)">
            <summary>Sets the date and time that the specified file was last written to.</summary>
            <param name="path">The file for which to set the date and time information.</param>
            <param name="lastWriteTime">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value is expressed in local time.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetLastWriteTime(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime)">
            <summary>Sets the date and time that the specified file was last written to.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to set the date and time information.</param>
            <param name="lastWriteTime">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value is expressed in local time.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>Sets the date and time, in coordinated universal time (UTC), that the specified file was last written to.</summary>
            <param name="path">The file for which to set the date and time information.</param>
            <param name="lastWriteTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetLastWriteTimeUtc(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime)">
            <summary>Sets the date and time, in coordinated universal time (UTC), that the specified file was last written to.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to set the date and time information.</param>
            <param name="lastWriteTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllBytes(System.String,System.Byte[])">
            <summary>Creates a new file, writes the specified byte array to the file, and then closes the file. If the target file already exists, it is overwritten.</summary>
            <param name="path">The file to write to.</param>
            <param name="bytes">The bytes to write to the file.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllBytes(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Byte[])">
            <summary>
            Creates a new file as part of a transaction, writes the specified byte array to the file, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to write to.</param>
            <param name="bytes">The bytes to write to the file.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Creates a new file, writes a collection of strings to the file, and then closes the file.</summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The lines to write to the file.</param>
            <remarks>The default behavior of the method is to write out data by using UTF-8 encoding without a byte order mark (BOM).</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllLines(System.String,System.String[])">
            <summary>Creates a new file by using the specified encoding, writes a collection of strings to the file, and then closes the file.</summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The string array to write to the file.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>Creates a new file by using the specified encoding, writes a collection of strings to the file, and then closes the file.</summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The lines to write to the file.</param>
            <param name="encoding">The character <see cref="T:System.Text.Encoding"/> to use.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllLines(System.String,System.String[],System.Text.Encoding)">
            <summary>Creates a new file by using the specified encoding, writes a collection of strings to the file, and then closes the file.</summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The string array to write to the file.</param>
            <param name="encoding">The character <see cref="T:System.Text.Encoding"/> to use.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllLines(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Creates a new file, writes a collection of strings to the file, and then closes the file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to write to.</param>
            <param name="contents">The lines to write to the file.</param>
            <remarks>The default behavior of the method is to write out data by using UTF-8 encoding without a byte order mark (BOM).</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllLines(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String[])">
            <summary>Creates a new file, writes a collection of strings to the file, and then closes the file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to write to.</param>
            <param name="contents">The string array to write to the file.</param>
            <remarks>The default behavior of the method is to write out data by using UTF-8 encoding without a byte order mark (BOM).</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllLines(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>Creates a new file by using the specified encoding, writes a collection of strings to the file, and then closes the file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to write to.</param>
            <param name="contents">The lines to write to the file.</param>
            <param name="encoding">The character <see cref="T:System.Text.Encoding"/> to use.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllLines(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String[],System.Text.Encoding)">
            <summary>Creates a new file by using the specified encoding, writes a collection of strings to the file, and then closes the file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to write to.</param>
            <param name="contents">The string array to write to the file.</param>
            <param name="encoding">The character <see cref="T:System.Text.Encoding"/> to use.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllText(System.String,System.String)">
            <summary>Creates a new file, writes the specified string to the file, and then closes the file.
            If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The string to write to the file.</param>
            <remarks>This method uses UTF-8 encoding without a Byte-Order Mark (BOM)</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllText(System.String,System.String,System.Text.Encoding)">
            <summary>Creates a new file, writes the specified string to the file using the specified encoding, and then closes the file.
            If the target file already exists, it is overwritten.</summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The string to write to the file.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> applied to the contents of the file.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllText(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>Creates a new file as part of a transaction, write the contents to the file, and then closes the file.
            If the target file already exists, it is overwritten.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to write to.</param>
            <param name="contents">The string to write to the file.</param>
            <remarks>This method uses UTF-8 encoding without a Byte-Order Mark (BOM)</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllText(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.Text.Encoding)">
            <summary>Creates a new file as part of a transaction, writes the specified string to the file using the specified encoding, and then closes the file.
            If the target file already exists, it is overwritten.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to write to.</param>
            <param name="contents">The string to write to the file.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> applied to the contents of the file.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Compress(System.String)">
            <summary>Compresses a file using NTFS compression.</summary>
            <param name="path">A path that describes a file to compress.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Compress(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Compresses a file using NTFS compression.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A path that describes a file to compress.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CreateHardlink(System.String,System.String)">
            <summary>Establishes a hard link between an existing file and a new file. This function is only supported on the NTFS file system, and only for files, not directories.</summary>
            <param name="fileName">The name of the new file. This parameter cannot specify the name of a directory.</param>
            <param name="existingFileName">The name of the existing file. This parameter cannot specify the name of a directory.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CreateHardlink(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>Establishes a hard link between an existing file and a new file. This function is only supported on the NTFS file system, and only for files, not directories.</summary>
            <param name="transaction">The transaction.</param>
            <param name="fileName">The name of the new file. This parameter cannot specify the name of a directory.</param>
            <param name="existingFileName">The name of the existing file. This parameter cannot specify the name of a directory.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CreateSymbolicLink(System.String,System.String,Alphaleonis.Win32.Filesystem.SymbolicLinkTarget)">
            <summary>Creates a symbolic link.</summary>
            <param name="sourceFileName">The name of the target for the symbolic link to be created.</param>
            <param name="destFileName">The symbolic link to be created.</param>
            <param name="targetType">Indicates whether the link target, <paramref name="destFileName"/>, is a file or directory.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CreateSymbolicLink(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.SymbolicLinkTarget)">
            <summary>Creates a symbolic link.</summary>
            <param name="transaction">The transaction.</param>
            <param name="sourceFileName">The name of the target for the symbolic link to be created.</param>
            <param name="destFileName">The symbolic link to be created.</param>
            <param name="targetType">Indicates whether the link target, <paramref name="destFileName"/>, is a file or directory.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Decompress(System.String)">
            <summary>Decompresses an NTFS compressed file.</summary>
            <param name="path">A path that describes a file to decompress.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Decompress(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Decompresses an NTFS compressed file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A path that describes a file to decompress.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.EnumerateStreams(System.String)">
            <summary>Returns <see cref="T:Alphaleonis.Win32.Filesystem.BackupStreamInfo"/> instances, associated with the file.</summary>
            <param name="path">A path that describes a file.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection of streams for the file specified by path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.EnumerateStreams(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Returns <see cref="T:Alphaleonis.Win32.Filesystem.BackupStreamInfo"/> instances, associated with the file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A path that describes a file.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection of streams for the file specified by path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.EnumerateStreams(Microsoft.Win32.SafeHandles.SafeFileHandle)">
            <summary>Returns <see cref="T:Alphaleonis.Win32.Filesystem.BackupStreamInfo"/> instances, associated with the file.</summary>
            <param name="handle">A <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle"/> connected to the open file from which to retrieve the information.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection of streams for the file specified by path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetCompressedSize(System.String)">
            <summary>Retrieves the actual number of bytes of disk storage used to store a specified file.</summary>
            <remarks>
            If the file is located on a volume that
            supports compression and the file is compressed, the value obtained is the compressed size of the specified file.
            If the file is located on a volume that supports sparse files and the file is a sparse file, the value obtained is the sparse
            size of the specified file.
            </remarks>
            <param name="path"><para>The name of the file.</para></param>
            <returns>The actual number of bytes of disk storage used to store the specified file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetCompressedSize(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Retrieves the actual number of bytes of disk storage used to store a specified file as part of a transaction.
            If the file is located on a volume that supports compression and the file is compressed, the value obtained is the compressed size of the specified file.
            If the file is located on a volume that supports sparse files and the file is a sparse file, the value obtained is the sparse
            size of the specified file.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path"><para>The name of the file.</para></param>
            <returns>The actual number of bytes of disk storage used to store the specified file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetEncryptionStatus(System.String)">
            <summary>Retrieves the encryption status of the specified file.</summary>
            <param name="path">The name of the file.</param>
            <returns>The <see cref="T:Alphaleonis.Win32.Filesystem.FileEncryptionStatus"/> of the specified <paramref name="path"/>.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetFileInformationByHandle(System.IO.FileStream)">
            <summary>Retrieves file information for the specified <see cref="T:System.IO.FileStream"/>.</summary>
            <param name="stream">A <see cref="T:System.IO.FileStream"/> connected to the open file from which to retrieve the information.</param>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.ByHandleFileInformation"/> object containing the requested information.</returns>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"></exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetFileInformationByHandle(Microsoft.Win32.SafeHandles.SafeFileHandle)">
            <summary>Retrieves file information for the specified <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle"/>.</summary>
            <param name="safeFile">A <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle"/> connected to the open file from which to retrieve the information.</param>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.ByHandleFileInformation"/> object containing the requested information.</returns>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"></exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetFileSystemEntryInfo(System.String)">
            <summary>Gets the <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> of the file on the path.</summary>
            <param name="path">The path to the file.</param>
            <returns>The <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> instance of the file on the path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetFileSystemEntryInfo(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Gets the <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> of the file on the path.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path to the file.</param>
            <returns>The <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> instance of the file on the path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetFileType(System.IO.FileStream)">
            <summary>Retrieves the file type of the specified stream.</summary>
            <param name="stream">A <see cref="T:System.IO.FileStream"/> connected to the open file from which to retrieve the information.</param>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.FileTypes"/> enum object.</returns>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetFileType(System.String)">
            <summary>Retrieves information about an object in the file system, such as a file, folder, directory, or drive root.</summary>
            <param name="path">The path to the file system object which should not exceed <see cref="F:Alphaleonis.Win32.Filesystem.NativeMethods.MaxPath"/>. Both absolute and relative paths are valid.</param>
            <returns>A string that describes the type of file, or null in case of failure or when type is unknown.</returns>
            <remarks>This method calls <see cref="M:Alphaleonis.Win32.Filesystem.Shell32.GetFileType(System.String)"/></remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetHardlinks(System.String)">
            <summary>Creates an enumeration of all the hard links to the specified <paramref name="path"/>.</summary>
            <param name="path">The name of the file.</param>
            <returns>An enumeration of all the hard links to the specified <paramref name="path"/></returns>
            <remarks><b>Required Windows Vista or later.</b></remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetHardlinks(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Creates an enumeration of all the hard links to the specified <paramref name="path"/>.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The name of the file.</param>
            <returns>An enumeration of all the hard links to the specified <paramref name="path"/></returns>
            <remarks><b>Required Windows Vista or later.</b></remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetLinkTargetInfo(System.String)">
            <summary>Gets information about the target of a mount point or symbolic link on an NTFS file system.</summary>
            <param name="sourceFileName">The path to the reparse point.</param>
            <returns>An instance of <see cref="T:Alphaleonis.Win32.Filesystem.LinkTargetInfo"/> or <see cref="T:Alphaleonis.Win32.Filesystem.SymbolicLinkTargetInfo"/> containing
            information about the symbolic link or mount point pointed to by <paramref name="sourceFileName"/>.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetLinkTargetInfo(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Gets information about the target of a mount point or symbolic link on an NTFS file system.</summary>
            <param name="transaction">The transaction.</param>
            <param name="sourceFileName">The path to the reparse point.</param>
            <returns>An instance of <see cref="T:Alphaleonis.Win32.Filesystem.LinkTargetInfo"/> or <see cref="T:Alphaleonis.Win32.Filesystem.SymbolicLinkTargetInfo"/> containing
            information about the symbolic link or mount point pointed to by <paramref name="sourceFileName"/>.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetSize(System.String)">
            <summary>Retrieves the file size, in bytes to store a specified file.</summary>
            <param name="path">The path to the file.</param>
            <returns>The file size, in bytes.</returns>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetSize(Microsoft.Win32.SafeHandles.SafeFileHandle)">
            <summary>Retrieves the file size, in bytes to store a specified file.</summary>
            <param name="handle">The <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle"/> to the file.</param>
            <returns>The file size, in bytes.</returns>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetSize(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Retrieves the file size, in bytes to store a specified file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path to the file.</param>
            <returns>The number of bytes of disk storage used to store the specified file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetStreamsSize(System.String)">
            <summary>Retrieves the actual number of bytes of disk storage used by alternate data streams (NTFS ADS).</summary>
            <param name="path">A path that describes a file.</param>
            <remarks>Use <see cref="P:Alphaleonis.Win32.Filesystem.FileInfo.Length"/> + <see cref="P:Alphaleonis.Win32.Filesystem.FileInfo.LengthStreams"/> = more accurate file size.</remarks>
            <returns>The size of the actual number of bytes used by file streams, other then the default stream.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetStreamsSize(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Retrieves the actual number of bytes of disk storage used by alternate data streams (NTFS ADS).</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A path that describes a file.</param>
            <remarks>Use <see cref="P:Alphaleonis.Win32.Filesystem.FileInfo.Length"/> + <see cref="P:Alphaleonis.Win32.Filesystem.FileInfo.LengthStreams"/> = more accurate file size.</remarks>
            <returns>The size of the actual number of bytes used by file streams, other then the default stream.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetTimestamps(System.String,System.DateTime,System.DateTime,System.DateTime)">
            <summary>Sets all the date and time stamps for the specified file, at once.</summary>
            <param name="path">The file for which to set the dates and times information.</param>
            <param name="creationTime">A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value is expressed in local time.</param>
            <param name="lastAccessTime">A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This value is expressed in local time.</param>
            <param name="lastWriteTime">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value is expressed in local time.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetTimestamps(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime,System.DateTime,System.DateTime)">
            <summary>Sets all the date and time stamps for the specified file, at once.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to set the dates and times information.</param>
            <param name="creationTime">A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value is expressed in local time.</param>
            <param name="lastAccessTime">A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This value is expressed in local time.</param>
            <param name="lastWriteTime">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value is expressed in local time.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetTimestampsUtc(System.String,System.DateTime,System.DateTime,System.DateTime)">
            <summary>Sets all the date and time stamps, in coordinated universal time (UTC), for the specified file, at once.</summary>
            <param name="path">The file for which to set the dates and times information.</param>
            <param name="creationTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
            <param name="lastAccessTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
            <param name="lastWriteTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetTimestampsUtc(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime,System.DateTime,System.DateTime)">
            <summary>Sets all the date and time stamps, in coordinated universal time (UTC), for the specified file, at once.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to set the dates and times information.</param>
            <param name="creationTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
            <param name="lastAccessTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
            <param name="lastWriteTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.TransferTimestamps(System.String,System.String)">
            <summary>Transfers the date and time stamps for the specified files.</summary>
            <param name="source">The source file to get the date and time stamps from.</param>
            <param name="destination">The destination file to set the date and time stamps.</param>
            <remarks>This method does not change last access time for the source file.</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.TransferTimestamps(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>Transfers the date and time stamps for the specified files.</summary>
            <param name="transaction">The transaction.</param>
            <param name="source">The source file to get the date and time stamps from.</param>
            <param name="destination">The destination file to set the date and time stamps.</param>
            <remarks>This method does not change last access time for the source file.</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.AppendTextInternal(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Text.Encoding)">
            <summary>Unified method AppendTextInternal() to create a <see cref="T:System.IO.StreamWriter"/> that appends <see cref="F:Alphaleonis.Win32.Filesystem.NativeMethods.DefaultFileEncoding"/> encoded text to an existing file, or to a new file if the specified file does not exist.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path to the file to append to.</param>
            <returns>A stream writer that appends <see cref="F:Alphaleonis.Win32.Filesystem.NativeMethods.DefaultFileEncoding"/> encoded text to the specified file or to a new file.</returns>
            <param name="encoding">The character <see cref="T:System.Text.Encoding"/> to use.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CopyMoveInternal(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.Boolean,System.Nullable{Alphaleonis.Win32.Filesystem.CopyOptions},System.Nullable{Alphaleonis.Win32.Filesystem.MoveOptions},Alphaleonis.Win32.Filesystem.CopyProgressRoutine,System.Object)">
            <summary>Unified method CopyMoveInternal() to copy/move a Non-/Transacted file or directory including its children.
            You can provide a callback function that receives progress notifications.</summary>
            <param name="transaction">The transaction.</param>
            <param name="sourceFileName">The source directory path.</param>
            <param name="destFileName">The destination directory path.</param>
            <param name="preserveDates"><c>true</c> if original Timestamps must be preserved, otherwise <c>false</c>. This parameter is ignored for move operations.</param>
            <param name="copyOptions"><see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> that specify how the file is to be copied. This parameter can be <see langword="null"/>.</param>
            <param name="moveOptions">Flags that specify how the file is to be move. This parameter can be <see langword="null"/>.</param>
            <param name="copyProgress">A callback function that is called each time another portion of the file has been copied. This parameter can be <see langword="null"/>.</param>
            <param name="userProgressData">The argument to be passed to the callback function. This parameter can be <see langword="null"/>.</param>
            <remarks>This Move method works across disk volumes, and it does not throw an exception if the source and destination are
            the same. Note that if you attempt to replace a file by moving a file of the same name into that directory, you
            get an IOException. You cannot use the Move method to overwrite an existing file.</remarks>
            <returns><c>true</c> when successfully copied or moved, <c>false</c> on failure or the operation was aborted.</returns>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CreateFileInternal(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Int32,Alphaleonis.Win32.Filesystem.EFileAttributes,System.Security.AccessControl.FileSecurity,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>Unified method CreateFileInternal() to create or overwrite a file in the specified path, specifying a buffer size and advanced options:
            <see cref="T:Alphaleonis.Win32.Filesystem.EFileAttributes"/>, <see cref="T:System.Security.AccessControl.FileSecurity"/>, <see cref="T:System.IO.FileMode"/>, <see cref="T:System.IO.FileAccess"/>, <see cref="T:System.IO.FileShare"/>.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The name of the file.</param>
            <param name="bufferSize">The number of bytes buffered for reads and writes to the file.</param>
            <param name="attributes">The <see cref="T:Alphaleonis.Win32.Filesystem.EFileAttributes"/> additional advanced options to create a file.</param>
            <param name="fileSecurity">A <see cref="T:System.Security.AccessControl.FileSecurity"/> instance that determines the access control and audit security for the file.</param>
            <param name="mode">The <see cref="T:System.IO.FileMode"/> option gives you more precise control over how you want to create a file.</param>
            <param name="access">The <see cref="T:System.IO.FileAccess"/> allow you additionaly specify to default redwrite capability - just write, bypassing any cache.</param>
            <param name="share">The <see cref="T:System.IO.FileShare"/> option controls how you would like to share created file with other requesters.</param>
            <returns>A <see cref="T:System.IO.FileStream"/> that provides read/write access to the file specified in path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CreateHardlinkInternal(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>Unified method CreateHardlinkInternal() to establishe a hard link between an existing file and a new file. This function is only supported on the NTFS file system, and only for files, not directories.</summary>
            <param name="transaction">The transaction.</param>
            <param name="fileName">The name of the new file. This parameter cannot specify the name of a directory.</param>
            <param name="existingFileName">The name of the existing file. This parameter cannot specify the name of a directory.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CreateSymbolicLinkInternal(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.SymbolicLinkTarget)">
            <summary>Unified method CreateSymbolicLinkInternal() to create a symbolic link.</summary>
            <param name="transaction">The transaction.</param>
            <param name="sourceFileName">The name of the target for the symbolic link to be created.</param>
            <param name="destFileName">The symbolic link to be created.</param>
            <param name="targetType">Indicates whether the link target, <paramref name="destFileName"/>, is a file or directory.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CreateTextInternal(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Text.Encoding)">
            <summary>Unified method CreateTextInternal() to create or open a file for writing <see cref="T:System.Text.Encoding"/> encoded text.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to be opened for writing.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> applied to the contents of the file.</param>
            <returns>A <see cref="T:System.IO.StreamWriter"/> that writes to the specified file using <see cref="F:Alphaleonis.Win32.Filesystem.NativeMethods.DefaultFileBufferSize"/> encoding.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.DeleteFileInternal(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Boolean)">
            <summary>Unified method DeleteFileInternal() to delete a Non-/Transacted file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The name of the file to be deleted.</param>
            <param name="ignoreReadOnly">If set to <c>true</c> overrides the read only <see cref="T:System.IO.FileAttributes"/> of the file.</param>
            <remarks>If the file to be deleted does not exist, no exception is thrown.</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetCompressedSizeInternal(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Unified method GetCompressedSizeInternal() to retrieve the actual number of bytes of disk storage used to store a specified file as part of a transaction.
            If the file is located on a volume that supports compression and the file is compressed, the value obtained is the compressed size of the specified file.
            If the file is located on a volume that supports sparse files and the file is a sparse file, the value obtained is the sparse
            size of the specified file.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path"><para>The name of the file.</para></param>
            <returns>The actual number of bytes of disk storage used to store the specified file.</returns>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenInternal(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileAccess,System.IO.FileShare,Alphaleonis.Win32.Filesystem.EFileAttributes)">
            <summary>Unified method OpenInternal() to opens a <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write,
            or read/write access, the specified sharing option and additional options specified.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten.</param>
            <param name="rights">A <see cref="T:System.Security.AccessControl.FileSystemRights"/> value that specifies whether a file is created if one does not exist,
            and determines whether the contents of existing files are retained or overwritten along with additional options.</param>
            <param name="access">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the file.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> value specifying the type of access other threads have to the file.</param>
            <param name="attributes">Advanced <see cref="T:Alphaleonis.Win32.Filesystem.EFileAttributes"/> options for this file.</param>
            <returns>A <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadAllBytesInternal(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Unified method ReadAllBytesInternal() to open a binary file, reads the contents of the file into a byte array, and then closes the file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open for reading.</param>
            <returns>A byte array containing the contents of the file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadAllLinesInternal(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Text.Encoding)">
            <summary>Unified method ReadAllLinesInternal() to open a file, read all lines of the file, and then close the file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open for reading.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> applied to the contents of the file.</param>
            <returns>An IEnumerable string containing all lines of the file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadAllTextInternal(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Text.Encoding)">
            <summary>Unified method ReadAllTextInternal() to open a file, read all lines of the file, and then close the file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open for reading.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> applied to the contents of the file.</param>
            <returns>A string containing all lines of the file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReplaceInternal(System.String,System.String,System.String,System.Boolean)">
            <summary>Unified method ReplaceInternal() to replace one file with another file, with the option of creating a backup copy of the original file. The replacement file assumes the name of the replaced file and its identity.</summary>
            <param name="sourceFileName">The name of a file that replaces the file specified by <paramref name="destFileName"/>.</param>
            <param name="destFileName">The name of the file being replaced.</param>
            <param name="destinationBackupPath">The name of the backup file.</param>
            <param name="ignoreMetadataErrors">set to <c>true</c> to ignore merge errors (such as attributes and access control lists (ACLs)) from the replaced file to the replacement file; otherwise, <c>false</c>.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllBytesInternal(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Byte[])">
            <summary>Unified method WriteAllBytesInternal() to create a new file as part of a transaction, writes the specified byte array to the file, and then closes the file. If the target file already exists, it is overwritten.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to write to.</param>
            <param name="bytes">The bytes to write to the file.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAppendAllLinesInternal(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding,System.Boolean,System.Boolean)">
            <summary>Unified method WriteAppendAllLinesInternal() to create/append a new file by using the specified encoding, writes a collection of strings to the file, and then closes the file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to write to.</param>
            <param name="contents">The lines to write to the file.</param>
            <param name="encoding">The character <see cref="T:System.Text.Encoding"/> to use.</param>
            <param name="isAppend"><c>true</c> for file Append, <c>false</c> for file Write.</param>
            <param name="addNewLine"><c>true</c> to a line terminator, <c>false</c> to ommit the line terminator.</param>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.BackupFileStream">
            <summary>The <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> provides access to data associated with a specific file or directory, including security information and alternative data streams, for backup and restore operations.</summary>
            <remarks>This class uses the <see href="http://msdn.microsoft.com/en-us/library/aa362509(VS.85).aspx">BackupRead</see>, 
            <see href="http://msdn.microsoft.com/en-us/library/aa362510(VS.85).aspx">BackupSeek</see> and 
            <see href="http://msdn.microsoft.com/en-us/library/aa362511(VS.85).aspx">BackupWrite</see> functions from the Win32 API to provide access to the file or directory.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.#ctor(System.String,System.IO.FileMode)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> class with the specified path and creation mode.</summary>
            <param name="path">A relative or absolute path for the file that the current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object will encapsulate.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> constant that determines how to open or create the file. </param>
            <remarks>The file will be opened for exclusive access for both reading and writing.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> class with the specified path, creation mode and access rights.</summary>
            <param name="path">A relative or absolute path for the file that the current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object will encapsulate.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> constant that determines how to open or create the file. </param>
            <param name="access">A <see cref="T:System.Security.AccessControl.FileSystemRights"/> constant that determines the access rights to use when creating access and audit rules for the file.</param>
            <remarks>The file will be opened for exclusive access.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> class with the specified path, creation mode, access rights and sharing permission.</summary>
            <param name="path">A relative or absolute path for the file that the current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object will encapsulate.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> constant that determines how to open or create the file. </param>
            <param name="access">A <see cref="T:System.Security.AccessControl.FileSystemRights"/> constant that determines the access rights to use when creating access and audit rules for the file.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> constant that determines how the file will be shared by processes. </param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,Alphaleonis.Win32.Filesystem.EFileAttributes)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> class with the specified path, creation mode, access rights and sharing permission, and additional file attributes.</summary>
            <param name="path">A relative or absolute path for the file that the current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object will encapsulate.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> constant that determines how to open or create the file.</param>
            <param name="access">A <see cref="T:System.Security.AccessControl.FileSystemRights"/> constant that determines the access rights to use when creating access and audit rules for the file.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> constant that determines how the file will be shared by processes.</param>
            <param name="attributes">A <see cref="T:Alphaleonis.Win32.Filesystem.EFileAttributes"/> constant that specifies additional file attributes.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,Alphaleonis.Win32.Filesystem.EFileAttributes,System.Security.AccessControl.FileSecurity)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> class with the specified path, creation mode, access rights and sharing permission, additional file attributes, access control and audit security.</summary>
            <param name="path">A relative or absolute path for the file that the current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object will encapsulate.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> constant that determines how to open or create the file.</param>
            <param name="access">A <see cref="T:System.Security.AccessControl.FileSystemRights"/> constant that determines the access rights to use when creating access and audit rules for the file.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> constant that determines how the file will be shared by processes.</param>
            <param name="attributes">A <see cref="T:Alphaleonis.Win32.Filesystem.EFileAttributes"/> constant that specifies additional file attributes.</param>
            <param name="security">A <see cref="T:System.Security.AccessControl.FileSecurity"/> constant that determines the access control and audit security for the file. This parameter may be <see langword="null"/>.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.#ctor(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.FileMode)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> class with the specified path and creation mode.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A relative or absolute path for the file that the current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object will encapsulate.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> constant that determines how to open or create the file.</param>
            <remarks>The file will be opened for exclusive access for both reading and writing.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.#ctor(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> class with the specified path, creation mode and access rights.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A relative or absolute path for the file that the current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object will encapsulate.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> constant that determines how to open or create the file.</param>
            <param name="access">A <see cref="T:System.Security.AccessControl.FileSystemRights"/> constant that determines the access rights to use when creating access and audit rules for the file.</param>
            <remarks>The file will be opened for exclusive access.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.#ctor(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> class with the specified path, creation mode, access rights and sharing permission.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A relative or absolute path for the file that the current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object will encapsulate.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> constant that determines how to open or create the file.</param>
            <param name="access">A <see cref="T:System.Security.AccessControl.FileSystemRights"/> constant that determines the access rights to use when creating access and audit rules for the file.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> constant that determines how the file will be shared by processes.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.#ctor(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,Alphaleonis.Win32.Filesystem.EFileAttributes)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> class with the specified path, creation mode, access rights and sharing permission, and additional file attributes.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A relative or absolute path for the file that the current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object will encapsulate.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> constant that determines how to open or create the file.</param>
            <param name="access">A <see cref="T:System.Security.AccessControl.FileSystemRights"/> constant that determines the access rights to use when creating access and audit rules for the file.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> constant that determines how the file will be shared by processes.</param>
            <param name="attributes">A <see cref="T:Alphaleonis.Win32.Filesystem.EFileAttributes"/> constant that specifies additional file attributes.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.#ctor(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,Alphaleonis.Win32.Filesystem.EFileAttributes,System.Security.AccessControl.FileSecurity)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> class with the specified path, creation mode, access rights and sharing permission, additional file attributes, access control and audit security.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A relative or absolute path for the file that the current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object will encapsulate.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> constant that determines how to open or create the file.</param>
            <param name="access">A <see cref="T:System.Security.AccessControl.FileSystemRights"/> constant that determines the access rights to use when creating access and audit rules for the file.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> constant that determines how the file will be shared by processes.</param>
            <param name="attributes">A <see cref="T:Alphaleonis.Win32.Filesystem.EFileAttributes"/> constant that specifies additional file attributes.</param>
            <param name="security">A <see cref="T:System.Security.AccessControl.FileSecurity"/> constant that determines the access control and audit security for the file. This parameter may be <see langword="null"/>.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Security.AccessControl.FileSystemRights)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> class for the specified file handle, with the specified read/write permission.</summary>
            <param name="handle">A file handle for the file that this <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object will encapsulate. </param>
            <param name="access">A <see cref="T:System.Security.AccessControl.FileSystemRights"/> constant that gets the <see cref="P:Alphaleonis.Win32.Filesystem.BackupFileStream.CanRead"/> and <see cref="P:Alphaleonis.Win32.Filesystem.BackupFileStream.CanWrite"/> properties of the <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object. </param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.Finalize">
            <summary>Releases unmanaged resources and performs other cleanup operations before the <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> is reclaimed by garbage collection.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values
            between <paramref name="offset"/> and (<paramref name="offset"/> + <paramref name="count"/> - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not
            currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is larger than the buffer length. </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="buffer"/> is <see langword="null"/>. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> or <paramref name="count"/> is negative. </exception>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support reading. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
            <remarks>This method will not backup the access-control list (ACL) data for the file or directory.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.Read(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values
            between <paramref name="offset"/> and (<paramref name="offset"/> + <paramref name="count"/> - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <param name="processSecurity">Indicates whether the function will backup the access-control list (ACL) data for the file or directory. </param>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not
            currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is larger than the buffer length. </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="buffer"/> is <see langword="null"/>. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> or <paramref name="count"/> is negative. </exception>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support reading. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.</summary>
            <overloads>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </overloads>
            <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is greater than the buffer length. </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="buffer"/> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> or <paramref name="count"/> is negative. </exception>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
            <remarks>This method will not process the access-control list (ACL) data for the file or directory.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.Write(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.</summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <param name="processSecurity">Specifies whether the function will restore the access-control list (ACL) data for the file or directory. 
            If this is <c>true</c>, you need to specify <see cref="F:System.Security.AccessControl.FileSystemRights.TakeOwnership"/> and <see cref="F:System.Security.AccessControl.FileSystemRights.ChangePermissions"/> access when 
            opening the file or directory handle. If the handle does not have those access rights, the operating system denies 
            access to the ACL data, and ACL data restoration will not occur.</param>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is greater than the buffer length. </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="buffer"/> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="offset"/> or <paramref name="count"/> is negative. </exception>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.Flush">
            <summary>Clears all buffers for this stream and causes any buffered data to be written to the underlying device.</summary>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException">An I/O error occurs. </exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>When overridden in a derived class, sets the position within the current stream.</summary>
            <param name="offset">A byte offset relative to the <paramref name="origin"/> parameter.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position.</param>
            <returns>
            The new position within the current stream.
            </returns>
            <remarks>
                <para>
                    <note>
                        <para>
                            This stream does not support seeking using this method, and calling this method will always throw 
                            <see cref="T:System.NotSupportedException"/>. See <see cref="M:Alphaleonis.Win32.Filesystem.BackupFileStream.Skip(System.Int64)"/> for an alternative way of seeking forward.
                        </para>
                    </note>
                </para>
            </remarks>
            <exception cref="T:System.NotSupportedException">The stream does not support seeking.</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.SetLength(System.Int64)">
            <summary>When overridden in a derived class, sets the length of the current stream.</summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <remarks>This method is not supported by the <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> class, and calling it will always
            generate a <see cref="T:System.NotSupportedException"/>.</remarks>
            <exception cref="T:System.NotSupportedException">Always thrown by this class.</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.Skip(System.Int64)">
            <summary>Skips ahead the specified number of bytes from the current stream.</summary>
            <remarks>
            <para>
                This method represents the Win32 API implementation of <see href="http://msdn.microsoft.com/en-us/library/aa362509(VS.85).aspx">BackupSeek</see>.
            </para>
            <para>
            Applications use the <see cref="M:Alphaleonis.Win32.Filesystem.BackupFileStream.Skip(System.Int64)"/> method to skip portions of a data stream that cause errors. This function does not 
            seek across stream headers. For example, this function cannot be used to skip the stream name. If an application 
            attempts to seek past the end of a substream, the function fails, the return value indicates the actual number of bytes 
            the function seeks, and the file position is placed at the start of the next stream header.
            </para>
            </remarks>
            <param name="bytes">The number of bytes to skip.</param>
            <returns>The number of bytes actually skipped.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.GetAccessControl">
            <summary>Gets a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the access control list (ACL) entries for the file described by the current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object.</summary>
            <returns>A <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the access control list (ACL) entries for the file described by the current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object. </returns>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.SetAccessControl(System.Security.AccessControl.ObjectSecurity)">
            <summary>Applies access control list (ACL) entries described by a <see cref="T:System.Security.AccessControl.FileSecurity"/> object to the file described by the  current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object.</summary>
            <param name="fileSecurity">A <see cref="T:System.Security.AccessControl.FileSecurity"/> object that describes an ACL entry to apply to the current file.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.Lock(System.Int64,System.Int64)">
            <summary>Prevents other processes from changing the <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> while permitting read access.</summary>
            <param name="position">The beginning of the range to lock. The value of this parameter must be equal to or greater than zero (0).</param>
            <param name="length">The range to be locked. </param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position"/> or <paramref name="length"/> is negative.</exception>
            <exception cref="T:System.ObjectDisposedException">The file is closed.</exception>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException">The process cannot access the file because another process has locked a portion of the file. </exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.Unlock(System.Int64,System.Int64)">
            <summary>Allows access by other processes to all or part of a file that was previously locked.</summary>
            <param name="position">The beginning of the range to unlock.</param>
            <param name="length">The range to be unlocked.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position"/> or <paramref name="length"/> is negative.</exception>
            <exception cref="T:System.ObjectDisposedException">The file is closed.</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.EnumerateStreams">
            <summary>Returns <see cref="T:Alphaleonis.Win32.Filesystem.BackupStreamInfo"/> instances, associated with the file.</summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection of streams for the file specified by path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.ReadStreamInfo">
            <summary>Reads a stream header from the current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/>.</summary>
            <returns>The stream header read from the current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/>, or <see langword="null"/> if the end-of-file 
            was reached before the required number of bytes of a header could be read.</returns>
            <remarks>The stream must be positioned at where an actual header starts for the returned object to represent valid information.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.Dispose(System.Boolean)">
            <summary>Releases the unmanaged resources used by the <see cref="T:System.IO.Stream"/> and optionally releases the managed resources.</summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.BackupFileStream.CanRead">
            <summary>Gets a value indicating whether the current stream supports reading.</summary>
            <returns><c>true</c> if the stream supports reading, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.BackupFileStream.CanSeek">
            <summary>Gets a value indicating whether the current stream supports seeking.</summary>        
            <returns>This method always returns <c>false</c>.</returns>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.BackupFileStream.CanWrite">
            <summary>Gets a value indicating whether the current stream supports writing.</summary>
            <returns><c>true</c> if the stream supports writing, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.BackupFileStream.Length">
            <summary>When overridden in a derived class, gets the length in bytes of the stream.</summary>
            <value>This method always throws an exception.</value>
            <exception cref="T:System.NotSupportedException">This exception is always thrown if this property is accessed on a <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/>.</exception>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.BackupFileStream.Position">
            <summary>When overridden in a derived class, gets or sets the position within the current stream.</summary>
            <value>This method always throws an exception.</value>
            <exception cref="T:System.NotSupportedException">This exception is always thrown if this property is accessed on a <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/>.</exception>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.BackupFileStream.SafeFileHandle">
            <summary>Gets a <see cref="P:Alphaleonis.Win32.Filesystem.BackupFileStream.SafeFileHandle"/> object that represents the operating system file handle for the file that the current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object encapsulates.</summary>
            <value>A <see cref="P:Alphaleonis.Win32.Filesystem.BackupFileStream.SafeFileHandle"/> object that represents the operating system file handle for the file that 
            the current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object encapsulates.</value>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.FileEncryptionStatus">
            <summary>Represents the encryption status of the specified file.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileEncryptionStatus.Encryptable">
            <summary>The file can be encrypted.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileEncryptionStatus.Encrypted">
            <summary>The file is encrypted.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileEncryptionStatus.SystemFile">
            <summary>The file is a system file. System files cannot be encrypted.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileEncryptionStatus.RootDirectory">
            <summary>The file is a root directory. Root directories cannot be encrypted.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileEncryptionStatus.SystemDirectory">
            <summary>The file is a system directory. System directories cannot be encrypted.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileEncryptionStatus.Unknown">
            <summary>The encryption status is unknown. The file may be encrypted.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileEncryptionStatus.NoFilesystemSupport">
            <summary>The file system does not support file encryption.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileEncryptionStatus.UserDisallowed">
            <summary>Reserved for future use.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileEncryptionStatus.ReadOnly">
            <summary>The file is a read-only file.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.ByHandleFileInformation">
            <summary>BY_HANDLE_FILE_INFORMATION - Contains information that the GetFileInformationByHandle function retrieves.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.ByHandleFileInformation.Attributes">
            <summary>Gets the file attributes.</summary>
            <value>The file attributes.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.ByHandleFileInformation.CreationTime">
            <summary>Gets a <see cref="T:System.DateTime"/> structure that specifies when a file or directory was created.</summary>
            <value>A <see cref="T:System.DateTime"/> structure that specifies when a file or directory was created.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.ByHandleFileInformation.LastAccessTime">
            <summary>Gets a <see cref="T:System.DateTime"/> structure. 
            For a file, the structure specifies the last time that a file is read from or written to. 
            For a directory, the structure specifies when the directory is created. 
            For both files and directories, the specified date is correct, but the time of day is always set to midnight. 
            If the underlying file system does not support the last access time, this member is zero (0).
            </summary>
            <value>A <see cref="T:System.DateTime"/> structure that specifies when a file was last written to or the directory created.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.ByHandleFileInformation.LastWriteTime">
            <summary>Gets a <see cref="T:System.DateTime"/> structure. 
            For a file, the structure specifies the last time that a file is written to. 
            For a directory, the structure specifies when the directory is created. 
            If the underlying file system does not support the last access time, this member is zero (0).
            </summary>
            <value>A <see cref="T:System.DateTime"/> structure that specifies when a file was last written to or the directory created.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.ByHandleFileInformation.VolumeSerialNumber">
            <summary>Gets the the serial number of the volume that contains a file.</summary>
            <value>The serial number of the volume that contains a file.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.ByHandleFileInformation.FileSize">
            <summary>Gets the size of the file.</summary>
            <value>The size of the file.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.ByHandleFileInformation.NumberOfLinks">
            <summary>Gets the number of links to this file. For the FAT file system this member is always 1. For the NTFS file system, it can be more than 1.</summary>
            <value>The number of links to this file. </value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.ByHandleFileInformation.FileIndex">
            <summary>
            Gets the unique identifier associated with the file. The identifier and the volume serial number uniquely identify a 
            file on a single computer. To determine whether two open handles represent the same file, combine the identifier 
            and the volume serial number for each file and compare them.
            </summary>
            <value>The unique identifier of the file.</value>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo">
            <summary>FILE_ID_BOTH_DIR_INFO - Contains information about files in the specified directory. Used for directory handles.
            Use only when calling GetFileInformationByHandleEx.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo.AllocationSize">
            <summary>The number of bytes that are allocated for the file. This value is usually a multiple of the sector or cluster size of the underlying physical device.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo.ChangeTime">
            <summary>The time that the file was last changed.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo.CreationTime">
            <summary>The time that the file was created.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo.ExtendedAttributesSize">
            <summary>The size of the extended attributes for the file.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo.EndOfFile">
            <summary>The absolute new end-of-file position as a byte offset from the start of the file to the end of the file. 
            Because this value is zero-based, it actually refers to the first free byte in the file. In other words, <b>EndOfFile</b> is the offset to 
            the byte that immediately follows the last valid byte in the file.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo.FileAttributes">
            <summary>The file attributes.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo.FileId">
            <summary>The file ID.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo.FileIndex">
            <summary>The byte offset of the file within the parent directory. This member is undefined for file systems, such as NTFS,
            in which the position of a file within the parent directory is not fixed and can be changed at any time to maintain sort order.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo.FileName">
            <summary>The name of the file.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo.LastAccessTime">
            <summary>The time that the file was last accessed.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo.LastWriteTime">
            <summary>The time that the file was last written to.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo.ShortName">
            <summary>The short 8.3 file naming convention (for example, FILENAME.TXT) name of the file.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.FileInfo">
            <summary>Provides properties and instance methods for the creation, copying, deletion, moving, and opening of files, and aids in the creation of <see cref="T:System.IO.FileStream"/> objects. This class cannot be inherited.</summary>
            <remarks>Unlike .NET, no Exceptions are thrown if properties are inaccessible. Use Refresh() and Exist() properties to retrieve current file information.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> class, which acts as a wrapper for a file path.</summary>
            <param name="fileName">The fully qualified name of the new file, or the relative file name. Do not end the path with the directory separator character.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.#ctor(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> class, which acts as a wrapper for a file path.</summary>
            <param name="transaction">The transaction.</param>
            <param name="fileName">The fully qualified name of the new file, or the relative file name. Do not end the path with the directory separator character.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.AppendText">
            <summary>Creates a <see cref="T:System.IO.StreamWriter"/> that appends text to the file represented by this instance of the <see cref="T:FileInfo"/>.</summary>
            <returns>A new <see cref="T:System.IO.StreamWriter"/></returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.AppendText(System.Text.Encoding)">
            <summary>Creates a <see cref="T:System.IO.StreamWriter"/> that appends text to the file represented by this instance of the <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/>.</summary>
            <param name="encoding">The character <see cref="T:System.Text.Encoding"/> to use.</param>
            <returns>A new <see cref="T:System.IO.StreamWriter"/></returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.CopyTo(System.String)">
            <summary>Copies an existing file to a new file, disallowing the overwriting of an existing file.</summary>
            <param name="destFileName">The name of the new file to copy to.</param>
            <returns>A new file with a fully qualified path.</returns>
            <remarks>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.CopyTo(System.String,System.Boolean)">
            <summary>Copies an existing file to a new file, allowing the overwriting of an existing file.</summary>
            <param name="destFileName">The name of the new file to copy to.</param>
            <param name="overwrite">true to allow an existing file to be overwritten; otherwise, false.</param>
            <returns>A new file, or an overwrite of an existing file if <paramref name="overwrite"/> is true. If the file exists and <paramref name="overwrite"/> is false, an <see cref="T:System.IO.IOException"/> is thrown.</returns>
            <remarks>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.CopyTo(System.String,System.Boolean,Alphaleonis.Win32.Filesystem.CopyProgressRoutine,System.Object)">
            <summary>Copies an existing file to a new file, allowing the overwriting of an existing file.</summary>
            <param name="destFileName">The name of the new file to copy to.</param>
            <param name="overwrite">true to allow an existing file to be overwritten; otherwise, false.</param>
            <param name="copyProgress"><para>This parameter can be <see langword="null"/>. A callback function that is called each time another portion of the file has been copied.</para></param>
            <param name="userProgressData"><para>This parameter can be <see langword="null"/>. The argument to be passed to the callback function.</para></param>
            <returns>A new file, or an overwrite of an existing file if <paramref name="overwrite"/> is true. If the file exists and <paramref name="overwrite"/> is false, an <see cref="T:System.IO.IOException"/> is thrown.</returns>
            <remarks>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.Create">
            <summary>Creates a file.</summary>
            <returns><see cref="T:System.IO.FileStream"/>A new file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.CreateText">
            <summary>Creates a <see crefe="StreamWriter"/> instance that writes a new text file.</summary>
            <returns>A new <see cref="T:System.IO.StreamWriter"/></returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.Decrypt">
            <summary>Decrypts a file that was encrypted by the current account using the Encrypt method.</summary>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.Delete">
            <summary>Permanently deletes a file.</summary>
            <remarks>If the file does not exist, this method does nothing.</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.Delete(System.Boolean)">
            <summary>Permanently deletes a file.</summary>
            <param name="ignoreReadOnly">If set to <c>true</c> overrides the read only <see cref="T:System.IO.FileAttributes"/> of the file.</param>
            <remarks>If the file does not exist, this method does nothing.</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.Encrypt">
            <summary>Encrypts a file so that only the account used to encrypt the file can decrypt it.</summary>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.GetAccessControl">
            <summary>Gets a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the access control list (ACL) entries for the file described by the current <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> object.</summary>
            <returns><see cref="T:System.Security.AccessControl.FileSecurity"/>A FileSecurity object that encapsulates the access control rules for the current file.</returns>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.GetAccessControl(System.Security.AccessControl.AccessControlSections)">
            <summary>Gets a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the specified type of access control list (ACL) entries for the file described by the current FileInfo object.</summary>
            <param name="includeSections">One of the <see cref="N:System.Security"/> values that specifies which group of access control entries to retrieve.</param>
            <returns><see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the specified type of access control list (ACL) entries for the file described by the current FileInfo object.</returns>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.MoveTo(System.String)">
            <summary>Moves a specified file to a new location, providing the option to specify a new file name.</summary>
            <param name="destFileName">The path to move the file to, which can specify a different file name.</param>
            <remarks>This method works across disk volumes.</remarks>
            <remarks>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.MoveTo(System.String,Alphaleonis.Win32.Filesystem.CopyProgressRoutine,System.Object)">
            <summary>Moves a FileyInfo instance and its contents to a new path.</summary>
            <param name="destFileName">The path to the new location for sourceFileName.</param>
            <param name="copyProgress"><para>This parameter can be <see langword="null"/>. A callback function that is called each time another portion of the file has been copied.</para></param>
            <param name="userProgressData"><para>This parameter can be <see langword="null"/>. The argument to be passed to the callback function.</para></param>
            <remarks>This method works across disk volumes.</remarks>
            <remarks>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.Open(System.IO.FileMode)">
            <summary>Opens a file in the specified mode.</summary>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> constant specifying the mode (for example, Open or Append) in which to open the file.</param>
            <returns>A <see cref="T:System.IO.FileStream"/> file opened in the specified mode, with read/write access and unshared.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.Open(System.IO.FileMode,System.IO.FileAccess)">
            <summary>Opens a file in the specified mode with read, write, or read/write access.</summary>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> constant specifying the mode (for example, Open or Append) in which to open the file.</param>
            <param name="access">A <see cref="T:System.IO.FileAccess"/> constant specifying whether to open the file with Read, Write, or ReadWrite file access.</param>
            <returns>A <see cref="T:System.IO.FileStream"/> object opened in the specified mode and access, and unshared.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.Open(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>Opens a file in the specified mode with read, write, or read/write access and the specified sharing option.</summary>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> constant specifying the mode (for example, Open or Append) in which to open the file.</param>
            <param name="access">A <see cref="T:System.IO.FileAccess"/> constant specifying whether to open the file with Read, Write, or ReadWrite file access.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> constant specifying the type of access other F<see cref="T:System.IO.FileStream"/> objects have to this file.</param>
            <returns>A <see cref="T:System.IO.FileStream"/> object opened with the specified mode, access, and sharing options.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.Open(System.IO.FileMode,System.Security.AccessControl.FileSystemRights)">
            <summary>Opens a file in the specified mode with read, write, or read/write access.</summary>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> constant specifying the mode (for example, Open or Append) in which to open the file.</param>
            <param name="rights">A <see cref="T:System.Security.AccessControl.FileSystemRights"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten along with additional options.</param>
            <returns>A <see cref="T:System.IO.FileStream"/> object opened in the specified mode and access, and unshared.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.Open(System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare)">
            <summary>Opens a file in the specified mode with read, write, or read/write access and the specified sharing option.</summary>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> constant specifying the mode (for example, Open or Append) in which to open the file.</param>
            <param name="rights">A <see cref="T:System.Security.AccessControl.FileSystemRights"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten along with additional options.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> constant specifying the type of access other <see cref="T:System.IO.FileStream"/> objects have to this file.</param>
            <returns>A <see cref="T:System.IO.FileStream"/> object opened with the specified mode, access, and sharing options.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.OpenRead">
            <summary>Creates a read-only <see cref="T:System.IO.FileStream"/>.</summary>
            <returns>A new read-only <see cref="T:System.IO.FileStream"/> object.</returns>
            <remarks>This method returns a read-only <see cref="T:System.IO.FileStream"/> object with the <see cref="T:System.IO.FileShare"/> mode set to Read.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.OpenText">
            <summary>Creates a <see cref="T:System.IO.StreamReader"/> with <see cref="F:Alphaleonis.Win32.Filesystem.NativeMethods.DefaultFileEncoding"/> encoding that reads from an existing text file.</summary>
            <returns>A new <see cref="T:System.IO.StreamReader"/> with <see cref="F:Alphaleonis.Win32.Filesystem.NativeMethods.DefaultFileEncoding"/> encoding.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.OpenText(System.Text.Encoding)">
            <summary>Creates a <see cref="T:System.IO.StreamReader"/> with <see cref="T:System.Text.Encoding"/> that reads from an existing text file.</summary>
            <returns>A new <see cref="T:System.IO.StreamReader"/> with the specified <see cref="T:System.Text.Encoding"/>.</returns>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> applied to the contents of the file.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.OpenWrite">
            <summary>Creates a write-only <see cref="T:System.IO.FileStream"/>.</summary>
            <returns>A write-only unshared <see cref="T:System.IO.FileStream"/> object for a new or existing file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.Refresh">
            <summary>Refreshes the state of the object.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.Replace(System.String,System.String)">
            <summary>Replaces the contents of a specified file with the file described by the current <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> object, deleting the original file, and creating a backup of the replaced file.</summary>
            <param name="destinationFileName">The name of a file to replace with the current file.</param>
            <param name="destinationBackupFileName">The name of a file with which to create a backup of the file described by the destinationFileName parameter.</param>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> object that encapsulates information about the file described by the destinationFileName parameter.</returns>
            <remarks>The Replace method replaces the contents of a specified file with the contents of the file described by the current <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> object. It also creates a backup of the file that was replaced. Finally, it returns a new <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> object that describes the overwritten file.</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.Replace(System.String,System.String,System.Boolean)">
            <summary>Replaces the contents of a specified file with the file described by the current <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> object, deleting the original file, and creating a backup of the replaced file. Also specifies whether to ignore merge errors.</summary>
            <param name="destinationFileName">The name of a file to replace with the current file.</param>
            <param name="destinationBackupFileName">The name of a file with which to create a backup of the file described by the destinationFileName parameter.</param>
            <param name="ignoreMetadataErrors">true to ignore merge errors (such as attributes and ACLs) from the replaced file to the replacement file; otherwise false.</param>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> object that encapsulates information about the file described by the destinationFileName parameter.</returns>
            <remarks>The Replace method replaces the contents of a specified file with the contents of the file described by the current <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> object. It also creates a backup of the file that was replaced. Finally, it returns a new <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> object that describes the overwritten file.</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.SetAccessControl(System.Security.AccessControl.FileSecurity)">
            <summary>Applies access control list (ACL) entries described by a FileSecurity object to the file described by the current FileInfo object.</summary>
            <param name="fileSecurity">A <see cref="T:System.Security.AccessControl.FileSecurity"/> object that describes an access control list (ACL) entry to apply to the current file.</param>
            <remarks>The SetAccessControl method applies access control list (ACL) entries to the current file that represents the noninherited ACL list. 
            Use the SetAccessControl method whenever you need to add or remove ACL entries from a file.
            </remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.SetAccessControl(System.Security.AccessControl.FileSecurity,System.Security.AccessControl.AccessControlSections)">
            <summary>Applies access control list (ACL) entries described by a FileSecurity object to the file described by the current FileInfo object.</summary>
            <param name="fileSecurity">A <see cref="T:System.Security.AccessControl.FileSecurity"/> object that describes an access control list (ACL) entry to apply to the current file.</param>
            <param name="includeSections">One or more of the <see cref="T:System.Security.AccessControl.AccessControlSections"/> values that specifies the type of access control list (ACL) information to set.</param>
            <remarks>The SetAccessControl method applies access control list (ACL) entries to the current file that represents the noninherited ACL list. 
            Use the SetAccessControl method whenever you need to add or remove ACL entries from a file.
            </remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.ToString">
            <summary>Returns the path as a string.</summary>
            <returns>A string representing the path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.Compress">
            <summary>Compresses a file using NTFS compression.</summary>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.Decompress">
            <summary>Decompresses an NTFS compressed file.</summary>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.EnumerateStreams">
            <summary>Returns <see cref="T:Alphaleonis.Win32.Filesystem.BackupStreamInfo"/> instances, associated with the file.</summary>
            <returns>An enumerable <see langref="BackupStreamInfo"/> collection of streams for the file or <see langword="null"/> on error.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.CopyToMoveToInternal(System.String,System.Nullable{Alphaleonis.Win32.Filesystem.CopyOptions},System.Nullable{Alphaleonis.Win32.Filesystem.MoveOptions},Alphaleonis.Win32.Filesystem.CopyProgressRoutine,System.Object)">
            <summary>Recursive copying of folders and files from one root to another.</summary>
            <param name="destFileName"><para>A full path <see cref="T:System.String"/> to the destination directory</para></param>
            <param name="copyOptions"><para>This parameter can be <see langword="null"/>. Use <see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> to specify how the file is to be copied.</para></param>
            <param name="moveOptions"><para>This parameter can be <see langword="null"/>. Use <see cref="T:Alphaleonis.Win32.Filesystem.MoveOptions"/> that specify how the file is to be moved.</para></param>
            <param name="copyProgress"><para>This parameter can be <see langword="null"/>. A callback function that is called each time another portion of the file has been copied.</para></param>
            <param name="userProgressData"><para>This parameter can be <see langword="null"/>. The argument to be passed to the callback function.</para></param>
            <returns>A new <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> file with a fully qualified path. Returns null on failure.</returns>
            <remarks>The attributes of the original file are retained in the copied file.</remarks>
            <remarks>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior</remarks>
            <remarks>This Move method works across disk volumes, and it does not throw an exception if the source and destination are
            the same. Note that if you attempt to replace a file by moving a file of the same name into that directory, you
            get an IOException. You cannot use the Move method to overwrite an existing file.
            </remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileInfo.Directory">
            <summary>Gets an instance of the parent directory.</summary>
            <returns>A <see cref="T:DirectoryInfo"/> object representing the parent directory of this file.</returns>
            <remarks>To get the parent directory as a string, use the DirectoryName property.</remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileInfo.DirectoryName">
            <summary>Gets a string representing the directory's full path.</summary>
            <returns>A string representing the directory's full path.</returns>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileInfo.Exists">
            <summary>Gets a value indicating whether the file exists.</summary>
            <returns><c>true</c> on success, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileInfo.IsReadOnly">
            <summary>Gets or sets a value that determines if the current file is read only.</summary>
            <returns><c>true</c> if the current file is read only, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileInfo.Name">
            <summary>Gets the name of the file.</summary>
            <returns>The name of the file.</returns>
            <remarks>
            The name of the file includes the file extension.
            When first called, FileInfo calls Refresh and caches information about the file. On subsequent calls, you must call Refresh to get the latest copy of the information.
            </remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileInfo.Length">
            <summary>Gets the size, in bytes, of the current file.</summary>
            <returns>The size of the current file in bytes.</returns>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileInfo.LengthCompressed">
            <summary>Retrieves the actual number of bytes of disk storage used to store a specified file.</summary>
            <returns>The size of the actual number of bytes.</returns>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileInfo.LengthStreams">
            <summary>Retrieves the actual number of bytes of disk storage used by alternate data streams (NTFS ADS).</summary>
            <remarks>Use <see cref="P:Alphaleonis.Win32.Filesystem.FileInfo.Length"/> + <see cref="P:Alphaleonis.Win32.Filesystem.FileInfo.LengthStreams"/> = more accurate file size.</remarks>
            <returns>The size of the actual number of bytes used by file streams, other then the default stream.</returns>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.EFileAttributes">
            <summary>Specifies how the operating system should open a file.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.EFileAttributes.None">
            <summary>None of the file attributes specified.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.EFileAttributes.ReadOnly">
            <summary>The file is read only. Applications can read the file, but cannot write to or delete it.</summary>
            <remarks>Equals <see cref="F:System.IO.FileAttributes.ReadOnly"/>1</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.EFileAttributes.Hidden">
            <summary>The file is hidden. Do not include it in an ordinary directory listing.</summary>
            <remarks>Equals <see cref="F:System.IO.FileAttributes.Hidden"/>2</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.EFileAttributes.System">
            <summary>The file is part of or used exclusively by an operating system.</summary>
            <remarks>Equals <see cref="F:System.IO.FileAttributes.System"/>4</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.EFileAttributes.Directory">
            <summary>The handle that identifies a directory.</summary>
            <remarks>Equals <see cref="F:System.IO.FileAttributes.Directory"/>16</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.EFileAttributes.Archive">
            <summary>The file should be archived. Applications use this attribute to mark files for backup or removal.</summary>
            <remarks>Equals <see cref="F:System.IO.FileAttributes.Archive"/>32</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.EFileAttributes.Device">
            <summary>The file should be archived. Applications use this attribute to mark files for backup or removal.</summary>
            <remarks>Equals <see cref="F:System.IO.FileAttributes.Device"/>64</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.EFileAttributes.Normal">
            <summary>The file does not have other attributes set. This attribute is valid only if used alone.</summary>
            <remarks>Equals <see cref="F:System.IO.FileAttributes.Normal"/>128</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.EFileAttributes.Temporary">
            <summary>The file is being used for temporary storage.</summary>
            <remarks>Equals <see cref="F:System.IO.FileAttributes.Temporary"/>256</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.EFileAttributes.SparseFile">
            <summary>A file that is a sparse file.</summary>
            <remarks>Equals <see cref="F:System.IO.FileAttributes.SparseFile"/>512</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.EFileAttributes.ReparsePoint">
            <summary>A file or directory that has an associated reparse point, or a file that is a symbolic link.</summary>
            <remarks>Equals <see cref="F:System.IO.FileAttributes.ReparsePoint"/>1024</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.EFileAttributes.Compressed">
            <summary>A file or directory that is compressed. For a file, all of the data in the file is compressed. For a directory, compression is the default for newly created files and subdirectories.</summary>
            <remarks>Equals <see cref="F:System.IO.FileAttributes.Compressed"/>2048</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.EFileAttributes.Offline">
            <summary>The data of a file is not immediately available. This attribute indicates that file data is physically moved to offline storage. This attribute is used by Remote Storage, the hierarchical storage management software. Applications should not arbitrarily change this attribute.</summary>
            <remarks>Equals <see cref="F:System.IO.FileAttributes.Offline"/>4096</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.EFileAttributes.NotContentIndexed">
            <summary>The file or directory is not to be indexed by the content indexing service.</summary>
            <remarks>Equals <see cref="F:System.IO.FileAttributes.NotContentIndexed"/>8192</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.EFileAttributes.Encrypted">
            <summary>The file or directory is encrypted. For a file, this means that all data in the file is encrypted. For a directory, this means that encryption is the default for newly created files and subdirectories.</summary>
            <remarks>Equals <see cref="F:System.IO.FileOptions.Encrypted"/>16384</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.EFileAttributes.IntegrityStream">
            <summary>The directory or user data stream is configured with integrity (only supported on ReFS volumes). It is not included in an ordinary directory listing. The integrity setting persists with the file if it's renamed. If a file is copied the destination file will have integrity set if either the source file or destination directory have integrity set.</summary>
            <remarks>This flag is not supported until Windows Server 2012.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.EFileAttributes.NoScrubData">
            <summary>The user data stream not to be read by the background data integrity scanner (AKA scrubber). When set on a directory it only provides inheritance. This flag is only supported on Storage Spaces and ReFS volumes. It is not included in an ordinary directory listing.</summary>
            <remarks>This flag is not supported until Windows Server 2012.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.EFileAttributes.FirstPipeInstance">
            <summary/>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.EFileAttributes.OpenNoRecall">
            <summary>The file data is requested, but it should continue to be located in remote storage. It should not be transported back to local storage. This flag is for use by remote storage systems.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.EFileAttributes.OpenReparsePoint">
            <summary>Normal reparse point processing will not occur; an attempt to open the reparse point will be made. When a file is opened, a file handle is returned, whether or not the filter that controls the reparse point is operational. See MSDN documentation for more information.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.EFileAttributes.PosixSemantics">
            <summary>Access will occur according to POSIX rules. This includes allowing multiple files with names, differing only in case, for file systems that support that naming. Use care when using this option, because files created with this flag may not be accessible by applications that are written for MS-DOS or 16-bit Windows.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.EFileAttributes.BackupSemantics">
            <summary>The file is being opened or created for a backup or restore operation. The system ensures that the calling process overrides file security checks when the process has SE_BACKUP_NAME and SE_RESTORE_NAME privileges. You must set this flag to obtain a handle to a directory. A directory handle can be passed to some functions instead of a file handle.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.EFileAttributes.DeleteOnClose">
            <summary>The file is to be deleted immediately after all of its handles are closed, which includes the specified handle and any other open or duplicated handles. If there are existing open handles to a file, the call fails unless they were all opened with the <see cref="F:System.IO.FileShare.Delete"/> share mode. Subsequent open requests for the file fail, unless the <see cref="F:System.IO.FileShare.Delete"/> share mode is specified.</summary>
            <remarks>Equals <see cref="F:System.IO.FileOptions.DeleteOnClose"/>67108864</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.EFileAttributes.SequentialScan">
            <summary>Access is intended to be sequential from beginning to end. The system can use this as a hint to optimize file caching.</summary>
            <remarks>Equals <see cref="F:System.IO.FileOptions.SequentialScan"/>134217728</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.EFileAttributes.RandomAccess">
            <summary>Access is intended to be random. The system can use this as a hint to optimize file caching.</summary>
            <remarks>Equals <see cref="F:System.IO.FileOptions.RandomAccess"/>268435456</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.EFileAttributes.NoBuffering">
            <summary>There are strict requirements for successfully working with files opened with the <see cref="F:Alphaleonis.Win32.Filesystem.EFileAttributes.NoBuffering"/> flag, for details see the section on "File Buffering" in the online MSDN documentation.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.EFileAttributes.Overlapped">
            <summary>The file or device is being opened or created for asynchronous I/O.</summary>
            <remarks>Equals <see cref="F:System.IO.FileOptions.Asynchronous"/>1073741824</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.EFileAttributes.WriteThrough">
            <summary>Write operations will not go through any intermediate cache, they will go directly to disk.</summary>
            <remarks>Equals .NET <see cref="F:System.IO.FileOptions.WriteThrough"/>-2147483648</remarks>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.FileSystemEntry">
            <summary>Class that retrieves file system entries (i.e. files and directories) using Win32 API FindFirst()/FindNext().</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemEntry.Enumerate">
            <summary>Get an enumerator that returns all of the file system objects that match the wildcards that are in any of the directories to be searched.</summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance.</returns>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntry.BasicSearch">
            <summary>Gets or sets a value indicating which <see cref="T:Alphaleonis.Win32.Filesystem.NativeMethods.FindExInfoLevels"/> to use.</summary>
            <value>If set to <c>true</c>, uses <see cref="F:Alphaleonis.Win32.Filesystem.NativeMethods.FindExInfoLevels.Basic"/>, otherwise uses <see cref="F:Alphaleonis.Win32.Filesystem.NativeMethods.FindExInfoLevels.Standard"/></value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntry.ContinueOnAccessError">
            <summary>Gets or sets the ability to skip on access errors.</summary>
            <value>If set to <c>true</c> skip on access errors resulted from ACLs protected directories or non-accessible reparse points, otherwise an <see cref="T:System.UnauthorizedAccessException"/> is thrown.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntry.GetFsoType">
            <summary>Gets the file system object type.</summary>
            <value>
            null = return directories and files.
            true = return only directories.
            false = return only files.
            </value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntry.InputPath">
            <summary>Gets or sets the path to the folder.</summary>
            <value>The path to the folder.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntry.LargeCache">
            <summary>Gets or sets a value indicating which <see cref="T:Alphaleonis.Win32.Filesystem.NativeMethods.FindExAdditionalFlags"/> to use.</summary>
            <value>If set to <c>true</c>, uses <see cref="F:Alphaleonis.Win32.Filesystem.NativeMethods.FindExAdditionalFlags.LargeFetch"/>, otherwise uses <see cref="F:Alphaleonis.Win32.Filesystem.NativeMethods.FindExAdditionalFlags.None"/></value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntry.SearchOption">
            <summary>Specifies whether the search operation should include only the current directory or should include all subdirectories.</summary>
            <value>One of the <see cref="P:Alphaleonis.Win32.Filesystem.FileSystemEntry.SearchOption"/> enumeration values.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntry.SearchPattern">
            <summary>Search for file system object-name using a pattern.</summary>
            <value>A search string, the path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntry.Transaction">
            <summary>Get or sets the KernelTransaction instance.</summary>
            <value>The transaction.</value>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo">
            <summary>Represents information about a file system entry. Used together with <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntry"/>.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.#ctor(Alphaleonis.Win32.Filesystem.NativeMethods.Win32FindData)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> class.</summary>
            <param name="findData">The WIN32 find data structure.</param>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.AlternateFileName">
            <summary>Gets the 8.3 version of the filename.</summary>
            <value>the 8.3 version of the filename.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.Attributes">
            <summary>Gets the attributes.</summary>
            <value>The attributes.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.Created">
            <summary>Gets the time this entry was created.</summary>
            <value>The time this entry was created.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.FileName">
            <summary>Gets the name of the file.</summary>
            <value>The name of the file.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.FileSize">
            <summary>Gets the size of the file.</summary>
            <value>The size of the file.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.FullPath">
            <summary>The real full path of the file system object/entry.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.IsDirectory">
            <summary>Gets a value indicating whether this instance represents a directory.</summary>
            <value><c>true</c> if this instance represents a directory; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.IsFile">
            <summary>Gets a value indicating whether this instance is definitely a file.</summary>
            <value><c>true</c> if this instance is file; otherwise, <c>false</c>.</value>
            <remarks>File system object is NOT a directory and NOT a device.</remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.IsMountPoint">
            <summary>Gets a value indicating whether this instance is a mount point.</summary>
            <value><c>true</c> if this instance is a mount point; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.IsReparsePoint">
            <summary>Gets a value indicating whether this instance is a reparse point.</summary>
            <value><c>true</c> if this instance is a reparse point; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.IsSymbolicLink">
            <summary>Gets a value indicating whether this instance is a symbolic link.</summary>
            <value><c>true</c> if this instance is a symbolic link; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.LastAccessed">
            <summary>Gets the time this entry was last accessed.</summary>
            <value>The time this entry was last accessed.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.LastModified">
            <summary>Gets the time this entry was last modified.</summary>
            <value>The time this entry was last modified.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.ReparsePointTag">
            <summary>Gets the reparse point tag of this entry.</summary>
            <value>The reparse point tag of this entry.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.VirtualFullPath">
            <summary>This property is intended to be used with in the future versions of the library
            to store a full path that is relative to a parent symbolic link or junction point.
            It will be correctly set by enumerating methods.
            <code>
            Parent Symbolic Directory Link Pointed
            From: C:\Users\Novels\Application Data
            To: C:\Users\Novels\AppData\Roaming
            so the entry info for vlc-qt-interface.ini file will have following values
            FullPath: C:\Users\Novels\AppData\Roaming\vlc\vlc-qt-interface.ini
            VirtualFullPath: C:\Users\Novels\Application Data\vlc\vlc-qt-interface.ini
            </code>
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.Win32FindData">
            <summary>Gets internal WIN32 FIND Data</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.IllegalPathException">
            <summary>The exception that is thrown when a pathname or filename is illegal.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.IllegalPathException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.IllegalPathException"/> class.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.IllegalPathException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.IllegalPathException"/> class.</summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.IllegalPathException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.IllegalPathException"/> class.</summary>
            <param name="path">The path.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.IllegalPathException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.IllegalPathException"/> class.</summary>
            <param name="info">The data for serializing or deserializing the object.</param>
            <param name="context">The source and destination for the object.</param>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.FileTime">
            <summary>Contains a 64-bit value representing the number of 100-nanosecond intervals since January 1, 1601 (UTC).</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileTime.Equals(System.Object)">
            <summary>Determines whether the specified Object is equal to the current Object.</summary>
            <param name="obj">Another object to compare to.</param>
            <returns>true if the specified Object is equal to the current Object; otherwise, false.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileTime.GetHashCode">
            <summary>Serves as a hash function for a particular type.</summary>
            <returns>A hash code for the current Object.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileTime.op_Equality(Alphaleonis.Win32.Filesystem.FileTime,Alphaleonis.Win32.Filesystem.FileTime)">
            <summary>Implements the operator ==</summary>
            <param name="left">A.</param>
            <param name="right">B.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileTime.op_Inequality(Alphaleonis.Win32.Filesystem.FileTime,Alphaleonis.Win32.Filesystem.FileTime)">
            <summary>Implements the operator !=</summary>
            <param name="left">A.</param>
            <param name="right">B.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileTime.op_Implicit(Alphaleonis.Win32.Filesystem.FileTime)~System.Int64">
            <summary>Converts a value to long.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileTime.ToLong">
            <summary>Converts a value to long.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileTime.HighDateTime">
            <summary>The high-order part of the file time.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileTime.LowDateTime">
            <summary>The low-order part of the file time.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.LinkTargetInfo">
            <summary>Information about the target of a symbolic link or mount point.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.LinkTargetInfo.PrintName">
            <summary>The print name.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.LinkTargetInfo.SubstituteName">
            <summary>The substitute name.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.MoveOptions">
            <summary>The move options for a file move operation.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.MoveOptions.None">
            <summary>No MoveOptions used.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.MoveOptions.ReplaceExisting">
            <summary>If the destination file name already exists, the function replaces its contents with the contents of the source file.</summary>
            <remark>This value cannot be used if either source or destination names a directory.</remark>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.MoveOptions.CopyAllowed">
            <summary>If the file is to be moved to a different volume, the function simulates the move by using the CopyFile and DeleteFile functions.</summary>
            <remarks>This value cannot be used with <see cref="F:Alphaleonis.Win32.Filesystem.MoveOptions.DelayUntilReboot"/>.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.MoveOptions.DelayUntilReboot">
            <summary>The system does not move the file until the operating system is restarted. The system moves the file immediately after AUTOCHK is executed,
            but before creating any paging files. Consequently, this parameter enables the function to delete paging files from previous startups.
            This value can only be used if the process is in the context of a user who belongs to the administrators group or the LocalSystem account.
            </summary>
            <remarks>This value cannot be used with <see cref="F:Alphaleonis.Win32.Filesystem.MoveOptions.CopyAllowed"/>.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.MoveOptions.WriteThrough">
            <summary>The function does not return until the file has actually been moved on the disk.
            Setting this value guarantees that a move performed as a copy and delete operation is flushed 
            to disk before the function returns. The flush occurs at the end of the copy operation.
            </summary>
            <remarks>This value has no effect if <see cref="F:Alphaleonis.Win32.Filesystem.MoveOptions.DelayUntilReboot"/> is set.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.MoveOptions.CreateHardlink">
            <summary>Reserved for future use.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.MoveOptions.FailIfNotTrackable">
            <summary>The function fails if the source file is a link source, but the file cannot be tracked after the move. This situation can occur if the destination is a volume formatted with the FAT file system.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.NotAReparsePointException">
            <summary>The file or directory was not a reparse point.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NotAReparsePointException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.NotAReparsePointException"/> class.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NotAReparsePointException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.NotAReparsePointException"/> class.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NotAReparsePointException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.NotAReparsePointException"/> class.</summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NotAReparsePointException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.NotAReparsePointException"/> class.</summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.Path">
            <summary>Performs operations on String instances that contain file or directory path information. These operations are performed in a cross-platform manner.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.CurrentDirectoryPrefixChar">
            <summary>CurrentDirectoryPrefix = '.' Provides a current directory character.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.ExtensionSeparatorChar">
            <summary>ExtensionSeparatorChar = '.' Provides an Extension Separator character.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.ParentDirectoryPrefix">
            <summary>ParentDirectoryPrefix = ".." Provides a parent directory string.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.StringTerminatorChar">
            <summary>StringTerminatorChar = '\0' String Terminator Suffix.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll">
            <summary>WildcardStarMatchAll = "*" Provides a match-all-items string.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAllChar">
            <summary>WildcardStarMatchAll = '*' Provides a match-all-items character.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion">
            <summary>WildcardQuestion = "?" Provides a replace-item string.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestionChar">
            <summary>WildcardQuestion = '?' Provides a replace-item string.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.AltDirectorySeparatorChar">
            <summary>AltDirectorySeparatorChar = '/' Provides a platform-specific alternate character used to separate directory levels in a path string that reflects a hierarchical file system organization.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar">
            <summary>DirectorySeparatorChar = '\' Provides a platform-specific character used to separate directory levels in a path string that reflects a hierarchical file system organization.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.PathSeparator">
            <summary>PathSeparator = ';' A platform-specific separator character used to separate path strings in environment variables.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.VolumeSeparatorChar">
            <summary>VolumeSeparatorChar = ':' Provides a platform-specific Volume Separator character.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.AltDirectorySeparator">
            <summary>AltDirectorySeparatorChar = "/" Provides a platform-specific alternate string used to separate directory levels in a path string that reflects a hierarchical file system organization.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.CurrentDirectoryPrefix">
            <summary>CurrentDirectoryPrefix = "." Provides a current directory string.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparator">
            <summary>DirectorySeparator = "\" Provides a platform-specific string used to separate directory levels in a path string that reflects a hierarchical file system organization.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.UncPrefix">
            <summary>UncPrefix = "\\" Provides standard Windows Path UNC prefix.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.LongPathPrefix">
            <summary>LongPathPrefix = "\\?\" Provides standard Windows Long Path prefix.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.LongPathUncPrefix">
            <summary>LongPathUncPrefix = "\\?\UNC\" Provides standard Windows Long Path UNC prefix.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.GlobalRootPrefix">
            <summary>GlobalRootPrefix = "\\?\GLOBALROOT\" Provides standard Windows Volume prefix.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.MsDosNamespacePrefix">
            <summary>MsDosNamespacePrefix = "\\\\.\\" Provides standard Win32 Namespace prefix.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.SubstitutePrefix">
            <summary>SubstitutePrefix = "\??\" Provides a SUBST.EXE Path prefix to a Logical Drive.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.VolumePrefix">
            <summary>VolumePrefix = "\\?\Volume" Provides standard Windows Volume prefix.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.DevicePrefix">
            <summary>DevicePrefix = "\Device\" Provides standard Windows Device prefix.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.DosDeviceLanmanPrefix">
            <summary>DosDeviceLanmanPrefix = "\Device\LanmanRedirector\" Provides a MS-Dos Lanman Redirector Path UNC prefix to a network share.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.DosDeviceMupPrefix">
            <summary>DosDeviceMupPrefix = "\Device\Mup\" Provides a MS-Dos Mup Redirector Path UNC prefix to a network share.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.DosDeviceUncPrefix">
            <summary>DosDeviceUncPrefix = "\??\UNC\" Provides a SUBST.EXE Path UNC prefix to a network share.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.ChangeExtension(System.String,System.String)">
            <summary>Changes the extension of a path string.</summary>
            <param name="path">The path information to modify. The path cannot contain any of the characters defined in <see cref="M:Alphaleonis.Win32.Filesystem.Path.GetInvalidPathChars"/>.</param>
            <param name="extension">The new extension (with or without a leading period). Specify <see langword="null"/> to remove an existing extension from path.</param>
            <returns>The modified path information.</returns>
            <exception cref="T:System.ArgumentException">Path contains one or more of the invalid characters defined in GetInvalidPathChars.</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.Combine(System.String[])">
            <summary>Combines an array of strings into a path.</summary>
            <param name="paths">An array of parts of the path.</param>
            <returns>The combined paths.</returns>
            <exception cref="T:System.ArgumentException">One of the strings in the array contains one or more of the invalid characters defined in <see cref="M:Alphaleonis.Win32.Filesystem.Path.GetInvalidPathChars"/>.</exception>
            <exception cref="T:System.ArgumentNullException">One of the strings in the array is <see langword="null"/>.</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetDirectoryName(System.String)">
            <summary>Returns the directory information for the specified path string.</summary>
            <param name="path">The path of a file or directory.</param>
            <returns>Directory information for <paramref name="path"/>, or <see langref="null"/> if <paramref name="path"/> denotes a root directory or is <see langref="null"/>. Returns <see langref="string.Empty"/> if <paramref name="path"/> does not contain directory information.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetExtension(System.String)">
            <summary>Returns the extension of the specified path string.</summary>
            <param name="path">The path string from which to get the extension.</param>
            <returns>The extension of the specified path (including the period "."), or <see langword="null"/>, or <see langword="string.Empty"/>. If path is <see langword="null"/>, GetExtension returns <see langword="null"/>. If path does not have extension information, GetExtension returns <see langword="string.Empty"/>.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetFileName(System.String)">
            <summary>Returns the file name and extension of the specified path string.</summary>
            <param name="path">The path string from which to obtain the file name and extension.</param>
            <returns>The characters after the last directory character in <paramref name="path"/>. If the last character of <paramref name="path"/> is a directory or volume separator character, this method returns <see langword="string.Empty"/>. If path is <see langword="null"/>, this method returns <see langword="null"/>.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetFileNameWithoutExtension(System.String)">
            <summary>Returns the file name of the specified path string without the extension.</summary>
            <param name="path">The path of the file.</param>
            <returns>The string returned by GetFileName, minus the last period (.) and all characters following it.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetFullPath(System.String)">
            <summary>Returns the absolute path for the specified path string.</summary>
            <param name="path">The file or directory for which to obtain absolute path information.</param>
            <returns>The fully qualified location of path, such as "C:\MyFile.txt".</returns>
            <remarks>GetFullPath is not recommended for multithreaded applications or shared library code.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetFullPath(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Returns the absolute path for the specified path string.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file or directory for which to obtain absolute path information.</param>
            <returns>The fully qualified location of path, such as "C:\MyFile.txt".</returns>
            <remarks>GetFullPath is not recommended for multithreaded applications or shared library code.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetInvalidFileNameChars">
            <summary>Gets an array containing the characters that are not allowed in file names.</summary>
            <returns>An array containing the characters that are not allowed in file names.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetInvalidPathChars">
            <summary>Gets an array containing the characters that are not allowed in path names.</summary>
            <returns>An array containing the characters that are not allowed in path names.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetPathRoot(System.String)">
            <summary>Gets the root directory information of the specified path.</summary>
            <param name="path">The path from which to obtain root directory information.</param>
            <returns>The root directory of <paramref name="path"/>, such as "C:\", or <see langword="null"/> if <paramref name="path"/> is <see langword="null"/>, or an empty string if <paramref name="path"/> does not contain root directory information.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetRandomFileName">
            <summary>Returns a random folder name or file name.</summary>
            <returns>A random folder name or file name.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetTempFileName">
            <summary>Creates a uniquely named, zero-byte temporary file on disk and returns the full path of that file.</summary>
            <returns>The full path of the temporary file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetTempPath">
            <summary>Returns the path of the current user's temporary folder.</summary>
            <returns>The path to the temporary folder, ending with a backslash.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetTempPath(System.String)">
            <summary>Returns the path of the current user's temporary folder.</summary>
            <param name="combinePath">A <see cref="T:System.String"/> foldername to append to the temporary folder.</param>
            <returns>The path to the temporary folder, combined with <paramref name="combinePath"/>.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.HasExtension(System.String)">
            <summary>Determines whether a path includes a file name extension.</summary>
            <param name="path">The path to search for an extension.</param>
            <returns><c>true</c> if the characters that follow the last directory separator (\\ or /) or volume separator (:) in the path include a period (.) followed by one or more characters; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.IsPathRooted(System.String)">
            <summary>Gets a value indicating whether the specified path string contains absolute or relative path information.</summary>
            <param name="path">The path to test.</param>
            <returns><c>true</c> if <paramref name="path"/> contains a root; otherwise, <c>false</c>.</returns>
            <remarks>The IsPathRooted method returns <c>true</c> if the first character is a directory separator character such as <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/>, or if the path starts with a drive letter and colon (<see cref="F:Alphaleonis.Win32.Filesystem.Path.VolumeSeparatorChar"/>). For example, it returns true for path strings such as "\\MyDir\\MyFile.txt", "C:\\MyDir", or "C:MyDir". It returns false for path strings such as "MyDir".</remarks>
            <remarks>This method does not verify that the path or file name exists.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.AddDirectorySeparator(System.String)">
            <summary>Adds a <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> or <see cref="F:Alphaleonis.Win32.Filesystem.Path.AltDirectorySeparatorChar"/> character to the string.</summary>
            <param name="path">A text string to which the <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> or <see cref="F:Alphaleonis.Win32.Filesystem.Path.AltDirectorySeparatorChar"/> is to be added.</param>
            <returns>A text string with the <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> or <see cref="F:Alphaleonis.Win32.Filesystem.Path.AltDirectorySeparatorChar"/> character suffixed. The function returns <see langword="null"/> when <see param="path"/> is <see langword="null"/>.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.AddDirectorySeparator(System.String,System.Boolean)">
            <summary>Adds a <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> or <see cref="F:Alphaleonis.Win32.Filesystem.Path.AltDirectorySeparatorChar"/> character to the string.</summary>
            <param name="path">A text string to which the <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> or <see cref="F:Alphaleonis.Win32.Filesystem.Path.AltDirectorySeparatorChar"/> is to be added.</param>
            <param name="addAlternateSeparator">if true the <see cref="F:Alphaleonis.Win32.Filesystem.Path.AltDirectorySeparatorChar"/> character will be added instead.</param>
            <returns>A text string with the <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> or <see cref="F:Alphaleonis.Win32.Filesystem.Path.AltDirectorySeparatorChar"/> character suffixed. The function returns <see langword="null"/> when <see param="path"/> is <see langword="null"/>.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetDirectoryNameWithoutRoot(System.String)">
            <summary>Returns the directory information for the specified path string without the root information, for example: C:\Windows\system32 --> Windows</summary>
            <param name="path">The path.</param>
            <returns>The <paramref name="path"/>without the file name part and without the root information (if any), or <see langref="null"/> if <paramref name="path"/> is <see langref="null"/> or if <paramref name="path"/> denotes a root (such as "\", "C:", or * "\\server\share").</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetDirectoryNameWithoutRoot(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Returns the directory information for the specified path string without the root information, for example: C:\Windows\system32 --> Windows</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path.</param>
            <returns>The <paramref name="path"/>without the file name part and without the root information (if any), or <see langref="null"/> if <paramref name="path"/> is <see langref="null"/> or if <paramref name="path"/> denotes a root (such as "\", "C:", or * "\\server\share").</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetFinalPathNameByHandle(System.IO.FileStream)">
            <summary>Retrieves the final path for the specified file, formatted as <see cref="T:Alphaleonis.Win32.Filesystem.FinalPathFormats"/>.</summary>
            <param name="stream">Then handle to a <see cref="T:System.IO.FileStream"/> instance.</param>
            <returns>Returns the final path as a <c>string</c>.</returns>
            <remarks>
            A final path is the path that is returned when a path is fully resolved.
            For example, for a symbolic link named "C:\tmp\mydir" that points to "D:\yourdir", the final path would be "D:\yourdir".
            The string that is returned by this function uses the <see cref="F:Alphaleonis.Win32.Filesystem.Path.LongPathPrefix"/> syntax.
            </remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetFinalPathNameByHandle(System.IO.FileStream,Alphaleonis.Win32.Filesystem.FinalPathFormats)">
            <summary>Retrieves the final path for the specified file, formatted as <see cref="T:Alphaleonis.Win32.Filesystem.FinalPathFormats"/>.</summary>
            <param name="stream">Then handle to a <see cref="T:System.IO.FileStream"/> instance.</param>
            <param name="finalPath">The final path, formatted as <see cref="T:Alphaleonis.Win32.Filesystem.FinalPathFormats"/></param>
            <returns>Returns the final path as a <c>string</c>.</returns>
            <remarks>
            A final path is the path that is returned when a path is fully resolved.
            For example, for a symbolic link named "C:\tmp\mydir" that points to "D:\yourdir", the final path would be "D:\yourdir".
            The string that is returned by this function uses the <see cref="F:Alphaleonis.Win32.Filesystem.Path.LongPathPrefix"/> syntax.
            </remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetFinalPathNameByHandle(Microsoft.Win32.SafeHandles.SafeFileHandle)">
            <summary>Retrieves the final path for the specified file, formatted as <see cref="T:Alphaleonis.Win32.Filesystem.FinalPathFormats"/>.</summary>
            <param name="handle">Then handle to a <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle"/> instance.</param>
            <returns>Returns the final path as a <c>string</c>.</returns>
            <remarks>
            A final path is the path that is returned when a path is fully resolved.
            For example, for a symbolic link named "C:\tmp\mydir" that points to "D:\yourdir", the final path would be "D:\yourdir".
            </remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetFinalPathNameByHandleInternal(Microsoft.Win32.SafeHandles.SafeFileHandle,Alphaleonis.Win32.Filesystem.FinalPathFormats)">
            <summary>Retrieves the final path for the specified file, formatted as <see cref="T:Alphaleonis.Win32.Filesystem.FinalPathFormats"/>.</summary>
            <param name="handle">Then handle to a <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle"/> instance.</param>
            <param name="finalPath">The final path, formatted as <see cref="T:Alphaleonis.Win32.Filesystem.FinalPathFormats"/></param>
            <returns>Returns the final path as a <c>string</c>.</returns>
            <remarks>
            A final path is the path that is returned when a path is fully resolved.
            For example, for a symbolic link named "C:\tmp\mydir" that points to "D:\yourdir", the final path would be "D:\yourdir".
            The string that is returned by this function uses the <see cref="F:Alphaleonis.Win32.Filesystem.Path.LongPathPrefix"/> syntax.
            </remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetLongPath(System.String)">
            <summary>Makes a Unicode path (LongPath) of the specified <paramref name="path"/> by prefixing <see cref="F:Alphaleonis.Win32.Filesystem.Path.LongPathPrefix"/>.</summary>
            <param name="path">The path to the directory or file, this may also be an UNC path.</param>
            <returns>The <paramref name="path"/> prefixed with a <see cref="F:Alphaleonis.Win32.Filesystem.Path.LongPathPrefix"/>.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetLongFrom83Path(System.String)">
            <summary>Converts the specified existing path to its regular long form.</summary>
            <param name="path">An existing path to a folder or file.</param>
            <returns>A string containg the regular full path.</returns>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetLongFrom83Path(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Converts the specified existing path to its regular long form.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">An existing path to a folder or file.</param>
            <returns>A string containg the regular full path.</returns>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetMappedConnectionName(System.String)">
            <summary>Gets the connection name of the locally mapped drive.</summary>
            <param name="path">The local path with drive name.</param>
            <returns>A string which has the following format <c>\\servername\sharename</c>.</returns>
            <exception cref="T:System.IO.PathTooLongException">When <paramref name="path"/> exceeds <see cref="F:Alphaleonis.Win32.Filesystem.NativeMethods.MaxPath"/></exception>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetMappedUncName(System.String)">
            <summary>Gets the network share name from the locally mapped path.</summary>
            <param name="path">The local path with drive name.</param>
            <returns>A string in which drive name being replaced with it's network share connection name.</returns>
            <exception cref="T:System.IO.PathTooLongException">When <paramref name="path"/> exceeds <see cref="F:Alphaleonis.Win32.Filesystem.NativeMethods.MaxPath"/></exception>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetRegularPath(System.String)">
            <summary>Gets the regular path from long prefixed one. i.e.: \\?\C:\Temp\file.txt to C:\Temp\file.txt or: \\?\UNC\Server\share\file.txt to \\Server\share\file.txt</summary>
            <param name="path">The path.</param>
            <returns>Regular form path string.</returns>
            <remarks>This method does not handle paths with volume names, eg. \\?\Volume{GUID}\Folder\file.txt </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetShort83Path(System.String)">
            <summary>Retrieves the short path form of the specified path.</summary>
            <param name="path">An existing path to a folder or file.</param>
            <returns>A string with a path that has the 8.3 path form.</returns>
            <remarks>Will fail on NTFS volumes with disabled 8.3 name generation.</remarks>
            <remarks>The path must actually exist to be able to get the short path name.</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetShort83Path(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Retrieves the short path form of the specified path.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">An existing path to a folder or file.</param>
            <returns>A string with a path that has the 8.3 path form.</returns>
            <remarks>Will fail on NTFS volumes with disabled 8.3 name generation.</remarks>
            <remarks>The path must actually exist to be able to get the short path name.</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetSuffixedDirectoryName(System.String)">
            <summary>Returns the directory information for the specified <paramref name="path"/> with a trailing directory separator.</summary>
            <param name="path">The path.</param>
            <returns>The suffixed directory information for the specified <paramref name="path"/> with a trailing directory separator, or <see langref="null"/> if <paramref name="path"/> is <see langref="null"/> or if <paramref name="path"/> denotes a root (such as "\", "C:", or * "\\server\share").</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetSuffixedDirectoryName(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Returns the directory information for the specified <paramref name="path"/> with a trailing directory separator.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path.</param>
            <returns>The suffixed directory information for the specified <paramref name="path"/> with a trailing directory separator, or <see langref="null"/> if <paramref name="path"/> is <see langref="null"/> or if <paramref name="path"/> denotes a root (such as "\", "C:", or * "\\server\share").</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetSuffixedDirectoryNameWithoutRoot(System.String)">
            <summary>Returns the directory information for the specified <paramref name="path"/> without the root and with a trailing directory separator.</summary>
            <param name="path">The path.</param>
            <returns>The directory information for the specified <paramref name="path"/> without the root and with a trailing directory separator, or <see langref="null"/> if <paramref name="path"/> is <see langref="null"/>.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetSuffixedDirectoryNameWithoutRoot(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Returns the directory information for the specified <paramref name="path"/> without the root and with a trailing directory separator.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path.</param>
            <returns>The directory information for the specified <paramref name="path"/> without the root and with a trailing directory separator, or <see langref="null"/> if <paramref name="path"/> is <see langref="null"/>.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.IsLogicalDrive(System.String)">
            <summary>Determines whether the specified path starts with a Logical Drive; "C:"</summary>
            <param name="drive">A pointer to a string that contains the volume's Drive letter as either:  "C" or "C:\..."</param>
            <returns><c>true</c> if drive is a logical drive, <c>false</c> if it is not.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.IsLongPath(System.String)">
            <summary>Check if the given path starts with <see cref="F:Alphaleonis.Win32.Filesystem.Path.LongPathPrefix"/> or <see cref="F:Alphaleonis.Win32.Filesystem.Path.LongPathUncPrefix"/>.</summary>
            <param name="path">The path to the directory or file.</param>
            <returns><c>true</c> if path has a (UNC) long path prefix, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.IsUnc(System.String)">
            <summary>Determines whether the specified path is network share path.</summary>
            <param name="path">The path to check.</param>
            <returns>true if the specified path is a real network share path, otherwise false.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.LocalToUnc(System.String)">
            <summary>Converts a local path to a network share path.
            A Local path, e.g.: "C:\Windows" will be returned as: "\\localhostname\C$\Windows"
            If a logical drive points to a network share path, the share path will be returned.
            </summary>
            <param name="localPath">A local path, e.g.: "C:\Windows"</param>
            <returns>A UNC path or <see langword="null"/> when <paramref name="localPath"/> is an empty string or <see langword="null"/>.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.MakeDriveLetter(System.String)">
            <summary>Extract the drive letter from a string: "C:\Program..." --&gt; "C:"</summary>
            <param name="path">The path to extract a drive letter from.</param>
            <returns>
            A string with a valid drive letter followed by a <see cref="F:Alphaleonis.Win32.Filesystem.Path.VolumeSeparatorChar"/> like "C:"
            If <paramref name="path"/> does not start with a valid drive letter, <see langword="null"/> is returned.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.RemoveDirectorySeparator(System.String)">
            <summary>Removes the <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> character from the string.</summary>
            <param name="path">A text string from which the <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> is to be removed.</param>
            <returns>A text string where the suffixed <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> has been removed. The function returns <see langword="null"/> when <see param="path"/> is <see langword="null"/>.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.RemoveDirectorySeparator(System.String,System.Boolean)">
            <summary>Removes the <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> or <see cref="F:Alphaleonis.Win32.Filesystem.Path.AltDirectorySeparatorChar"/> character from the string.</summary>
            <param name="path">A text string from which the <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> or <see cref="F:Alphaleonis.Win32.Filesystem.Path.AltDirectorySeparatorChar"/> is to be removed.</param>
            <param name="removeAlternateSeparator">If true the <see cref="F:Alphaleonis.Win32.Filesystem.Path.AltDirectorySeparatorChar"/> character will be removed instead.</param>
            <returns>A text string where the suffixed <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> or <see cref="F:Alphaleonis.Win32.Filesystem.Path.AltDirectorySeparatorChar"/> character has been removed. The function returns <see langword="null"/> when <see param="path"/> is <see langword="null"/>.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.CheckInvalidPathChars(System.String,System.Boolean)">
            <summary>Checks that the path contains only valid path-characters.</summary>
            <param name="path">A path to the directory or file.</param>
            <param name="checkAdditional"></param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.DosDeviceToDosPath(System.String,System.String)">
            <summary>Tranlates DosDevicePath, Volume GUID.
            For example: "\Device\HarddiskVolumeX\path\filename.ext" can translate to: "\path\filename.ext" or: "\\?\Volume{GUID}\path\filename.ext".
            </summary>
            <param name="dosDevice">A DosDevicePath, for example: \Device\HarddiskVolumeX\path\filename.ext</param>
            <param name="deviceReplacement">Alternate path/device text, usually <see cref="F:System.String.Empty"/> or <see langword="null"/>.</param>
            <returns>A translated dos path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.EndsWithDVsc(System.String,System.Nullable{System.Boolean})">
            <summary>Check if <paramref name="path"/> ends with a directory- and/or volume-separator character.</summary>
            <param name="path">The patch to check.</param>
            <param name="checkVolumeSeparatorChar">
            If <c>null</c>, checks for all separator characters: <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/>, <see cref="F:Alphaleonis.Win32.Filesystem.Path.AltDirectorySeparatorChar"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.VolumeSeparatorChar"/>
            If <c>false</c>, only checks for: <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.AltDirectorySeparatorChar"/>
            If <c>true</c>, only checks for: <see cref="F:Alphaleonis.Win32.Filesystem.Path.VolumeSeparatorChar"/>
            </param>
            <returns><c>true</c> if <paramref name="path"/> ends with a separator character.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.IsDVsc(System.Char,System.Nullable{System.Boolean})">
            <summary>Check if <paramref name="c"/> is a directory- and/or volume-separator character.</summary>
            <param name="c">The character to check.</param>
            <param name="checkVolumeSeparatorChar">
            If <c>null</c>, checks for all separator characters: <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/>, <see cref="F:Alphaleonis.Win32.Filesystem.Path.AltDirectorySeparatorChar"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.VolumeSeparatorChar"/>
            If <c>false</c>, only checks for: <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.AltDirectorySeparatorChar"/>
            If <c>true</c>, only checks for: <see cref="F:Alphaleonis.Win32.Filesystem.Path.VolumeSeparatorChar"/>
            </param>
            <returns><c>true</c> if <paramref name="c"/> is a separator character.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetDirectoryNameWithoutRootInternal(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Unified method GetDirectoryNameWithoutRootInternal() to return the directory information for the specified path string without the root information, for example: C:\Windows\system32 --> Windows</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path.</param>
            <returns>The <paramref name="path"/>without the file name part and without the root information (if any), or <see langref="null"/> if <paramref name="path"/> is <see langref="null"/> or if <paramref name="path"/> denotes a root (such as "\", "C:", or * "\\server\share").</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetFullPathInternal(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Unified method GetFullPathInternal() to retrieve the absolute path for the specified path string.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file or directory for which to obtain absolute path information.</param>
            <returns>The fully qualified location of path, such as "C:\MyFile.txt".</returns>
            <remarks>GetFullPath does not work reliable with relative paths.</remarks>
            <remarks>GetFullPath is not recommended for multithreaded applications or shared library code.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetLongShort83PathInternal(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Boolean)">
            <summary>Unified method GetLongShort83PathInternal() to retrieve the short path form, or the regular long form of the specified path.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">An existing path to a folder or file.</param>
            <param name="getShort"><c>true</c> to retrieve the short path form, <c>false</c> to retrieve the regular long form from the 8.3 <paramref name="path"/>.</param>
            <returns>Depending on <paramref name="getShort"/> a string with a path that has the 8.3 path, or the regular long form</returns>
            <remarks>Will fail on NTFS volumes with disabled 8.3 name generation.</remarks>
            <remarks>The path must actually exist to be able to get the short- or long path name.</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetSuffixedDirectoryNameInternal(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Unified method GetSuffixedDirectoryNameInternal() to return the directory information for the specified <paramref name="path"/> with a trailing directory separator.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path.</param>
            <returns>The suffixed directory information for the specified <paramref name="path"/> with a trailing directory separator, or <see langref="null"/> if <paramref name="path"/> is <see langref="null"/> or if <paramref name="path"/> denotes a root (such as "\", "C:", or * "\\server\share").</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetSuffixedDirectoryNameWithoutRootInternal(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Unified method GetSuffixedDirectoryNameWithoutRootInternal() to return the directory information for the specified <paramref name="path"/> with a trailing directory separator.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path.</param>
            <returns>The suffixed directory information for the specified <paramref name="path"/> with a trailing directory separator, or <see langref="null"/> if <paramref name="path"/> is <see langref="null"/> or if <paramref name="path"/> denotes a root (such as "\", "C:", or * "\\server\share").</returns>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.BackupStreamAttributes">
            <summary>Attributes of data to facilitate cross-operating system transfer.</summary>
            <seealso cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/>    
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.BackupStreamAttributes.None">
            <summary>This backup stream has no special attributes.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.BackupStreamAttributes.ModifiedWhenRead">
            <summary>Attribute set if the stream contains data that is modified when read. Allows the backup application to know that verification of data will fail.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.BackupStreamAttributes.ContainsSecurity">
            <summary>Stream contains security data (general attributes). Allows the stream to be ignored on cross-operations restore. This attribute only applies to backup stream of type <see cref="F:Alphaleonis.Win32.Filesystem.BackupStreamTypes.SecurityData"/>.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.BackupStreamAttributes.ContainsProperties">
            <summary>Reserved.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.BackupStreamAttributes.Sparse">
            <summary>The backup stream is part of a sparse file stream. This attribute applies only to backup stream of type <see cref="F:Alphaleonis.Win32.Filesystem.BackupStreamTypes.Data"/>, <see cref="F:Alphaleonis.Win32.Filesystem.BackupStreamTypes.AlternateData"/>, and <see cref="F:Alphaleonis.Win32.Filesystem.BackupStreamTypes.SparseBlock"/>.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.BackupStreamInfo">
            <summary>The <see cref="T:Alphaleonis.Win32.Filesystem.BackupStreamInfo"/> structure contains stream header data.</summary>
            <seealso cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupStreamInfo.#ctor(Alphaleonis.Win32.Filesystem.NativeMethods.Win32StreamId)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.BackupStreamInfo"/> class.</summary>
            <param name="streamId">The <see cref="T:Alphaleonis.Win32.Filesystem.NativeMethods.Win32StreamId"/> stream ID.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupStreamInfo.#ctor(Alphaleonis.Win32.Filesystem.NativeMethods.Win32StreamId,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.BackupStreamInfo"/> class.</summary>
            <param name="streamId">The <see cref="T:Alphaleonis.Win32.Filesystem.NativeMethods.Win32StreamId"/> stream ID.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupStreamInfo.#ctor(Alphaleonis.Win32.Filesystem.NativeMethods.Win32StreamId,System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.BackupStreamInfo"/> class.</summary>
            <param name="streamId">The <see cref="T:Alphaleonis.Win32.Filesystem.NativeMethods.Win32StreamId"/> stream ID.</param>
            <param name="name">The name.</param>
            <param name="source">The source file where this instance points to.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupStreamInfo.#ctor(Alphaleonis.Win32.Filesystem.NativeMethods.Win32StreamId,System.String,Microsoft.Win32.SafeHandles.SafeFileHandle)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.BackupStreamInfo"/> class.</summary>
            <param name="streamId">The <see cref="T:Alphaleonis.Win32.Filesystem.NativeMethods.Win32StreamId"/> stream ID.</param>
            <param name="name">The name.</param>
            <param name="handle">The source <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle"/> handle where this instance points to.</param>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.BackupStreamInfo.Size">
            <summary>Gets the size of the data in the substream, in bytes.</summary>
            <value>The size of the data in the substream, in bytes.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.BackupStreamInfo.Name">
            <summary>Gets a string that specifies the name of the alternative data stream.</summary>
            <value>A string that specifies the name of the alternative data stream.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.BackupStreamInfo.StreamType">
            <summary>Gets the type of the data in the stream.</summary>
            <value>The type of the data in the stream.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.BackupStreamInfo.Attributes">
            <summary>Gets the attributes of the data to facilitate cross-operating system transfer.</summary>
            <value>Attributes of the data to facilitate cross-operating system transfer.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.BackupStreamInfo.Source">
            <summary>The source file where this instance points to.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.Shell32">
            <summary>Provides access to a file system object, using Shell32.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Shell32.FindExecutable(System.String)">
            <summary>Retrieves the name of the executable (.exe) file associated with a specific document file.
            This is the application that is launched when the document file is directly double-clicked or when Open is chosen from the file's shortcut menu.
            </summary>
            <param name="file">The file to search for, this file should be a document.</param>
            <returns>A path <see cref="T:System.String"/> to the found executable. If nothing is found or in case of errror, <see cref="F:System.String.Empty"/> is returned.</returns>
            <remarks>Use FindExecutable() for documents.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Shell32.FindExecutable(System.String,System.String)">
            <summary>Retrieves the name of the executable (.exe) file associated with a specific document file.
            This is the application that is launched when the document file is directly double-clicked or when Open is chosen from the file's shortcut menu.
            </summary>
            <param name="file">The file to search for, this file should be a document.</param>
            <param name="path">A path to the default directory, This value can be null.</param>
            <returns>A path <see cref="T:System.String"/> to the found executable. If nothing is found or in case of errror, <see cref="F:System.String.Empty"/> is returned.</returns>
            <remarks>Use FindExecutable() for documents.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Shell32.GetAssociation(System.String)">
            <summary>Searches for and retrieves a file or protocol association-related string from the registry.</summary>
            <param name="path">A path to the file.</param>
            <returns>
            Returns the associated file- or protocol-related string from the registry.
            If no association can be found, <see cref="F:System.String.Empty"/> is returned.
            If <paramref name="path"/> is <see langword="null"/>, <see langword="null"/> will also be returned.
            </returns>
            <remarks>Default used: <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes.Verify"/></remarks>
            <remarks>Default used: <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.Executable"/></remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Shell32.GetAssociation(System.String,Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes)">
            <summary>Searches for and retrieves a file or protocol association-related string from the registry.</summary>
            <param name="path">A path to the file.</param>
            <param name="attributes">A <see cref="T:Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes"/> attribute. Only one "InitXXX" attribute can be used.</param>
            <returns>
            Returns the associated file- or protocol-related string from the registry.
            If no association can be found, <see cref="F:System.String.Empty"/> is returned.
            If <paramref name="path"/> is <see langword="null"/>, <see langword="null"/> will also be returned.
            </returns>
            <remarks>Default used: <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.Executable"/></remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Shell32.GetAssociation(System.String,Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes,Alphaleonis.Win32.Filesystem.Shell32.AssociationString)">
            <summary>Searches for and retrieves a file or protocol association-related string from the registry.</summary>
            <param name="path">A path to a file.</param>
            <param name="attributes">A <see cref="T:Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes"/> attribute. Only one "InitXXX" attribute can be used.</param>
            <param name="associationType">A <see cref="T:Alphaleonis.Win32.Filesystem.Shell32.AssociationString"/> attribute.</param>
            <returns>
            Returns the associated file- or protocol-related string from the registry.
            If no association can be found, <see cref="F:System.String.Empty"/> is returned.
            If <paramref name="path"/> is <see langword="null"/>, <see langword="null"/> will also be returned.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Shell32.GetFileType(System.String)">
            <summary>Retrieves information about an object in the file system, such as a file, folder, directory, or drive root.</summary>
            <param name="path">The path to the file system object which should not exceed <see cref="F:Alphaleonis.Win32.Filesystem.NativeMethods.MaxPath"/>. Both absolute and relative paths are valid.</param>
            <returns>A string that describes the type of file, or null in case of failure or when type is unknown.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Shell32.PathCreateFromUrl(System.String)">
            <summary>Converts a file URL to a Microsoft MS-DOS path.</summary>
            <param name="urlPath">A string that contains the file URL.</param>
            <returns>
            A <see cref="T:System.String"/> containing a Microsoft MS-DOS path.
            If no path can be created, <see cref="F:System.String.Empty"/> is returned.
            If <paramref name="urlPath"/> is <see langword="null"/>, <see langword="null"/> will also be returned.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Shell32.PathCreateFromUrlAlloc(System.String)">
            <summary>Creates a path from a file URL.</summary>
            <param name="urlPath">A string that contains the URL.</param>
            <returns>
            A <see cref="T:System.String"/> containing the file path.
            If no path can be created, <see cref="F:System.String.Empty"/> is returned.
            If <paramref name="urlPath"/> is <see langword="null"/>, <see langword="null"/> will also be returned.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Shell32.PathFileExists(System.String)">
            <summary>Determines whether a path to a file system object such as a file or folder is valid.</summary>
            <param name="path">A string of maximum length <see cref="F:Alphaleonis.Win32.Filesystem.NativeMethods.MaxPath"/> that contains the full path of the object to verify.</param>
            <returns><c>true</c> if the file exists; otherwise, <c>false</c></returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Shell32.ShGetFileInfo(System.String)">
            <summary>Retrieves information about an object in the file system, such as a file, folder, directory, or drive root.</summary>
            <param name="path">The path to the file system object which should not exceed <see cref="F:Alphaleonis.Win32.Filesystem.NativeMethods.MaxPath"/>. Both absolute and relative paths are valid.</param>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.Shell32.FileInfo"/> struct object.</returns>
            <remarks>You should call this function from a background thread. Failure to do so could cause the UI to stop responding.</remarks>
            <remarks>LongPaths not supported.</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Shell32.ShGetFileInfo(System.String,System.IO.FileAttributes)">
            <summary>Retrieves information about an object in the file system, such as a file, folder, directory, or drive root.</summary>
            <param name="path">The path to the file system object which should not exceed <see cref="F:Alphaleonis.Win32.Filesystem.NativeMethods.MaxPath"/>. Both absolute and relative paths are valid.</param>
            <param name="attributes">A <see cref="T:System.IO.FileAttributes"/> attribute.</param>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.Shell32.FileInfo"/> struct object.</returns>
            <remarks>You should call this function from a background thread. Failure to do so could cause the UI to stop responding.</remarks>
            <remarks>LongPaths not supported.</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Shell32.ShGetFileInfo(System.String,System.IO.FileAttributes,Alphaleonis.Win32.Filesystem.Shell32.FileInfoAttributes)">
            <summary>Retrieves information about an object in the file system, such as a file, folder, directory, or drive root.</summary>
            <param name="path">The path to the file system object which should not exceed <see cref="F:Alphaleonis.Win32.Filesystem.NativeMethods.MaxPath"/>. Both absolute and relative paths are valid.</param>
            <param name="attributes">A <see cref="T:System.IO.FileAttributes"/> attribute.</param>
            <param name="fileInfoAttributes">A <see cref="T:Alphaleonis.Win32.Filesystem.Shell32.FileInfoAttributes"/> attribute.</param>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.Shell32.FileInfo"/> struct object.</returns>
            <remarks>You should call this function from a background thread. Failure to do so could cause the UI to stop responding.</remarks>
            <remarks>LongPaths not supported.</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Shell32.UrlIs(System.String,Alphaleonis.Win32.Filesystem.Shell32.UrlTypes)">
            <summary>Tests whether a URL is a specified type.</summary>
            <param name="url">A string containing the URL.</param>
            <param name="urlType"> </param>
            <returns>
            For all but one of the URL types, UrlIs returns true if the URL is the specified type, or false if not.
            If UrlIs is set to <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.UrlTypes.IsAppliable"/>, UrlIs will attempt to determine the URL scheme.
            If the function is able to determine a scheme, it returns true, or false otherwise.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Shell32.UrlCreateFromPath(System.String)">
            <summary>Converts a Microsoft MS-DOS path to a canonicalized URL.</summary>
            <param name="path"></param>
            <returns>A <see cref="T:System.String"/> containing the URL or <see langword="null"/> on failure or when <see param="path"/> is also <see langword="null"/>.</returns>
            <returns>
            A <see cref="T:System.String"/> containing the URL.
            If no URL can be created, <see cref="F:System.String.Empty"/> is returned.
            If <paramref name="path"/> is <see langword="null"/>, <see langword="null"/> will also be returned.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Shell32.UrlIsFileUrl(System.String)">
            <summary>Tests a URL to determine if it is a file URL.</summary>
            <param name="url">A string containing the URL.</param>
            <returns>Returns true if the URL is a file URL, or false otherwise.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Shell32.UrlIsNoHistory(System.String)">
            <summary>Returns whether a URL is a URL that browsers typically do not include in navigation history.</summary>
            <param name="url">A string containing the URL.</param>
            <returns>Returns true if the URL is a URL that is not included in navigation history, or false otherwise.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Shell32.UrlIsOpaque(System.String)">
            <summary>Returns whether a URL is opaque.</summary>
            <param name="url">A string containing the URL.</param>
            <returns>Returns true if the URL is opaque, or false otherwise.</returns>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.Shell32.FileInfo">
            <summary>FileInfo structure, contains information about a file system object.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfo.IconHandle">
            <summary>A handle to the icon that represents the file.</summary>
            <remarks>You are responsible for destroying this handle with DestroyIcon() when you no longer need it.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfo.IconIndex">
            <summary>The index of the icon image within the system image list.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfo.Attributes">
            <summary>An array of values that indicates the attributes of the file object.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfo.DisplayName">
            <summary>A string that contains the name of the file as it appears in the Windows Shell, or the path and file name of the file that contains the icon representing the file.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfo.TypeName">
            <summary>A string that describes the type of file.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.Shell32.FileInfoAttributes">
            <summary>FileInfoAttributes structure, used to retrieve the different types of a file system object.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfoAttributes.LargeIcon">
            <summary>Get file system object large icon.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfoAttributes.SmallIcon">
            <summary>Get file system object small icon.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfoAttributes.OpenIcon">
            <summary>Get file system object open icon.</summary>
            <remarks>A container object displays an open icon to indicate that the container is open.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfoAttributes.ShellIconSize">
            <summary>Get file system object Shell-sized icon.</summary>
            <remarks>If this attribute is not specified the function sizes the icon according to the system metric values.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfoAttributes.Pidl">
            <summary>Get file system object by its PIDL.</summary>
            <remarks>Indicate that the given file contains the address of an ITEMIDLIST structure rather than a path name.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfoAttributes.UseFileAttributes">
            <summary>Indicates that the given file should not be accessed. Rather, it should act as if the given file exists and use the supplied attributes.</summary>
            <remarks>This flag cannot be combined with the <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfoAttributes.Attributes"/>, <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfoAttributes.ExeType"/> or <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfoAttributes.Pidl"/> attributes.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfoAttributes.AddOverlays">
            <summary>Apply the appropriate overlays to the file's icon.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfoAttributes.OverlayIndex">
            <summary>Returns the index of the overlay icon.</summary>
            <remarks>The value of the overlay index is returned in the upper eight bits of the iIcon member of the structure specified by psfi.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfoAttributes.Icon">
            <summary>Retrieve the handle to the icon that represents the file and the index of the icon within the system image list.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfoAttributes.DisplayName">
            <summary>Retrieve the display name for the file.</summary>
            <remarks>The returned display name uses the long file name, if there is one, rather than the 8.3 form of the file name.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfoAttributes.TypeName">
            <summary>Retrieve the string that describes the file's type.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfoAttributes.Attributes">
            <summary>Retrieve the item attributes.</summary>
            <remarks>Will touch every file, degrading performance.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfoAttributes.IconLocation">
            <summary>Retrieve the name of the file that contains the icon representing the file specified by the given file.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfoAttributes.ExeType">
            <summary>Retrieve the type of the executable file if pszPath identifies an executable file.</summary>
            <remarks>This flag cannot be specified with any other attributes.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfoAttributes.SysIconIndex">
            <summary>Retrieve the index of a system image list icon.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfoAttributes.LinkOverlay">
            <summary>Add the link overlay to the file's icon.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfoAttributes.Selected">
            <summary>Blend the file's icon with the system highlight color.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfoAttributes.AttrSpecified">
            <summary>Indicates that <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfoAttributes.Attributes"/> contains specific attributes that are desired.</summary>
            <remarks>Will touch every file, degrading performance. This flag cannot be specified with the <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfoAttributes.Icon"/> attribute.</remarks>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf">
            <summary>Attributes that can be retrieved from a file system object.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.None">
            <summary>Default.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.CanCopy">
            <summary>The specified items can be copied.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.CanMove">
            <summary>The specified items can be moved.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.CanLink">
            <summary>Shortcuts can be created for the specified items.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.Storage">
            <summary>The specified items can be bound to an IStorage object through IShellFolder::BindToObject. For more information about namespace manipulation capabilities, see IStorage.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.CanRename">
            <summary>The specified items can be renamed. Note that this value is essentially a suggestion; not all namespace clients allow items to be renamed. However, those that do must have this attribute set.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.CanDelete">
            <summary>The specified items can be deleted.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.HasPropSheet">
            <summary>The specified items have property sheets.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.DropTarget">
            <summary>The specified items are drop targets.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.CapabilityMask">
            <summary>Mask for the capability attributes.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.System">
            <summary>The specified items are system items.</summary>
             <remarks>Windows 7 and later.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.Encrypted">
            <summary>The specified items are encrypted and might require special presentation.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.IsSlow">
            <summary>Accessing the item (through IStream or other storage interfaces) is expected to be a slow operation.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.Ghosted">
            <summary>The specified items are shown as dimmed and unavailable to the user.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.Link">
            <summary>The specified items are shortcuts.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.Share">
            <summary>The specified objects are shared.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.ReadOnly">
            <summary>The specified items are read-only. In the case of folders, this means that new items cannot be created in those folders.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.Hidden">
            <summary>The item is hidden and should not be displayed unless the Show hidden files and folders option is enabled in Folder Settings.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.DisplayAttrMask">
            <summary>Do not use.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.NonEnumerated">
            <summary>The items are nonenumerated items and should be hidden. They are not returned through an enumerator such as that created by the IShellFolder::EnumObjects method.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.NewContent">
            <summary>The items contain new content, as defined by the particular application.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.Stream">
            <summary>Indicates that the item has a stream associated with it.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.StorageAncestor">
            <summary>Children of this item are accessible through IStream or IStorage.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.Validate">
            <summary>When specified as input, instructs the folder to validate that the items contained in a folder or Shell item array exist.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.Removable">
            <summary>The specified items are on removable media or are themselves removable devices.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.Compressed">
            <summary>The specified items are compressed.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.Browsable">
            <summary>The specified items can be hosted inside a web browser or Windows Explorer frame.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.FileSysAncestor">
            <summary>The specified folders are either file system folders or contain at least one descendant (child, grandchild, or later) that is a file system folder.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.Folder">
            <summary>The specified items are folders.</summary>
            <remarks>
            Some items can be flagged with both <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.Stream"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.Folder"/>, such as a compressed file
            with a .zip file name extension. Some applications might include this flag when testing for items that are both files and containers.
            </remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.FileSystem">
            <summary>The specified folders or files are part of the file system (that is, they are files, directories, or root directories).</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributeOf.HasSubFolder">
            <summary>The specified folders have subfolders.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes">
            <summary>Provides information for the IQueryAssociations interface methods, used by Shell32.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes.None">
            <summary>None of the following options are set.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes.InitNoRemapClsid">
            <summary>Instructs not to map CLSID values to ProgID values.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes.InitByExeName">
            <summary>Identifies the value of the supplied file parameter (3rd parameter of function GetAssociation()) as an executable file name.</summary>
            <remarks>If this flag is not set, the root key will be set to the ProgID associated with the .exe key instead of the executable file's ProgID.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes.OpenByExeName">
            <summary>Identical to <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes.InitByExeName"/></summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes.InitDefaultToStar">
            <summary>Specifies that when an IQueryAssociation method does not find the requested value under the root key, it should attempt to retrieve the comparable value from the * subkey.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes.InitDefaultToFolder">
            <summary>Specifies that when an IQueryAssociation method does not find the requested value under the root key, it should attempt to retrieve the comparable value from the Folder subkey.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes.NoUserSettings">
            <summary>Specifies that only HKEY_CLASSES_ROOT should be searched, and that HKEY_CURRENT_USER should be ignored.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes.NoTruncate">
            <summary>Specifies that the return string should not be truncated. Instead, return an error value and the required size for the complete string.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes.Verify">
            <summary>
            Instructs IQueryAssociations methods to verify that data is accurate.
            This setting allows IQueryAssociations methods to read data from the user's hard disk for verification.
            For example, they can check the friendly name in the registry against the one stored in the .exe file.
            </summary>
            <remarks>Setting this flag typically reduces the efficiency of the method.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes.RemapRunDll">
            <summary>
            Instructs IQueryAssociations methods to ignore Rundll.exe and return information about its target.
            Typically IQueryAssociations methods return information about the first .exe or .dll in a command string.
            If a command uses Rundll.exe, setting this flag tells the method to ignore Rundll.exe and return information about its target.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes.NoFixUps">
            <summary>Instructs IQueryAssociations methods not to fix errors in the registry, such as the friendly name of a function not matching the one found in the .exe file.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes.IgnoreBaseClass">
            <summary>Specifies that the BaseClass value should be ignored.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes.InitIgnoreUnknown">
            <summary>Specifies that the "Unknown" ProgID should be ignored; instead, fail.</summary>
            <remarks>Introduced in Windows 7.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes.InitFixedProgId">
            <summary>(No description available on MSDN)</summary>
            <remarks>Introduced in Windows 8.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes.IsProtocol">
            <summary>(No description available on MSDN)</summary>
            <remarks>Introduced in Windows 8.</remarks>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.Shell32.AssociationString">
            <summary>Used by the GetAssociation() function (IQueryAssociations) to define the type of string that is to be returned.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.Command">
            <summary>A command string associated with a Shell verb.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.Executable">
            <summary>
            An executable from a Shell verb command string.
            For example, this string is found as the (Default) value for a subkey such as HKEY_CLASSES_ROOT\ApplicationName\shell\Open\command.
            If the command uses Rundll.exe, set the <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes.RemapRunDll"/> flag in the attributes parameter of IQueryAssociations::GetString to retrieve the target executable.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.FriendlyDocName">
            <summary>The friendly name of a document type.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.FriendlyAppName">
            <summary>The friendly name of an executable file.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.NoOpen">
            <summary>Ignore the information associated with the open subkey.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.ShellNewValue">
            <summary>Look under the ShellNew subkey.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.DDECommand">
            <summary>A template for DDE commands.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.DDEIfExec">
            <summary>The DDE command to use to create a process.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.DDEApplication">
            <summary>The application name in a DDE broadcast.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.DDETopic">
            <summary>The topic name in a DDE broadcast.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.InfoTip">
            <summary>
            Corresponds to the InfoTip registry value.
            Returns an info tip for an item, or list of properties in the form of an IPropertyDescriptionList from which to create an info tip, such as when hovering the cursor over a file name.
            The list of properties can be parsed with PSGetPropertyDescriptionListFromString.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.QuickTip">
            <summary>
            Corresponds to the QuickTip registry value. This is the same as <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.InfoTip"/>, except that it always returns a list of property names in the form of an IPropertyDescriptionList.
            The difference between this value and <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.InfoTip"/> is that this returns properties that are safe for any scenario that causes slow property retrieval, such as offline or slow networks.
            Some of the properties returned from <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.InfoTip"/> might not be appropriate for slow property retrieval scenarios.
            The list of properties can be parsed with PSGetPropertyDescriptionListFromString.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.TileInfo">
            <summary>
            Corresponds to the TileInfo registry value. Contains a list of properties to be displayed for a particular file type in a Windows Explorer window that is in tile view.
            This is the same as <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.InfoTip"/>, but, like <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.QuickTip"/>, it also returns a list of property names in the form of an IPropertyDescriptionList.
            The list of properties can be parsed with PSGetPropertyDescriptionListFromString.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.ContentType">
            <summary>
            Describes a general type of MIME file association, such as image and bmp,
            so that applications can make general assumptions about a specific file type.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.DefaultIcon">
            <summary>
            Returns the path to the icon resources to use by default for this association.
            Positive numbers indicate an index into the dll's resource table, while negative numbers indicate a resource ID.
            An example of the syntax for the resource is "c:\myfolder\myfile.dll,-1".
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.ShellExtension">
            <summary>
            For an object that has a Shell extension associated with it,
            you can use this to retrieve the CLSID of that Shell extension object by passing a string representation
            of the IID of the interface you want to retrieve as the pwszExtra parameter of IQueryAssociations::GetString.
            For example, if you want to retrieve a handler that implements the IExtractImage interface,
            you would specify "{BB2E617C-0920-11d1-9A0B-00C04FC2D6C1}", which is the IID of IExtractImage.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.DropTarget">
            <summary>
            For a verb invoked through COM and the IDropTarget interface, you can use this flag to retrieve the IDropTarget object's CLSID.
            This CLSID is registered in the DropTarget subkey.
            The verb is specified in the supplied file parameter in the call to IQueryAssociations::GetString.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.DelegateExecute">
            <summary>
            For a verb invoked through COM and the IExecuteCommand interface, you can use this flag to retrieve the IExecuteCommand object's CLSID.
            This CLSID is registered in the verb's command subkey as the DelegateExecute entry.
            The verb is specified in the supplied file parameter in the call to IQueryAssociations::GetString.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.SupportedUriProtocols">
            <summary>(No description available on MSDN)</summary>
            <remarks>Introduced in Windows 8.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.Max">
            <summary>The maximum defined <see cref="T:Alphaleonis.Win32.Filesystem.Shell32.AssociationString"/> value, used for validation purposes.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.Shell32.UrlTypes">
            <summary>Used by method UrlIs() to define a URL type.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.UrlTypes.IsUrl">
            <summary>Is the URL valid?</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.UrlTypes.IsOpaque">
            <summary>Is the URL opaque?</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.UrlTypes.IsNoHistory">
            <summary>Is the URL a URL that is not typically tracked in navigation history?</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.UrlTypes.IsFileUrl">
            <summary>Is the URL a file URL?</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.UrlTypes.IsAppliable">
            <summary>Attempt to determine a valid scheme for the URL.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.UrlTypes.IsDirectory">
            <summary>Does the URL string end with a directory?</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.UrlTypes.IsHasquery">
            <summary>Does the URL have an appended query string?</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Network.DfsInfo">
            <summary>DFS_INFO_4 - Contains information about a Distributed File System (DFS) root or link.
            This structure contains the name, status, GUID, time-out, number of targets, and information about each target of the root or link.
            </summary>
            <remarks>A DFS_INFO_4 structure contains one or more <see cref="T:Alphaleonis.Win32.Network.NativeMethods.DfsStorageInfo"/> structures, one for each DFS target.</remarks>
            <remarks>This structure is only for use with the NetDfsEnum, NetDfsGetClientInfo, and NetDfsGetInfo functions.</remarks>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Network.DfsInfo.#ctor">
            <summary></summary>
        </member>
        <member name="P:Alphaleonis.Win32.Network.DfsInfo.Comment">
            <summary>A <see cref="T:System.String"/> that contains a comment associated with the DFS root or link.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Network.DfsInfo.EntryPath">
            <summary>A <see cref="T:System.String"/> that specifies the Universal Naming Convention (UNC) path of a DFS root or link.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Network.DfsInfo.NumberOfStorages">
            <summary>Specifies the number of DFS targets.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Network.DfsInfo.State">
            <summary>A <see cref="T:Alphaleonis.Win32.Network.DfsVolumeStates"/> that specifies a set of bit flags that describe the DFS root or link.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Network.DfsInfo.Timeout">
            <summary>Specifies the time-out, in seconds, of the DFS root or link.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Network.DfsInfo.Guid">
            <summary>Specifies the GUID of the DFS root or link.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Network.DfsInfo.DirectoryInfo">
            <summary>The <see cref="P:Alphaleonis.Win32.Network.DfsInfo.DirectoryInfo"/> instance for this DfsInfo instance.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Network.DfsInfo.Transaction">
            <summary>The transaction.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Network.DfsStorage">
            <summary>DFS_STORAGE_INFO - Contains information about a DFS root or link target in a DFS namespace or from the cache maintained by the DFS client.
            Information about a DFS root or link target in a DFS namespace is retrieved by calling the NetDfsGetInfo function.
            Information about a DFS root or link target from the cache maintained by the DFS client is retrieved by calling the NetDfsGetClientInfo function.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Network.DfsStorage.#ctor(Alphaleonis.Win32.Network.NativeMethods.DfsStorageInfo)">
            <summary>DFS_STORAGE_INFO - Contains information about a DFS root or link target in a DFS namespace or from the cache maintained by the DFS client.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Network.DfsStorage.ServerName">
            <summary>A <see cref="T:System.String"/> that specifies the DFS root target or link target server name.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Network.DfsStorage.ShareName">
            <summary>A <see cref="T:System.String"/> that specifies the DFS root target or link target share name.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Network.DfsStorage.State">
            <summary>State of the target.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.MaxPreferredLength">
            <summary>MAX_PREFERRED_LENGTH = -1: If you specify MAX_PREFERRED_LENGTH, the function allocates the amount of memory required for the data.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Network.NativeMethods.WNetGetUniversalName(System.String,System.UInt32,Alphaleonis.Win32.SafeGlobalMemoryBufferHandle,System.UInt32@)">
            <summary>The WNetGetUniversalName function takes a drive-based path for a network resource and returns an information structure that contains a more universal form of the name.</summary>
            <returns>
            If the function succeeds, the return value is <see cref="F:Alphaleonis.Win32.Win32Errors.NO_ERROR"/>
            If the function fails, the return value is a system error code.
            </returns>
            <remarks>Minimum supported client: Windows 2000 Professional [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows 2000 Server [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Network.NativeMethods.NetApiBufferFree(System.IntPtr)">
            <summary>The NetApiBufferFree function frees the memory that the NetApiBufferAllocate function allocates.</summary>
            <returns>
            If the function succeeds, the return value is NERR_Success.
            If the function fails, the return value is a system error code.
            </returns>
            <remarks>Minimum supported client: Windows 2000 Professional [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows 2000 Server [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Network.NativeMethods.NetDfsEnum(System.String,Alphaleonis.Win32.Network.NativeMethods.DfsInfoLevel,System.Int32,Alphaleonis.Win32.Network.SafeNetApiBuffer@,System.UInt32@,System.UInt32@)">
            <summary>Enumerates the Distributed File System (DFS) namespaces hosted on a server or DFS links of a namespace hosted by a server.</summary>
            <remarks>
            If the function succeeds, the return value is NERR_Success.
            If the function fails, the return value is a system error code.
            </remarks>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Network.NativeMethods.NetDfsGetClientInfo(System.String,System.String,System.String,Alphaleonis.Win32.Network.NativeMethods.DfsInfoLevel,Alphaleonis.Win32.Network.SafeNetApiBuffer@)">
            <summary>Retrieves information about a Distributed File System (DFS) root or link from the cache maintained by the DFS client.</summary>
            <returns>
            If the function succeeds, the return value is NERR_Success.
            If the function fails, the return value is a system error code.
            </returns>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Network.NativeMethods.NetDfsGetInfo(System.String,System.String,System.String,Alphaleonis.Win32.Network.NativeMethods.DfsInfoLevel,Alphaleonis.Win32.Network.SafeNetApiBuffer@)">
            <summary>Retrieves information about a specified Distributed File System (DFS) root or link in a DFS namespace.</summary>
            <returns>
            If the function succeeds, the return value is NERR_Success.
            If the function fails, the return value is a system error code.
            </returns>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Network.NativeMethods.NetFileClose(System.String,System.UInt32)">
            <summary>Forces a resource to close. This function can be used when an error prevents closure by any other means.</summary>
            <returns>
            If the function succeeds, the return value is NERR_Success.
            If the function fails, the return value is a system error code.
            </returns>
            <remarks>You should use NetFileClose with caution because it does not write data cached on the client system to the file before closing the file.</remarks>
            <remarks>Only members of the Administrators or Server Operators local group can successfully execute the NetFileEnum function.</remarks>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Network.NativeMethods.NetFileEnum(System.String,System.String,System.String,System.UInt32,Alphaleonis.Win32.Network.SafeNetApiBuffer@,System.Int32,System.UInt32@,System.UInt32@,System.UInt32@)">
            <summary>Returns information about some or all open files on a server, depending on the parameters specified.</summary>
            <returns>
            If the function succeeds, the return value is NERR_Success.
            If the function fails, the return value is a system error code.
            </returns>
            <remarks>Only members of the Administrators or Server Operators local group can successfully execute the NetFileEnum function.</remarks>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Network.NativeMethods.NetServerDiskEnum(System.String,Alphaleonis.Win32.Network.ShareInfoLevel,Alphaleonis.Win32.Network.SafeNetApiBuffer@,System.Int32,System.UInt32@,System.UInt32@,System.UInt32@)">
            <summary>The NetServerDiskEnum function retrieves a list of local disk drives on a server.</summary>
            <returns>
            If the function succeeds, the return value is NERR_Success.
            If the function fails, the return value is a system error code.
            </returns>
            <remarks>The function returns an array of three-character strings (a drive letter, a colon, and a terminating null character).</remarks>
            <remarks>Only members of the Administrators or Server Operators local group can successfully execute the NetServerDiskEnum function on a remote computer.</remarks>
            <remarks>Minimum supported client: Windows 2000 Professional [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows 2000 Server [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Network.NativeMethods.NetShareEnum(System.String,Alphaleonis.Win32.Network.ShareInfoLevel,Alphaleonis.Win32.Network.SafeNetApiBuffer@,System.Int32,System.UInt32@,System.UInt32@,System.UInt32@)">
            <summary>Retrieves information about each (hidden) Server Message Block (SMB) resource/share on a server.</summary>
            <returns>
            If the function succeeds, the return value is NERR_Success.
            If the function fails, the return value is a system error code.
            </returns>
            <remarks>
            For interactive users (users who are logged on locally to the machine), no special group membership is required to execute the NetShareEnum function.
            For non-interactive users, Administrator, Power User, Print Operator, or Server Operator group membership is required to successfully execute
            the NetShareEnum function at levels 2, 502, and 503. No special group membership is required for level 0 or level 1 calls.
            </remarks>
            <remarks>Windows Server 2003 and Windows XP: For all users, Administrator, Power User, Print Operator, or Server Operator group membership is required to successfully execute the NetShareEnum function at levels 2 and 502.</remarks>
            <remarks>You can also use the WNetEnumResource function to retrieve resource information. However, WNetEnumResource does not enumerate hidden shares or users connected to a share.</remarks>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Network.NativeMethods.NetShareGetInfo(System.String,System.String,Alphaleonis.Win32.Network.ShareInfoLevel,Alphaleonis.Win32.Network.SafeNetApiBuffer@)">
            <summary>Retrieves information about a particular Server Message Block (SMB) shared resource on a server.</summary>
            <returns>
            If the function succeeds, the return value is NERR_Success.
            If the function fails, the return value is a system error code.
            </returns>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="T:Alphaleonis.Win32.Network.NativeMethods.DfsInfoLevel">
            <summary>Specifies the information level of the request.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.DfsInfoLevel.None">
            <summary></summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.DfsInfoLevel.DfsInfo4">
            <summary>Use DFS_INFO_4 structure</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.DfsInfoLevel.DfsInfo200">
            <summary>Use DFS_INFO_200 structure</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.DfsInfoLevel.DfsInfo300">
            <summary>Use DFS_INFO_300 structure</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Network.NativeMethods.DfsNamespaceFlavors">
            <summary>Contains the name and type (domain-based or stand-alone) of a DFS namespace.</summary>
            <remarks>Minimum supported client: Windows XP with SP1 [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.DfsNamespaceFlavors.None">
            <summary></summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.DfsNamespaceFlavors.Standalone">
            <summary>DFS_VOLUME_FLAVOR_STANDALONE (0x00000100) - Specifies a stand-alone DFS namespace.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.DfsNamespaceFlavors.AdBlob">
            <summary>DFS_VOLUME_FLAVOR_AD_BLOB (0x00000200) - Specifies a domain-based DFS namespace.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.DfsNamespaceFlavors.All">
            <summary>DFS_VOLUME_FLAVORS bitmask (0x00000300) - Used to extract the DFS namespace flavor.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Network.NativeMethods.FileInfo3">
            <summary>FILE_INFO_3 - Contains the identifier and other pertinent information about files, devices, and pipes.</summary>
            <remarks>This structure is only for use with the NetFileEnum function.</remarks>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.FileInfo3.Id">
            <summary>The identification number assigned to the resource when it is opened.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.FileInfo3.Permissions">
            <summary>The access permissions associated with the opening application. This member can be one or more of the following values.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.FileInfo3.TotalLocks">
            <summary>The number of file locks on the file, device, or pipe.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.FileInfo3.PathName">
            <summary>The path of the opened resource.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.FileInfo3.UserName">
            <summary>Specifies which user (on servers that have user-level security) or which computer (on servers that have share-level security) opened the resource.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Network.NativeMethods.DfsInfo200">
            <summary>DFS_INFO_200 - Contains the name of a domain-based Distributed File System (DFS) namespace.</summary>
            <remarks>This structure is only for use with the NetDfsEnum, NetDfsGetClientInfo, and NetDfsGetInfo functions.</remarks>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.DfsInfo200.FtDfsName">
            <summary>A <see cref="T:System.String"/> that contains the name of a domain-based DFS namespace.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Network.NativeMethods.DfsInfo300">
            <summary>DFS_INFO_300 - Contains the name and type (domain-based or stand-alone) of a DFS namespace.</summary>
            <remarks>The DFS functions use the <see cref="T:Alphaleonis.Win32.Network.NativeMethods.DfsInfo300"/> structure to enumerate DFS namespaces hosted on a machine.</remarks>
            <remarks>Minimum supported client: Windows XP with SP1 [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.DfsInfo300.Flags">
            <summary>Value that specifies the type of the DFS namespace. This member can be one of the <see cref="T:Alphaleonis.Win32.Network.NativeMethods.DfsNamespaceFlavors"/> values.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.DfsInfo300.DfsName">
            <summary>A <see cref="T:System.String"/> that contains the name of a DFS namespace.
            This member can have one of the following two formats:
            The first format is: \ServerName\DfsName
            where ServerName is the name of the root target server that hosts the stand-alone DFS namespace and DfsName is the name of the DFS namespace.
            The second format is:
            \DomainName\DomDfsName
            where DomainName is the name of the domain that hosts the domain-based DFS namespace and DomDfsname is the name of the DFS namespace.
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Network.NativeMethods.DfsInfo4">
            <summary>DFS_INFO_4 - Contains information about a Distributed File System (DFS) root or link.
            This structure contains the name, status, number of DFS targets, and information about each target of the root or link. 
            </summary>
            <remarks>A DFS_INFO_4 structure contains one or more <see cref="T:Alphaleonis.Win32.Network.NativeMethods.DfsStorageInfo"/> structures, one for each DFS target.</remarks>
            <remarks>This structure is only for use with the NetDfsEnum, NetDfsGetClientInfo, and NetDfsGetInfo functions.</remarks>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.DfsInfo4.EntryPath">
            <summary>A <see cref="T:System.String"/> that specifies the Universal Naming Convention (UNC) path of a DFS root or link.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.DfsInfo4.Comment">
            <summary>A <see cref="T:System.String"/> that contains a comment associated with the DFS root or link.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.DfsInfo4.State">
            <summary>A <see cref="T:Alphaleonis.Win32.Network.DfsVolumeStates"/> that specifies a set of bit flags that describe the DFS root or link.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.DfsInfo4.Timeout">
            <summary>Specifies the time-out, in seconds, of the DFS root or link.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.DfsInfo4.Guid">
            <summary>Specifies the GUID of the DFS root or link.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.DfsInfo4.NumberOfStorages">
            <summary>Specifies the number of DFS targets.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.DfsInfo4.Storage">
            <summary>An array of <see cref="T:Alphaleonis.Win32.Network.NativeMethods.DfsStorageInfo"/> structures. The NumberOfStorages member specifies the number of structures in the array.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Network.NativeMethods.DfsStorageInfo">
            <summary>DFS_STORAGE_INFO - Contains information about a DFS root or link target in a DFS namespace or from the cache maintained by the DFS client.</summary>
            <remarks>The <see cref="T:Alphaleonis.Win32.Network.DfsInfo"/> structure contains one or more <see cref="T:Alphaleonis.Win32.Network.NativeMethods.DfsStorageInfo"/> structures, one for each DFS target.
            Only one target can be marked as the active target. It is possible that no targets will be marked active.
            </remarks>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.DfsStorageInfo.State">
            <summary>State of the target.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.DfsStorageInfo.ServerName">
            <summary>A <see cref="T:System.String"/> that specifies the DFS root target or link target server name.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.DfsStorageInfo.ShareName">
            <summary>A <see cref="T:System.String"/> that specifies the DFS root target or link target share name.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Network.NativeMethods.RemoteNameInfo">
            <summary>REMOTE_NAME_INFO - The RemoteNameInfo structure contains path and name information for a network resource.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.RemoteNameInfo.UniversalName">
            <summary>Pointer to the null-terminated UNC name string that identifies a network resource.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.RemoteNameInfo.ConnectionName">
            <summary>Pointer to a null-terminated string that is the name of a network connection.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.RemoteNameInfo.RemainingPath">
            <summary>Pointer to a null-terminated name string.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Network.NativeMethods.ShareInfo1005">
            <summary>SHARE_INFO_1005 - Contains information about the shared resource.</summary>
            <remarks>This structure can be retrieved by calling the NetShareGetInfo function.</remarks>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.ShareInfo1005.ResourceType">
            <summary>A bitmask of flags that specify information about the shared resource.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Network.NativeMethods.ShareInfo2">
            <summary>SHARE_INFO_2 - Contains information about the shared resource, including the name, type,
            and permissions of the resource, comments associated with the resource, the maximum number of concurrent connections,
            the number of current connections, the local path for the resource, and a password for the current connection.
            </summary>
            <remarks>Share information, NT, level 2, requires admin rights to work.</remarks>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.ShareInfo2.NetName">
            <summary>The name of a shared resource.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.ShareInfo2.ShareType">
            <summary>The type of share.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.ShareInfo2.Remark">
            <summary>An optional comment about the shared resource.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.ShareInfo2.Permissions">
            <summary>The shared resource's permissions for servers running with share-level security.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.ShareInfo2.MaxUses">
            <summary>The maximum number of concurrent connections that the shared resource can accommodate.</summary>
            <remarks>The number of connections is unlimited if the value specified in this member is –1.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.ShareInfo2.CurrentUses">
            <summary>The number of current connections to the resource.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.ShareInfo2.Path">
            <summary>The local path for the shared resource.</summary>
            <remarks>For disks, this member is the path being shared. For print queues, this member is the name of the print queue being shared.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.ShareInfo2.Password">
            <summary>The share's password (when the server is running with share-level security).</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Network.NativeMethods.ShareInfo503">
            <summary>SHARE_INFO_503 - Contains information about the shared resource,
            including the server name, name of the resource, type, and permissions, the number of connections, and other pertinent information.
            </summary>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.ShareInfo503.NetName">
            <summary>The name of a shared resource.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.ShareInfo503.ShareType">
            <summary>The type of share.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.ShareInfo503.Remark">
            <summary>An optional comment about the shared resource.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.ShareInfo503.Permissions">
            <summary>The shared resource's permissions for servers running with share-level security.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.ShareInfo503.MaxUses">
            <summary>The maximum number of concurrent connections that the shared resource can accommodate.</summary>
            <remarks>The number of connections is unlimited if the value specified in this member is –1.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.ShareInfo503.CurrentUses">
            <summary>The number of current connections to the resource.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.ShareInfo503.Path">
            <summary>The local path for the shared resource.</summary>
            <remarks>For disks, this member is the path being shared. For print queues, this member is the name of the print queue being shared.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.ShareInfo503.Password">
            <summary>The share's password (when the server is running with share-level security).</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.ShareInfo503.ServerName">
            <summary>A pointer to a string that specifies the DNS or NetBIOS name of the remote server on which the shared resource resides.</summary>
            <remarks>A value of "*" indicates no configured server name.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.ShareInfo503.Reserved">
            <summary>Reserved; must be zero.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.ShareInfo503.SecurityDescriptor">
            <summary>Specifies the SECURITY_DESCRIPTOR associated with this share.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Network.DfsStorageStates">
            <summary>State of the target.</summary>
            <remarks>When this structure is returned as a result of calling the NetDfsGetInfo function, this member can be one of the following values.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Network.DfsStorageStates.None">
            <summary></summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.DfsStorageStates.Offline">
            <summary>DFS_STORAGE_STATE_OFFLINE (0x00000001) - The DFS root or link target is offline.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.DfsStorageStates.Online">
            <summary>DFS_STORAGE_STATE_ONLINE (0x00000002) - The DFS root or link target is online.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.DfsStorageStates.Active">
            <summary>DFS_STORAGE_STATE_ACTIVE (0x00000004) - The DFS root or link target is the active target.</summary>
            <remarks>
            When this structure is returned as a result of calling the NetDfsGetClientInfo function, the <see cref="F:Alphaleonis.Win32.Network.DfsStorageStates.Online"/> state is set by default.
            If the target is the active target in the DFS client cache, the following value is logically combined with the default value via the OR operator.
            </remarks>
        </member>
        <member name="T:Alphaleonis.Win32.Network.DfsVolumeStates">
            <summary></summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.DfsVolumeStates.None">
            <summary></summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.DfsVolumeStates.Ok">
            <summary>DFS_VOLUME_STATE_OK (0x00000001) - The specified DFS root or link is in the normal state.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.DfsVolumeStates.Inconsistent">
            <summary>DFS_VOLUME_STATE_INCONSISTENT (0x00000002) - The internal DFS database is inconsistent with the specified DFS root or link.
            Attempts to repair the inconsistency have failed.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.DfsVolumeStates.Offline">
            <summary>DFS_VOLUME_STATE_OFFLINE (0x00000003) - The specified DFS root or link is offline or unavailable.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.DfsVolumeStates.Online">
            <summary>DFS_VOLUME_STATE_ONLINE (0x00000004) - The specified DFS root or link is available.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.DfsVolumeStates.Standalone">
            <summary>DFS_VOLUME_FLAVOR_STANDALONE (0x00000100) - The system sets this flag if the root is associated with a stand-alone DFS namespace.</summary>
            <remarks>Windows XP: This value is not supported.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Network.DfsVolumeStates.AdBlob">
            <summary>DFS_VOLUME_FLAVOR_AD_BLOB (0x00000200) - The system sets this flag if the root is associated with a domain-based DFS namespace.</summary>
            <remarks>Windows XP: This value is not supported.</remarks>
        </member>
        <member name="T:Alphaleonis.Win32.Network.OpenResourceInfoPermissions">
            <summary>Enum for the <see cref="T:Alphaleonis.Win32.Network.OpenResourceInfo"/> structure.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.OpenResourceInfoPermissions.None">
            <summary></summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.OpenResourceInfoPermissions.Read">
            <summary>PERM_FILE_READ (0x1) - Permission to read a resource and, by default, execute the resource.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.OpenResourceInfoPermissions.Write">
            <summary>PERM_FILE_WRITE (0x2) - Permission to write to a resource.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.OpenResourceInfoPermissions.Create">
            <summary>PERM_FILE_CREATE (0x4) - Permission to create a resource; data can be written when creating the resource.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.OpenResourceInfoPermissions.AccessExecute">
            <summary>PERM_FILE_CREATE (0x8) - Permission to execute a resource.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.OpenResourceInfoPermissions.AccessDelete">
            <summary>PERM_FILE_CREATE (0x10) - Permission to delete a resource.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.OpenResourceInfoPermissions.AccessAttributes">
            <summary>PERM_FILE_CREATE (0x20) - Permission to modify the attributes of a resource.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.OpenResourceInfoPermissions.AccessPermissions">
            <summary>PERM_FILE_CREATE (0x40) - Permission to modify the permissions assigned to a resource for a user or application.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Network.ShareInfoLevel">
            <summary>Enum for the <see cref="T:Alphaleonis.Win32.Network.ShareInfo"/> structure.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.ShareInfoLevel.None">
            <summary></summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.ShareInfoLevel.ShareInfo2">
            <summary>Use SHARE_INFO_2 structure</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.ShareInfoLevel.ShareInfo503">
            <summary>Use SHARE_INFO_503 structure</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.ShareInfoLevel.ShareInfo1005">
            <summary>Use SHARE_INFO_1005 structure</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Network.ShareInfoTypes">
            <summary>Contains information about the shared resource.</summary>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Network.ShareInfoTypes.None">
            <summary></summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.ShareInfoTypes.Dfs">
            <summary>SHI1005_FLAGS_DFS (0x0001) - The specified share is present in a Dfs tree structure. This flag cannot be set with NetShareSetInfo.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.ShareInfoTypes.DfsRoot">
            <summary>SHI1005_FLAGS_DFS_ROOT (0x0002) - The specified share is the root volume in a Dfs tree structure. This flag cannot be set with NetShareSetInfo.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.ShareInfoTypes.RestrictExclusiveOpens">
            <summary>SHI1005_FLAGS_RESTRICT_EXCLUSIVE_OPENS (0x0100) - The specified share disallows exclusive file opens, where reads to an open file are disallowed.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.ShareInfoTypes.ForceSharedDelete">
            <summary>SHI1005_FLAGS_FORCE_SHARED_DELETE (0x0200) - Shared files in the specified share can be forcibly deleted.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.ShareInfoTypes.AllowNamespaceCaching">
            <summary>SHI1005_FLAGS_ALLOW_NAMESPACE_CACHING (0x0400) - Clients are allowed to cache the namespace of the specified share.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.ShareInfoTypes.AccessBasedDirectoryEnum">
            <summary>SHI1005_FLAGS_ACCESS_BASED_DIRECTORY_ENUM (0x0800) - The server will filter directory entries based on the access permissions that the user on the client computer has for the server on which the files reside.
            Only files for which the user has read access and directories for which the user has FILE_LIST_DIRECTORY access will be returned. If the user has SeBackupPrivilege, all available information will be returned.
            </summary>
            <remarks>This flag is supported only on servers running Windows Server 2003 with SP1 or later.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Network.ShareInfoTypes.ForceLevel2OpLock">
            <summary>SHI1005_FLAGS_FORCE_LEVELII_OPLOCK (0x1000) - Prevents exclusive caching modes that can cause delays for highly shared read-only data.</summary>
            <remarks>This flag is supported only on servers running Windows Server 2008 R2 or later.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Network.ShareInfoTypes.EnableHash">
            <summary>SHI1005_FLAGS_ENABLE_HASH (0x2000) - Enables server-side functionality needed for peer caching support. Clients on high-latency or low-bandwidth connections can use alternate methods to retrieve data from peers if available, instead of sending requests to the server. This is only supported on shares configured for manual caching (CSC_CACHE_MANUAL_REINT).</summary>
            <remarks>This flag is supported only on servers running Windows Server 2008 R2 or later.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Network.ShareInfoTypes.EnableCa">
            <summary>SHI1005_FLAGS_ENABLE_CA (0X4000) - Enables server-side functionality needed for peer caching support. Clients on high-latency or low-bandwidth connections can use alternate methods to retrieve data from peers if available, instead of sending requests to the server. This is only supported on shares configured for manual caching (CSC_CACHE_MANUAL_REINT).</summary>
            <remarks>Windows 7, Windows Server 2008 R2, Windows Vista, Windows Server 2008, and Windows Server 2003:  This flag is not supported.</remarks>
        </member>
        <member name="T:Alphaleonis.Win32.Network.ShareTypes">
            <summary>The type of the shared resource.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.ShareTypes.DiskTree">
            <summary>Disk tree.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.ShareTypes.PrintQueue">
            <summary>Print queue.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.ShareTypes.Device">
            <summary>Communication device.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.ShareTypes.Ipc">
            <summary>Special share reserved for interprocess communication (IPC$).</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.ShareTypes.Temporary">
            <summary>A temporary share.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.ShareTypes.Special">
            <summary>Special.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Network.Host">
            <summary>Provides static methods to retrieve share-resource information from a local- or remote host.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.EnumerateDfsLinks(System.String)">
            <summary>Enumerates the DFS Links from a DFS namespace.</summary>
            <param name="dfsName">A <see cref="T:System.String"/> that specifies the Universal Naming Convention (UNC) path of a DFS root or link.</param>
            <returns>Returns <see cref="T:System.Collections.Generic.IEnumerable`1"/> of DFS namespaces.</returns>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.EnumerateDfsRoot">
            <summary>Enumerates the DFS namespaces from the local host.</summary>
            <returns>Returns <see cref="T:System.Collections.Generic.IEnumerable`1"/> of DFS Root namespaces from the local host.</returns>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.EnumerateDfsRoot(System.String)">
            <summary>Enumerates the DFS namespaces from a remote host.</summary>
            <param name="host">A <see cref="T:System.String"/> that specifies the DNS or NetBIOS name of a remote host.</param>
            <returns>Returns <see cref="T:System.Collections.Generic.IEnumerable`1"/> of DFS Root namespaces from a remote host.</returns>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.EnumerateDomainDfsRoot">
            <summary>Enumerates the DFS namespaces from the domain.</summary>
            <returns>Returns <see cref="T:System.Collections.Generic.IEnumerable`1"/> of DFS Root namespaces from the domain.</returns>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.EnumerateDomainDfsRoot(System.String)">
            <summary>Enumerates the DFS namespaces from a domain.</summary>
            <param name="domain">A <see cref="T:System.String"/> containing a domain name.</param>
            <returns>Returns <see cref="T:System.Collections.Generic.IEnumerable`1"/> of DFS Root namespaces from a domain.</returns>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.GetDfsClientInfo(System.String)">
            <summary>Retrieves information about a DFS root or link from the cache maintained by the DFS client.</summary>
            <param name="dfsName">A <see cref="T:System.String"/> that specifies the Universal Naming Convention (UNC) path of a DFS root or link.</param>
            <returns>Returns <see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.GetDfsClientInfo(System.String,System.String,System.String)">
            <summary>Retrieves information about a DFS root or link from the cache maintained by the DFS client.</summary>
            <param name="dfsName">A <see cref="T:System.String"/> that specifies the Universal Naming Convention (UNC) path of a DFS root or link.</param>
            <param name="serverName">A <see cref="T:System.String"/> that specifies the name of the DFS root target or link target server.</param>
            <param name="shareName">A <see cref="T:System.String"/> that specifies the name of the share corresponding to the DFS root target or link target.</param>
            <returns>Returns <see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.GetDfsInfo(System.String)">
            <summary>Retrieves information about a specified DFS root or link in a DFS namespace.</summary>
            <param name="dfsName">A <see cref="T:System.String"/> that specifies the Universal Naming Convention (UNC) path of a DFS root or link.</param>
            <returns>Returns <see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.EnumerateLocalDrives">
            <summary>Enumerates local drives from the local host.</summary>
            <returns>Returns <see cref="T:System.Collections.Generic.IEnumerable`1"/> drives from the local host.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.EnumerateLocalDrives(System.Boolean)">
            <summary>Enumerates local drives from the specified host.</summary>
            <param name="continueOnAccessError">If set to <c>true</c> skip on access errors as a result from unavailable resources.</param>
            <returns>Returns <see cref="T:System.Collections.Generic.IEnumerable`1"/> drives from the specified host.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.EnumerateLocalDrives(System.String)">
            <summary>Enumerates local drives from the specified host.</summary>
            <param name="host">A <see cref="T:System.String"/> that specifies the DNS or NetBIOS name of the remote server.</param>
            <returns>Returns <see cref="T:System.Collections.Generic.IEnumerable`1"/> drives from the specified host.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.EnumerateLocalDrives(System.String,System.Boolean)">
            <summary>Enumerates local drives from the specified host.</summary>
            <param name="host">A <see cref="T:System.String"/> that specifies the DNS or NetBIOS name of the remote server.</param>
            <param name="continueOnAccessError">If set to <c>true</c> skip on access errors as a result from unavailable resources.</param>
            <returns>Returns <see cref="T:System.Collections.Generic.IEnumerable`1"/> drives from the specified host.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.EnumerateOpenResources">
            <summary>Enumerates open resources from the local host.</summary>
            <returns>Returns <see cref="T:IEnumerable{String}"/> open resources from the local host.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.EnumerateOpenResources(System.String)">
            <summary>Enumerates open resources from the specified host.</summary>
            <param name="host">A <see cref="T:System.String"/> that specifies the DNS or NetBIOS name of the remote server.</param>
            <returns>Returns <see cref="T:IEnumerable{String}"/> open resources from the specified <paramref name="host"/>.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.EnumerateOpenResources(System.String,System.String)">
            <summary>Enumerates open resources from the specified host.</summary>
            <param name="host">A <see cref="T:System.String"/> that specifies the DNS or NetBIOS name of the remote server.</param>
            <param name="basePath">Enumerates only resources that have the value of the basepath parameter as a prefix. (A prefix is the portion of a path that comes before a backslash.)</param>
            <returns>Returns <see cref="T:IEnumerable{String}"/> open resources from the specified <paramref name="host"/>.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.EnumerateOpenResources(System.String,System.String,System.String)">
            <summary>Enumerates open resources from the specified host.</summary>
            <param name="host">A <see cref="T:System.String"/> that specifies the DNS or NetBIOS name of the remote server.</param>
            <param name="basePath">Enumerates only resources that have the value of the basepath parameter as a prefix. (A prefix is the portion of a path that comes before a backslash.)</param>
            <param name="typeName">The name of the user or the name of the connection; If <paramref name="typeName"/> does not begin with two backslashes ("\\") it indicates the name of the user. If <paramref name="typeName"/> begins with two backslashes ("\\") it indicates the name of the connection,</param>
            <returns>Returns <see cref="T:IEnumerable{String}"/> open resources from the specified <paramref name="host"/>.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.EnumerateOpenResources(System.String,System.String,System.String,System.Boolean)">
            <summary>Enumerates open resources from the specified host.</summary>
            <param name="host">A <see cref="T:System.String"/> that specifies the DNS or NetBIOS name of the remote server.</param>
            <param name="basePath">Enumerates only resources that have the value of the basepath parameter as a prefix. (A prefix is the portion of a path that comes before a backslash.)</param>
            <param name="typeName">The name of the user or the name of the connection; If <paramref name="typeName"/> does not begin with two backslashes ("\\") it indicates the name of the user. If <paramref name="typeName"/> begins with two backslashes ("\\") it indicates the name of the connection,</param>
            <param name="continueOnAccessError">If set to <c>true</c> skip on access errors as a result from unavailable resources.</param>
            <returns>Returns <see cref="T:IEnumerable{String}"/> open resources from the specified <paramref name="host"/>.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.EnumerateShares">
            <summary>Enumerates Server Message Block (SMB) shares from the local host.</summary>
            <returns>Returns <see cref="T:System.Collections.Generic.IEnumerable`1"/> shares from the local host.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.EnumerateShares(System.Boolean)">
            <summary>Enumerates Server Message Block (SMB) shares from the local host.</summary>
            <param name="continueOnAccessError">If set to <c>true</c> skip on access errors as a result from unavailable resources.</param>
            <returns>Returns <see cref="T:System.Collections.Generic.IEnumerable`1"/> shares from the local host.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.EnumerateShares(Alphaleonis.Win32.Network.ShareInfoLevel)">
            <summary>Enumerates Server Message Block (SMB) shares from the local host.</summary>
            <param name="shareInfoLevel">One of the <see cref="T:Alphaleonis.Win32.Network.ShareInfo"/> structure numbers: 2 or 503</param>
            <returns>Returns <see cref="T:System.Collections.Generic.IEnumerable`1"/> shares from the local host.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.EnumerateShares(Alphaleonis.Win32.Network.ShareInfoLevel,System.Boolean)">
            <summary>Enumerates Server Message Block (SMB) shares from the local host.</summary>
            <param name="shareInfoLevel">One of the <see cref="T:Alphaleonis.Win32.Network.ShareInfo"/> structure numbers: 2 or 503</param>
            <param name="continueOnAccessError">If set to <c>true</c> skip on access errors as a result from unavailable resources.</param>
            <returns>Returns <see cref="T:System.Collections.Generic.IEnumerable`1"/> shares from the local host.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.EnumerateShares(System.String)">
            <summary>Enumerates Server Message Block (SMB) shares from the specified host.</summary>
            <param name="host">A <see cref="T:System.String"/> that specifies the DNS or NetBIOS name of the specified <paramref name="host"/>.</param>
            <returns>Returns <see cref="T:System.Collections.Generic.IEnumerable`1"/> shares from the specified host.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.EnumerateShares(System.String,System.Boolean)">
            <summary>Enumerates Server Message Block (SMB) shares from the specified host.</summary>
            <param name="host">A <see cref="T:System.String"/> that specifies the DNS or NetBIOS name of the specified <paramref name="host"/>.</param>
            <param name="continueOnAccessError">If set to <c>true</c> skip on access errors as a result from unavailable resources.</param>
            <returns>Returns <see cref="T:System.Collections.Generic.IEnumerable`1"/> shares from the specified host.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.EnumerateShares(System.String,Alphaleonis.Win32.Network.ShareInfoLevel)">
            <summary>Enumerates Server Message Block (SMB) shares from the specified host.</summary>
            <param name="host">A <see cref="T:System.String"/> that specifies the DNS or NetBIOS name of the specified <paramref name="host"/>.</param>
            <param name="shareInfoLevel">One of the <see cref="T:Alphaleonis.Win32.Network.ShareInfo"/> structure numbers: 2 or 503</param>
            <returns>Returns <see cref="T:System.Collections.Generic.IEnumerable`1"/> shares from the specified host.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.EnumerateShares(System.String,Alphaleonis.Win32.Network.ShareInfoLevel,System.Boolean)">
            <summary>Enumerates Server Message Block (SMB) shares from the specified host.</summary>
            <param name="host">A <see cref="T:System.String"/> that specifies the DNS or NetBIOS name of the specified <paramref name="host"/>.</param>
            <param name="shareInfoLevel">One of the <see cref="T:Alphaleonis.Win32.Network.ShareInfo"/> structure numbers: 2 or 503</param>
            <param name="continueOnAccessError">If set to <c>true</c> skip on access errors as a result from unavailable resources.</param>
            <returns>Returns <see cref="T:System.Collections.Generic.IEnumerable`1"/> shares from the specified host.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.GetHostShareFromPath(System.String)">
            <summary>Gets the host and Server Message Block (SMB) share name for a given unc path.</summary>
            <param name="uncPath">The share in the format: \\host\share</param>
            <returns>string[0] = host, string[1] = share;</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.GetShareLocalPath(System.String)">
            <summary>Gets the filesystem path for the Server Message Block (SMB) share as defined on the local host.</summary>
            <param name="uncPath">The share in the format: \\host\share</param>
            <returns>Returns the filesystem path for <paramref name="uncPath"/> or <see langref="null"/> on failure or when not available.</returns>
            <remarks>GetShareLocalPath() only works correctly for shares defined on the local host.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.GetShareLocalPath(System.String,Alphaleonis.Win32.Network.ShareInfoLevel)">
            <summary>Gets the filesystem path for the Server Message Block (SMB) share as defined on the local host.</summary>
            <param name="uncPath">The share in the format: \\host\share</param>
            <param name="shareInfoLevel">One of the <see cref="T:Alphaleonis.Win32.Network.ShareInfo"/> structure numbers: 2 or 503</param>
            <returns>Returns the filesystem path for <paramref name="uncPath"/> or <see langref="null"/> on failure or when not available.</returns>
            <remarks>GetShareLocalPath() only works correctly for shares defined on the local host.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.GetShareLocalPath(System.String,System.String)">
            <summary>Gets the filesystem path for the Server Message Block (SMB) share as defined on the host.</summary>
            <param name="host">A <see cref="T:System.String"/> that specifies the DNS or NetBIOS name of the specified <paramref name="host"/>.</param>
            <param name="share">A <see cref="T:System.String"/> that specifies the name of the Server Message Block (SMB) share.</param>
            <returns>Returns the filesystem path for <paramref name="host"/>\<paramref name="share"/> or <see langref="null"/> on failure or when not available.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.GetShareLocalPath(System.String,System.String,Alphaleonis.Win32.Network.ShareInfoLevel)">
            <summary>Gets the filesystem path for the Server Message Block (SMB) share as defined on the host.</summary>
            <param name="host">A <see cref="T:System.String"/> that specifies the DNS or NetBIOS name of the specified <paramref name="host"/>.</param>
            <param name="share">A <see cref="T:System.String"/> that specifies the name of the Server Message Block (SMB) share.</param>
            <param name="shareInfoLevel">One of the <see cref="T:Alphaleonis.Win32.Network.ShareInfo"/> structure numbers: 2 or 503</param>
            <returns>Returns the filesystem path for <paramref name="host"/>\<paramref name="share"/> or <see langref="null"/> on failure or when not available.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.GetUncName">
            <summary>Return the host name in UNC format, for example: \\hostname</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.EnumerateDfsResourcesInternal(Alphaleonis.Win32.Network.NativeMethods.DfsInfoLevel,System.String)">
            <summary>Enumerates the DFS namespaces hosted on a server or DFS links of a namespace hosted by a server.</summary>
            <param name="level">The <see cref="T:Alphaleonis.Win32.Network.NativeMethods.DfsInfoLevel"/> structure to use.</param>
            <param name="domainHostDfsName">A <see cref="T:System.String"/> that specifies a domain name, the DNS or NetBIOS name of a server or DFS namespace.</param>
            <returns>Returns <see cref="T:System.Collections.Generic.IEnumerable`1"/> of DFS namespaces.</returns>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.GetDfsInfoInternal(System.Boolean,System.String,System.String,System.String)">
            <summary>Retrieves information about a specified DFS root or link in a DFS namespace.</summary>
            <param name="mode"><c>true</c> use <see cref="M:Alphaleonis.Win32.Network.Host.GetDfsClientInfo(System.String)"/>, <c>false</c> use <see cref="M:Alphaleonis.Win32.Network.Host.GetDfsInfo(System.String)"/></param>
            <param name="dfsName">A <see cref="T:System.String"/> that specifies the Universal Naming Convention (UNC) path of a DFS root or link.</param>
            <param name="serverName">A <see cref="T:System.String"/> that specifies the name of the DFS root target or link target server. If <paramref name="mode"/> is <c>false</c>, this parameter is always null.</param>
            <param name="shareName">A <see cref="T:System.String"/> that specifies the name of the share corresponding to the DFS root target or link target. If <paramref name="mode"/> is <c>false</c>, this parameter is always null.</param>
            <returns>Returns <see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.EnumerateDriveResourcesInternal(System.String,System.Boolean,Alphaleonis.Win32.Network.ShareInfoLevel,System.Boolean)">
            <summary>Enumerates Server Message Block (SMB) shares or local drives from the specified host.</summary>
            <param name="host">A <see cref="T:System.String"/> that specifies the DNS or NetBIOS name of the specified <paramref name="host"/>.</param>
            <param name="getShares"><c>true</c> enumerates shares, <c>false</c> enumerates drives.</param>
            <param name="shareInfoLevel">One of the <see cref="T:Alphaleonis.Win32.Network.ShareInfo"/> structure numbers: 2 or 503</param>
            <param name="continueOnAccessError">If set to <c>true</c> skip on access errors as a result from unavailable resources.</param>
            <returns>If <paramref name="getShares"/> is <c>true</c>, returns <see cref="T:System.Collections.Generic.IEnumerable`1"/> shares, when <c>false</c> returns <see cref="T:System.Collections.Generic.IEnumerable`1"/> drives.</returns>
            <remarks>If <see cref="T:Alphaleonis.Win32.Network.NativeMethods.ShareInfo503"/> fails, fallback with <see cref="T:Alphaleonis.Win32.Network.NativeMethods.ShareInfo2"/> is executed. If this also fails an exception is raised.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.EnumerateOpenResourcesInternal(System.String,System.String,System.String,System.Boolean)">
            <summary>Enumerates open resources from the specified host.</summary>
            <param name="host">A <see cref="T:System.String"/> that specifies the DNS or NetBIOS name of the specified <paramref name="host"/>.</param>
            <param name="basePath">Enumerates only resources that have the value of the basepath parameter as a prefix. (A prefix is the portion of a path that comes before a backslash.)</param>
            <param name="typeName">The name of the user or the name of the connection; If <paramref name="typeName"/> does not begin with two backslashes ("\\") it indicates the name of the user. If <paramref name="typeName"/> begins with two backslashes ("\\") it indicates the name of the connection,</param>
            <param name="continueOnAccessError">If set to <c>true</c> skip on access errors as a result from unavailable resources.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.GetRemoteNameInfoInternal(System.String,System.Boolean)">
            <summary>This method uses <see cref="T:Alphaleonis.Win32.Network.NativeMethods.RemoteNameInfo"/> level to retieve full REMOTE_NAME_INFO structure.</summary>
            <param name="path">The local path with drive name.</param>
            <param name="raiseException">If <c>true</c> raises Exceptions, when <c>false</c> no Exceptions are raised and the method returns <see langref="null"/>.</param>
            <returns>A <see cref="T:Alphaleonis.Win32.Network.NativeMethods.RemoteNameInfo"/> structure.</returns>
            <remarks>AlphaFS regards network drives created using SUBST.EXE as invalid: http://alphafs.codeplex.com/discussions/316583</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.GetShareInfoInternal(System.String,System.String,Alphaleonis.Win32.Network.ShareInfoLevel,System.Boolean)">
            <summary>Gets the ShareInfo structure of a Server Message Block (SMB) share.</summary>
            <param name="host">A <see cref="T:System.String"/> that specifies the DNS or NetBIOS name of the specified <paramref name="host"/>.</param>
            <param name="share">A <see cref="T:System.String"/> that specifies the name of the Server Message Block (SMB) share.</param>
            <param name="shareInfoLevel">One of the <see cref="T:Alphaleonis.Win32.Network.ShareInfo"/> structure numbers: 2 or 503</param>
            <param name="raiseException">If <c>true</c> raises Exceptions, when <c>false</c> no Exceptions are raised and the method returns <see langref="null"/>.</param>
            <returns>A <see cref="T:Alphaleonis.Win32.Network.ShareInfo"/> structure, or <see langref="null"/> on failure or when not available.</returns>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="T:Alphaleonis.Win32.Network.SafeNetApiBuffer">
            <summary>Represents a wrapper class for a handle used by the NetApiBufferFree/NetXxx Win32 API functions.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Network.OpenResourceInfo">
            <summary>Contains the identification number and other pertinent information about files, devices, and pipes. This class cannot be inherited.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Network.OpenResourceInfo.#ctor(System.String,Alphaleonis.Win32.Network.NativeMethods.FileInfo3)">
            <summary>Create a OpenResourceInfo instance.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Network.OpenResourceInfo.Close">
            <summary>Forces the open resource to close.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Network.OpenResourceInfo.ToString">
            <summary>Returns the full path to the share.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Network.OpenResourceInfo.Host">
            <summary>The local or remote Host.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Network.OpenResourceInfo.Id">
            <summary>The identification number assigned to the resource when it is opened.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Network.OpenResourceInfo.PathName">
            <summary>The path of the opened resource.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Network.OpenResourceInfo.Permissions">
            <summary>The access permissions associated with the opening application. This member can be one or more of the following values.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Network.OpenResourceInfo.TotalLocks">
            <summary>The number of file locks on the file, device, or pipe.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Network.OpenResourceInfo.UserName">
            <summary>Specifies which user (on servers that have user-level security) or which computer (on servers that have share-level security) opened the resource.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Network.ShareInfo">
            <summary>Contains information about Server Message Block (SMB) shares. This class cannot be inherited.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Network.ShareInfo.#ctor(System.String,Alphaleonis.Win32.Network.ShareInfoLevel,System.Object)">
            <summary>Create a ShareInfo instance. Properties originate from <paramref name="shareInfoLevel"/> structure.</summary>
            <param name="host">A computer host to retrieve shares from.</param>
            <param name="shareInfoLevel">One of the <see cref="T:Alphaleonis.Win32.Network.ShareInfo"/> structure numbers: 2 or 503</param>
            <param name="shareInfo">A ShareInfoXxx structure instance.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Network.ShareInfo.ToString">
            <summary>Returns the full path to the share.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Network.ShareInfo.CurrentUses">
            <summary>The number of current connections to the resource.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Network.ShareInfo.FullPath">
            <summary>Returns the full path to the share.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Network.ShareInfo.IsLocal">
            <summary>Check if the share is defined on the local host.</summary>
            <remarks>Use <see cref="T:Alphaleonis.Win32.Network.NativeMethods.ShareInfo503"/> structure to determine if the share is defined on the local host.</remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Network.ShareInfo.MaxUses">
            <summary>The maximum number of concurrent connections that the shared resource can accommodate.</summary>
            <remarks>The number of connections is unlimited if the value specified in this member is –1.</remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Network.ShareInfo.NetName">
            <summary>The name of a shared resource.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Network.ShareInfo.Password">
            <summary>The share's password (when the server is running with share-level security).</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Network.ShareInfo.Path">
            <summary>The local path for the shared resource.</summary>
            <remarks>For disks, this member is the path being shared. For print queues, this member is the name of the print queue being shared.</remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Network.ShareInfo.Permissions">
            <summary>The shared resource's permissions for servers running with share-level security.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Network.ShareInfo.Remark">
            <summary>An optional comment about the shared resource.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Network.ShareInfo.ResourceType">
            <summary>SHARE_INFO_1005 - Contains information about the shared resource.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Network.ShareInfo.SecurityDescriptor">
            <summary>Specifies the SECURITY_DESCRIPTOR associated with this share.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Network.ShareInfo.ServerName">
            <summary>A pointer to a string that specifies the DNS or NetBIOS name of the remote server on which the shared resource resides.</summary>
            <remarks>A value of "*" indicates no configured server name.</remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Network.ShareInfo.ShareType">
            <summary>The type of share.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.OsVersionName">
            <summary>Enumeration used to discriminate between the named windows versions.</summary>
            <remarks>The values of the enumeration are ordered so a later released operating system version has a higher number, so comparisons between named versions are meaningful.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.OsVersionName.Earlier">
            <summary>A windows version earlier than Windows 2000.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.OsVersionName.Windows2000">
            <summary>Windows 2000 (Server or Professional)</summary>
        </member>
        <member name="F:Alphaleonis.Win32.OsVersionName.WindowsXp">
            <summary>Windows XP</summary>
        </member>
        <member name="F:Alphaleonis.Win32.OsVersionName.WindowsServer2003">
            <summary>Windows Server 2003</summary>
        </member>
        <member name="F:Alphaleonis.Win32.OsVersionName.WindowsVista">
            <summary>Windows Vista</summary>
        </member>
        <member name="F:Alphaleonis.Win32.OsVersionName.WindowsServer2008">
            <summary>Windows Server 2008</summary>
        </member>
        <member name="F:Alphaleonis.Win32.OsVersionName.Windows7">
            <summary>Windows 7</summary>
        </member>
        <member name="F:Alphaleonis.Win32.OsVersionName.WindowsServer2008R2">
            <summary>Windows Server 2008 R2</summary>
        </member>
        <member name="F:Alphaleonis.Win32.OsVersionName.Windows8">
            <summary>Windows 8</summary>
        </member>
        <member name="F:Alphaleonis.Win32.OsVersionName.WindowsServer2012">
            <summary>Windows Server 2012</summary>
        </member>
        <member name="F:Alphaleonis.Win32.OsVersionName.Windows81">
            <summary>Windows 8.1</summary>
        </member>
        <member name="F:Alphaleonis.Win32.OsVersionName.WindowsServer2012R2">
            <summary>Windows Server 2012 R2</summary>
        </member>
        <member name="F:Alphaleonis.Win32.OsVersionName.Later">
            <summary>A later Windows version</summary>
        </member>
        <member name="T:Alphaleonis.Win32.ProcessorArchitecture">
            <summary>Enumeration used by <see cref="T:Alphaleonis.Win32.OperatingSystemInfo"/> to indicate the current processor architecture for which the operating system is targeted and running.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.ProcessorArchitecture.X86">
            <summary>PROCESSOR_ARCHITECTURE_INTEL - The system is running a 32-bit version of Windows.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.ProcessorArchitecture.Ia64">
            <summary>PROCESSOR_ARCHITECTURE_IA64 - The system is running an Itanium processor.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.ProcessorArchitecture.X64">
            <summary>PROCESSOR_ARCHITECTURE_AMD64 - The system is running a 64-bit version of Windows.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.ProcessorArchitecture.Unknown">
            <summary>PROCESSOR_ARCHITECTURE_UNKNOWN - Unknown architecture.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.OperatingSystemInfo">
            <summary>Static class providing access to information about the operating system under which the assembly is executing.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.OperatingSystemInfo.IsAtLeast(Alphaleonis.Win32.OsVersionName)">
            <summary>Determines whether the operating system is of the specified version or later.</summary>
            <param name="version">The lowest version for which to return <c>true</c>.</param>
            <returns><c>true</c> if the operating system is of the specified <paramref name="version"/> or later; otherwise, <c>false</c>.</returns>      
        </member>
        <member name="M:Alphaleonis.Win32.OperatingSystemInfo.IsAtLeast(Alphaleonis.Win32.OsVersionName,System.Int32)">
            <summary>Determines whether operating system is of the specified version or later, allowing specification of a minimum service pack that must be installed on the lowest version.</summary>
            <param name="version">The minimum required version.</param>
            <param name="servicePackVersion">The major version of the service pack that must be installed on the minimum required version to return <c>true</c>. This can be 0 to indicate that no service pack is required.</param>
            <returns><c>true</c> if the operating system matches the specified <paramref name="version"/> with the specified service pack, or if the operating system is of a later version; otherwise, <c>false</c>.</returns>      
        </member>
        <member name="M:Alphaleonis.Win32.OperatingSystemInfo.IsWow64Process">
            <summary>Determines whether the current process is running under WOW64.</summary>
            <returns><c>true</c> if the current process is running under WOW64; otherwise, <c>false</c>.</returns>      
        </member>
        <member name="P:Alphaleonis.Win32.OperatingSystemInfo.IsServer">
            <summary>Gets a value indicating whether the operating system is a server os.</summary>
            <value><c>true</c> if the current operating system is a server os; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Alphaleonis.Win32.OperatingSystemInfo.OsVersion">
            <summary>Gets the numeric version of the operating system. This is the same as returned by <see cref="P:System.Environment.OSVersion"/>.</summary>
            <value>The numeric version of the operating system.</value>
        </member>
        <member name="P:Alphaleonis.Win32.OperatingSystemInfo.OsVersionName">
            <summary>Gets the named version of the operating system.</summary>
            <value>The named version of the operating system.</value>
        </member>
        <member name="P:Alphaleonis.Win32.OperatingSystemInfo.ProcessorArchitecture">
            <summary>Gets the processor architecture for which the operating system is targeted.</summary>
            <value>The processor architecture for which the operating system is targeted.</value>
            <remarks>If running under WOW64 this will return a 32-bit processor. Use <see cref="M:Alphaleonis.Win32.OperatingSystemInfo.IsWow64Process"/> to determine if this is the case.</remarks>
        </member>
        <member name="P:Alphaleonis.Win32.OperatingSystemInfo.ServicePackVersion">
            <summary>Gets the version of the service pack currently installed on the operating system.</summary>
            <value>The version of the service pack currently installed on the operating system.</value>
            <remarks>Only the <see cref="P:System.Version.Major"/> and <see cref="P:System.Version.Minor"/> fields are used.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.OperatingSystemInfo.NativeMethods.GetVersionEx(Alphaleonis.Win32.OperatingSystemInfo.NativeMethods.OsVersionInfoEx@)">
            <summary>Retrieves information about the current operating system.</summary>
            <returns>
            If the function succeeds, the return value is a nonzero value.
            If the function fails, the return value is zero. To get extended error information, call GetLastError. The function fails if you specify an invalid value for the dwOSVersionInfoSize member of the OSVERSIONINFO or OSVERSIONINFOEX structure.
            </returns>
            <remarks>Minimum supported client: Windows 2000 Professional [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows 2000 Server [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.OperatingSystemInfo.NativeMethods.GetSystemInfo(Alphaleonis.Win32.OperatingSystemInfo.NativeMethods.SystemInfo@)">
            <summary>Retrieves information about the current system.</summary>
            <returns>This function does not return a value.</returns>
            <remarks>Minimum supported client: Windows 2000 Professional [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows 2000 Server [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.OperatingSystemInfo.NativeMethods.IsWow64Process(System.IntPtr,System.Boolean@)">
            <summary>Determines whether the specified process is running under WOW64.</summary>
            <returns>
            If the function succeeds, the return value is a nonzero value.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows Vista, Windows XP with SP2 [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2008, Windows Server 2003 with SP1 [desktop apps only]</remarks>
        </member>
        <member name="T:Alphaleonis.Win32.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.AlphaFSInternalError">
            <summary>
              Looks up a localized string similar to AlphaFS Internal Error.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.AttemptingToGenerateExceptionFromSuccessfulOperation">
             <summary>
               Looks up a localized string similar to Incorrectly implemented function attempting to generate exception from successful operation.
            .
             </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.BackupFileStream_Unlock_Backup_FileStream_Lock_Length_must_not_be_negative_">
            <summary>
              Looks up a localized string similar to Backup FileStream Lock Length must not be negative..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.BackupFileStream_Unlock_Backup_FileStream_Unlock_Position_must_not_be_negative_">
            <summary>
              Looks up a localized string similar to Backup FileStream Unlock Position must not be negative..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.BufferIsNotLargeEnoughForTheRequestedOperation">
            <summary>
              Looks up a localized string similar to Buffer is not large enough for the requested operation..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.CannotCreateDirectory">
            <summary>
              Looks up a localized string similar to Cannot create directory.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.CountMustNotBeNegative">
            <summary>
              Looks up a localized string similar to Count must not be negative.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.DirectoryExists">
            <summary>
              Looks up a localized string similar to Directory exists.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.DirectoryNotEmpty">
            <summary>
              Looks up a localized string similar to The directory is not empty.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.DirectoryNotFound">
            <summary>
              Looks up a localized string similar to Directory not found.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.ErrorCodeWas0">
            <summary>
              Looks up a localized string similar to Error code was.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.FileExists">
            <summary>
              Looks up a localized string similar to File exists.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.HandleClosed">
            <summary>
              Looks up a localized string similar to Handle is closed..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.HandleInvalid">
            <summary>
              Looks up a localized string similar to Invalid handle..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.HardLinksOnNonNTFSPartitionsIsNotSupported">
            <summary>
              Looks up a localized string similar to Creating hard-links on non-NTFS partitions is not supported.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.IllegalPath">
            <summary>
              Looks up a localized string similar to Illegal path.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.InvalidDirectoryName">
            <summary>
              Looks up a localized string similar to Invalid directory name.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.InvalidSecurityDescriptorReturnedFromSystem">
            <summary>
              Looks up a localized string similar to Invalid security descriptor returned from system..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.InvalidTransaction">
            <summary>
              Looks up a localized string similar to Invalid transaction object..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.InvalidTransactionRequest">
            <summary>
              Looks up a localized string similar to Invalid transaction request..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.NotAReparsePoint">
            <summary>
              Looks up a localized string similar to The file or directory is not a reparse point..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.OffsetMustNotBeNegative">
            <summary>
              Looks up a localized string similar to Offset must not be negative.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.PathAlreadyExists">
            <summary>
              Looks up a localized string similar to Path already exists..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.Privilege_Privilege_name_cannot_be_empty">
            <summary>
              Looks up a localized string similar to name cannot be empty.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.SafeGlobalMemoryBufferHandle_CopyTo_Destination_offset_must_not_be_negative">
            <summary>
              Looks up a localized string similar to Destination offset must not be negative.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.SafeGlobalMemoryBufferHandle_CopyTo_Length_must_not_be_negative_">
            <summary>
              Looks up a localized string similar to Length must not be negative..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.SafeGlobalMemoryBufferHandle_CopyTo_Source_offset_and_length_outside_the_bounds_of_the_array">
            <summary>
              Looks up a localized string similar to Source offset and length outside the bounds of the array.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.SameSourceDestination">
            <summary>
              Looks up a localized string similar to Source- and destinationPath cannot be the same..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.StreamInvalid">
            <summary>
              Looks up a localized string similar to Invalid stream..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.ThisStreamDoesNotSupportSeeking">
            <summary>
              Looks up a localized string similar to This stream does not support seeking..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.TransactionalConflict">
            <summary>
              Looks up a localized string similar to Transactional conflict..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.TransactionAlreadyAborted">
            <summary>
              Looks up a localized string similar to Transaction already aborted..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.TransactionAlreadyCommitted">
            <summary>
              Looks up a localized string similar to Transaction already committed..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.TransactionNotActive">
            <summary>
              Looks up a localized string similar to Transaction not active..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.TransactionNotRequested">
            <summary>
              Looks up a localized string similar to Transaction not requested..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.UNCPathShouldMatchTheFormatServerShare">
            <summary>
              Looks up a localized string similar to Network share path should match the format: \\server\share.
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.SafeGlobalMemoryBufferHandle">
            <summary>IntPtr wrapper which can be used as result of Marshal.AllocHGlobal operation. Calls Marshal.FreeHGlobal when disposed or finalized.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.SafeGlobalMemoryBufferHandle.#ctor">
            <summary>Creates new instance with zero IntPtr.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.SafeGlobalMemoryBufferHandle.#ctor(System.Int32)">
            <summary>Creates new instance which allocates unmanaged memory of given size. Can throw OutOfMemoryException</summary>
        </member>
        <member name="M:Alphaleonis.Win32.SafeGlobalMemoryBufferHandle.CopyFrom(System.Byte[],System.Int32,System.Int32)">
            <summary>Copies data from a one-dimensional, managed 8-bit unsigned integer array to the unmanaged memory pointer referenced by this instance.</summary>
            <param name="source">The one-dimensional array to copy from. </param>
            <param name="startIndex">The zero-based index into the array where Copy should start.</param>
            <param name="length">The number of array elements to copy.</param>
        </member>
        <member name="M:Alphaleonis.Win32.SafeGlobalMemoryBufferHandle.ReleaseHandle">
            <summary>Called when object is disposed or finalized.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Security.ObjectType">
            <summary>The ObjectType (SE_OBJECT_TYPE) enumeration contains values that correspond to the types of Windows objects that support security.
            The functions, such as GetSecurityInfo and SetSecurityInfo, that set and retrieve the security information of an object, use these values to indicate the type of object.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.ObjectType.UnknownObjectType">
            <summary>Unknown object type.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.ObjectType.FileObject">
            <summary>Indicates a file or directory. The name string that identifies a file or directory object can be in one of the following formats:
              A relative path, such as FileName.dat or ..\FileName
              An absolute path, such as FileName.dat, C:\DirectoryName\FileName.dat, or G:\RemoteDirectoryName\FileName.dat.
              A UNC name, such as \\ComputerName\ShareName\FileName.dat.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.ObjectType.Service">
            <summary>Indicates a Windows service. A service object can be a local service, such as ServiceName, or a remote service, such as \\ComputerName\ServiceName.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.ObjectType.Printer">
            <summary>Indicates a printer. A printer object can be a local printer, such as PrinterName, or a remote printer, such as \\ComputerName\PrinterName.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.ObjectType.RegistryKey">
            <summary>Indicates a registry key. A registry key object can be in the local registry, such as CLASSES_ROOT\SomePath or in a remote registry, such as \\ComputerName\CLASSES_ROOT\SomePath.
            The names of registry keys must use the following literal strings to identify the predefined registry keys: "CLASSES_ROOT", "CURRENT_USER", "MACHINE", and "USERS".
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.ObjectType.LmShare">
            <summary>Indicates a network share. A share object can be local, such as ShareName, or remote, such as \\ComputerName\ShareName.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.ObjectType.KernelObject">
            <summary>Indicates a local kernel object. The GetSecurityInfo and SetSecurityInfo functions support all types of kernel objects.
            The GetNamedSecurityInfo and SetNamedSecurityInfo functions work only with the following kernel objects: semaphore, event, mutex, waitable timer, and file mapping.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.ObjectType.WindowObject">
            <summary>Indicates a window station or desktop object on the local computer. You cannot use GetNamedSecurityInfo and SetNamedSecurityInfo with these objects because the names of window stations or desktops are not unique.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.ObjectType.DsObject">
            <summary>Indicates a directory service object or a property set or property of a directory service object.
            The name string for a directory service object must be in X.500 form, for example: CN=SomeObject,OU=ou2,OU=ou1,DC=DomainName,DC=CompanyName,DC=com,O=internet</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.ObjectType.DsObjectAll">
            <summary>Indicates a directory service object and all of its property sets and properties.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.ObjectType.ProviderDefinedObject">
            <summary>Indicates a provider-defined object.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.ObjectType.WmiGuidObject">
            <summary>Indicates a WMI object.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.ObjectType.RegistryWow6432Key">
            <summary>Indicates an object for a registry entry under WOW64.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Security.SecurityDescriptorControl">
            <summary>The SECURITY_DESCRIPTOR_CONTROL data type is a set of bit flags that qualify the meaning of a security descriptor or its components.
            Each security descriptor has a Control member that stores the SECURITY_DESCRIPTOR_CONTROL bits.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.SecurityDescriptorControl.None">
            <summary></summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.SecurityDescriptorControl.OwnerDefaulted">
            <summary>SE_OWNER_DEFAULTED (0x0001) - Indicates an SD with a default owner security identifier (SID). You can use this bit to find all of the objects that have default owner permissions set.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.SecurityDescriptorControl.GroupDefaulted">
            <summary>SE_GROUP_DEFAULTED (0x0002) - Indicates an SD with a default group SID. You can use this bit to find all of the objects that have default group permissions set.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.SecurityDescriptorControl.DaclPresent">
            <summary>SE_DACL_PRESENT (0x0004) - Indicates an SD that has a discretionary access control list (DACL). If this flag is not set, or if this flag is set and the DACL is NULL, the SD allows full access to everyone.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.SecurityDescriptorControl.DaclDefaulted">
            <summary>SE_DACL_DEFAULTED (0x0008) - Indicates an SD with a default DACL. For example, if an object creator does not specify a DACL, the object receives the default DACL from the access token of the creator. This flag can affect how the system treats the DACL, with respect to access control entry (ACE) inheritance. The system ignores this flag if the SE_DACL_PRESENT flag is not set.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.SecurityDescriptorControl.SaclPresent">
            <summary>SE_SACL_PRESENT (0x0010) - Indicates an SD that has a system access control list (SACL).</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.SecurityDescriptorControl.SaclDefaulted">
            <summary>SE_SACL_DEFAULTED (0x0020) - Indicates an SD with a default SACL. For example, if an object creator does not specify an SACL, the object receives the default SACL from the access token of the creator. This flag can affect how the system treats the SACL, with respect to ACE inheritance. The system ignores this flag if the SE_SACL_PRESENT flag is not set.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.SecurityDescriptorControl.DaclAutoInheritReq">
            <summary>SE_DACL_AUTO_INHERIT_REQ (0x0100) - Requests that the provider for the object protected by the SD automatically propagate the DACL to existing child objects. If the provider supports automatic inheritance, it propagates the DACL to any existing child objects, and sets the SE_DACL_AUTO_INHERITED bit in the security descriptors of the object and its child objects.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.SecurityDescriptorControl.SaclAutoInheritReq">
            <summary>SE_SACL_AUTO_INHERIT_REQ (0x0200) - Requests that the provider for the object protected by the SD automatically propagate the SACL to existing child objects. If the provider supports automatic inheritance, it propagates the SACL to any existing child objects, and sets the SE_SACL_AUTO_INHERITED bit in the SDs of the object and its child objects.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.SecurityDescriptorControl.DaclAutoInherited">
            <summary>SE_DACL_AUTO_INHERITED (0x0400) - Windows 2000 only. Indicates an SD in which the DACL is set up to support automatic propagation of inheritable ACEs to existing child objects. The system sets this bit when it performs the automatic inheritance algorithm for the object and its existing child objects. This bit is not set in SDs for Windows NT versions 4.0 and earlier, which do not support automatic propagation of inheritable ACEs.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.SecurityDescriptorControl.SaclAutoInherited">
            <summary>SE_SACL_AUTO_INHERITED (0x0800) - Windows 2000: Indicates an SD in which the SACL is set up to support automatic propagation of inheritable ACEs to existing child objects. The system sets this bit when it performs the automatic inheritance algorithm for the object and its existing child objects. This bit is not set in SDs for Windows NT versions 4.0 and earlier, which do not support automatic propagation of inheritable ACEs.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.SecurityDescriptorControl.DaclProtected">
            <summary>SE_DACL_PROTECTED (0x1000) - Windows 2000: Prevents the DACL of the SD from being modified by inheritable ACEs.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.SecurityDescriptorControl.SaclProtected">
            <summary>SE_SACL_PROTECTED (0x2000) - Windows 2000: Prevents the SACL of the SD from being modified by inheritable ACEs.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.SecurityDescriptorControl.RmControlValid">
            <summary>SE_RM_CONTROL_VALID (0x4000) - Indicates that the resource manager control is valid.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.SecurityDescriptorControl.SelfRelative">
            <summary>SE_SELF_RELATIVE (0x8000) - Indicates an SD in self-relative format with all of the security information in a contiguous block of memory. If this flag is not set, the SD is in absolute format. For more information, see Absolute and Self-Relative Security Descriptors.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Security.SecurityInformation">
            <summary>The SECURITY_INFORMATION data type identifies the object-related security information being set or queried.
            This security information includes:
              The owner of an object;
              The primary group of an object;
              The discretionary access control list (DACL) of an object;
              The system access control list (SACL) of an object;
            </summary>
            <remarks>
            An unsigned 32-bit integer specifies portions of a SECURITY_DESCRIPTOR by means of bit flags.
            Individual bit values (combinable with the bitwise OR operation) are as shown in the following table.
            </remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Security.SecurityInformation.None">
            <summary></summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.SecurityInformation.Owner">
            <summary>OWNER_SECURITY_INFORMATION (0x00000001) - The owner identifier of the object is being referenced.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.SecurityInformation.Group">
            <summary>GROUP_SECURITY_INFORMATION (0x00000002) - The primary group identifier of the object is being referenced.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.SecurityInformation.Dacl">
            <summary>DACL_SECURITY_INFORMATION (0x00000004) - The DACL of the object is being referenced.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.SecurityInformation.Sacl">
            <summary>SACL_SECURITY_INFORMATION (0x00000008) - The SACL of the object is being referenced.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.SecurityInformation.Label">
            <summary>LABEL_SECURITY_INFORMATION (0x00000010) - The mandatory integrity label is being referenced. The mandatory integrity label is an ACE in the SACL of the object.</summary>
            <remarks>Windows Server 2003 and Windows XP: This bit flag is not available.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Security.SecurityInformation.Attribute">
            <summary>ATTRIBUTE_SECURITY_INFORMATION (0x00000020) - The resource properties of the object being referenced.
            The resource properties are stored in SYSTEM_RESOURCE_ATTRIBUTE_ACE types in the SACL of the security descriptor.
            </summary>
            <remarks>Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP: This bit flag is not available.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Security.SecurityInformation.Scope">
            <summary>SCOPE_SECURITY_INFORMATION (0x00000040) - The Central Access Policy (CAP) identifier applicable on the object that is being referenced.
            Each CAP identifier is stored in a SYSTEM_SCOPED_POLICY_ID_ACE type in the SACL of the SD.
            </summary>
            <remarks>Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP: This bit flag is not available.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Security.SecurityInformation.Backup">
            <summary>BACKUP_SECURITY_INFORMATION (0x00010000) - All parts of the security descriptor. This is useful for backup and restore software that needs to preserve the entire security descriptor.</summary>
            <remarks>Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP: This bit flag is not available.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Security.SecurityInformation.UnprotectedSacl">
            <summary>UNPROTECTED_SACL_SECURITY_INFORMATION (0x10000000) - The SACL inherits ACEs from the parent object.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.SecurityInformation.UnprotectedDacl">
            <summary>UNPROTECTED_DACL_SECURITY_INFORMATION (0x20000000) - The DACL inherits ACEs from the parent object.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.SecurityInformation.ProtectedSacl">
            <summary>PROTECTED_SACL_SECURITY_INFORMATION (0x40000000) - The SACL cannot inherit ACEs.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.SecurityInformation.ProtectedDacl">
            <summary>PROTECTED_DACL_SECURITY_INFORMATION (0x80000000) - The DACL cannot inherit access control entries (ACEs).</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Security.SafeLocalMemoryBufferHandle">
            <summary>IntPtr wrapper which can be used as result of Marshal.AllocHGlobal operation. Calls Marshal.FreeHGlobal when disposed or finalized.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Security.SafeLocalMemoryBufferHandle.#ctor">
            <summary>Creates new instance with zero IntPtr.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Security.SafeLocalMemoryBufferHandle.CopyFrom(System.Byte[],System.Int32,System.Int32)">
            <summary>Copies data from a one-dimensional, managed 8-bit unsigned integer array to the unmanaged memory pointer referenced by this instance.</summary>
            <param name="source">The one-dimensional array to copy from. </param>
            <param name="startIndex">The zero-based index into the array where Copy should start.</param>
            <param name="length">The number of array elements to copy.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Security.SafeLocalMemoryBufferHandle.ReleaseHandle">
            <summary>Called when object is disposed or finalized.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.SymbolicLinkTarget">
            <summary>Indicates whether the link target is a file or directory.</summary>
            <remarks>Used by Win32 API CreateSymbolicLink()/CreateSymbolicLinkTransacted()</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.SymbolicLinkTarget.File">
            <summary>The link target is a file.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.SymbolicLinkTarget.Directory">
            <summary>The link target is a directory.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.SymbolicLinkTargetInfo">
            <summary>Represents information about a symbolic link.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.SymbolicLinkTargetInfo.LinkType">
            <summary>Gets the type of the link.</summary>
            <value>The type of the link.</value>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.SymbolicLinkType">
            <summary>Specifies the type of a symbolic link.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.SymbolicLinkType.Absolute">
            <summary>The symbolic link is absolute.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.SymbolicLinkType.Relative">
            <summary>The symbolic link is relative.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.TransactionalConflictException">
            <summary>The function attempted to use a name that is reserved for use by another transaction.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.TransactionException">
            <summary>The exception that is thrown when an attempt to create a directory or file that already exists was made.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionException"/> class.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionException"/> class.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionException"/> class.</summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionException"/> class.</summary>
            <param name="info">The data for serializing or deserializing the object.</param>
            <param name="context">The source and destination for the object.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionalConflictException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionalConflictException"/> class.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionalConflictException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionalConflictException"/> class.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionalConflictException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionalConflictException"/> class.</summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionalConflictException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionalConflictException"/> class.</summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.UnrecognizedReparsePointException">
            <summary>The function attempted to use a name that is reserved for use by another transaction.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.UnrecognizedReparsePointException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.UnrecognizedReparsePointException"/> class.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.UnrecognizedReparsePointException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.UnrecognizedReparsePointException"/> class.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.UnrecognizedReparsePointException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.UnrecognizedReparsePointException"/> class.</summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.UnrecognizedReparsePointException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.UnrecognizedReparsePointException"/> class.</summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.UnsupportedRemoteTransactionException">
            <summary>The remote server or share does not support transacted file operations.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.UnsupportedRemoteTransactionException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.UnsupportedRemoteTransactionException"/> class.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.UnsupportedRemoteTransactionException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.UnsupportedRemoteTransactionException"/> class.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.UnsupportedRemoteTransactionException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.UnsupportedRemoteTransactionException"/> class.</summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.UnsupportedRemoteTransactionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.UnsupportedRemoteTransactionException"/> class.</summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Security.NativeMethods.AdjustTokenPrivileges(System.IntPtr,System.Boolean,Alphaleonis.Win32.Security.TokenPrivileges@,System.UInt32,Alphaleonis.Win32.Security.TokenPrivileges@,System.UInt32@)">
            <summary>The AdjustTokenPrivileges function enables or disables privileges in the specified access token. Enabling or disabling privileges in an access token requires TOKEN_ADJUST_PRIVILEGES access.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            To determine whether the function adjusted all of the specified privileges, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Security.NativeMethods.LookupPrivilegeDisplayName(System.String,System.String,System.Text.StringBuilder@,System.UInt32@,System.UInt32@)">
            <summary>The LookupPrivilegeDisplayName function retrieves the display name that represents a specified privilege.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, it returns zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Security.NativeMethods.LookupPrivilegeValue(System.String,System.String,Alphaleonis.Win32.Security.Luid@)">
            <summary>The LookupPrivilegeValue function retrieves the locally unique identifier (LUID) used on a specified system to locally represent the specified privilege name.</summary>
            <returns>
            If the function succeeds, the function returns nonzero.
            If the function fails, it returns zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Security.NativeMethods.GetFileSecurity(System.String,Alphaleonis.Win32.Security.SecurityInformation,System.Runtime.InteropServices.SafeHandle,System.UInt32,System.UInt32@)">
            <summary>The GetFileSecurity function obtains specified information about the security of a file or directory.
            The information obtained is constrained by the caller's access rights and privileges.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, it returns zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Security.NativeMethods.GetSecurityInfo(System.Runtime.InteropServices.SafeHandle,Alphaleonis.Win32.Security.ObjectType,Alphaleonis.Win32.Security.SecurityInformation,System.IntPtr@,System.IntPtr@,System.IntPtr@,System.IntPtr@,Alphaleonis.Win32.SafeGlobalMemoryBufferHandle@)">
            <summary>The GetSecurityInfo function retrieves a copy of the security descriptor for an object specified by a handle.</summary>
            <returns>
            If the function succeeds, the function returns nonzero.
            If the function fails, it returns zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Security.NativeMethods.SetSecurityInfo(System.Runtime.InteropServices.SafeHandle,Alphaleonis.Win32.Security.ObjectType,Alphaleonis.Win32.Security.SecurityInformation,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>The SetSecurityInfo function sets specified security information in the security descriptor of a specified object. 
            The caller identifies the object by a handle.</summary>
            <returns>
            If the function succeeds, the function returns ERROR_SUCCESS.
            If the function fails, it returns a nonzero error code defined in WinError.h.
            </returns>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Security.NativeMethods.SetNamedSecurityInfo(System.String,Alphaleonis.Win32.Security.ObjectType,Alphaleonis.Win32.Security.SecurityInformation,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>The SetNamedSecurityInfo function sets specified security information in the security descriptor of a specified object. The caller identifies the object by name.</summary>
            <returns>
            If the function succeeds, the function returns ERROR_SUCCESS.
            If the function fails, it returns a nonzero error code defined in WinError.h.
            </returns>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Security.NativeMethods.GetSecurityDescriptorDacl(System.Runtime.InteropServices.SafeHandle,System.Boolean@,System.IntPtr@,System.Boolean@)">
            <summary>The GetSecurityDescriptorDacl function retrieves a pointer to the discretionary access control list (DACL) in a specified security descriptor.</summary>
            <returns>
            If the function succeeds, the function returns nonzero.
            If the function fails, it returns zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Security.NativeMethods.GetSecurityDescriptorSacl(System.Runtime.InteropServices.SafeHandle,System.Boolean@,System.IntPtr@,System.Boolean@)">
            <summary>The GetSecurityDescriptorSacl function retrieves a pointer to the system access control list (SACL) in a specified security descriptor.</summary>
            <returns>
            If the function succeeds, the function returns nonzero.
            If the function fails, it returns zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Security.NativeMethods.GetSecurityDescriptorGroup(System.Runtime.InteropServices.SafeHandle,System.IntPtr@,System.Boolean@)">
            <summary>The GetSecurityDescriptorGroup function retrieves the primary group information from a security descriptor.</summary>
            <returns>
            If the function succeeds, the function returns nonzero.
            If the function fails, it returns zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Security.NativeMethods.GetSecurityDescriptorControl(System.Runtime.InteropServices.SafeHandle,Alphaleonis.Win32.Security.SecurityDescriptorControl@,System.UInt32@)">
            <summary>The GetSecurityDescriptorControl function retrieves a security descriptor control and revision information.</summary>
            <returns>
            If the function succeeds, the function returns nonzero.
            If the function fails, it returns zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Security.NativeMethods.GetSecurityDescriptorOwner(System.Runtime.InteropServices.SafeHandle,System.IntPtr@,System.Boolean@)">
            <summary>The GetSecurityDescriptorOwner function retrieves the owner information from a security descriptor.</summary>
            <returns>
            If the function succeeds, the function returns nonzero.
            If the function fails, it returns zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Security.NativeMethods.GetSecurityDescriptorLength(System.Runtime.InteropServices.SafeHandle)">
            <summary>The GetSecurityDescriptorLength function returns the length, in bytes, of a structurally valid security descriptor. The length includes the length of all associated structures.</summary>
            <returns>
            If the function succeeds, the function returns the length, in bytes, of the SECURITY_DESCRIPTOR structure.
            If the SECURITY_DESCRIPTOR structure is not valid, the return value is undefined.
            </returns>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Security.NativeMethods.LocalFree(System.IntPtr)">
            <summary>Frees the specified local memory object and invalidates its handle.</summary>
            <returns>
            If the function succeeds, the return value is NULL.
            If the function fails, the return value is equal to a handle to the local memory object. To get extended error information, call GetLastError.
            </returns>
            <remarks>
            Note  The local functions have greater overhead and provide fewer features than other memory management functions.
            New applications should use the heap functions unless documentation states that a local function should be used.
            For more information, see Global and Local Functions.
            </remarks>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="T:Alphaleonis.Win32.Security.NativeMethods.SecurityAttributes">
            <summary>Class used to represent the SECURITY_ATTRIBUES native win32 structure. It provides initialization function from an <see cref="T:System.Security.AccessControl.ObjectSecurity"/> object.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Security.NativeMethods.SecurityAttributes.Initialize(Alphaleonis.Win32.SafeGlobalMemoryBufferHandle@,System.Security.AccessControl.ObjectSecurity)">
            <summary>Initializes the SecurityAttributes structure from an instance of <see cref="T:System.Security.AccessControl.ObjectSecurity"/>.</summary>
            <param name="memoryHandle">A handle that will refer to the memory allocated by this object for storage of the 
            security descriptor. As long as this object is used, the memory handle should be kept alive, and afterwards it
            should be disposed as soon as possible.</param>
            <param name="securityDescriptor">The <see cref="T:System.Security.AccessControl.ObjectSecurity"/> security descriptor to assign to this object. This parameter may be <see langword="null"/>.</param>
        </member>
        <member name="T:Alphaleonis.Win32.Security.Privilege">
            <summary>Represents a privilege for an access token. The privileges available on the local machine are available as 
            static instances from this class. To create a <see cref="T:Alphaleonis.Win32.Security.Privilege"/> representing a privilege on another system,
            use the constructor specifying a system name together with one of these static instances.
            </summary>
            <seealso cref="T:Alphaleonis.Win32.Security.PrivilegeEnabler"/>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.AssignPrimaryToken">
            <summary>Required to assign the primary token of a process. User Right: Replace a process-level token.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.Audit">
            <summary>Required to generate audit-log entries. Give this privilege to secure servers. User Right: Generate security audits.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.Backup">
            <summary>Required to perform backup operations. This privilege causes the system to grant all read access control to any file, regardless of the access control list (ACL) specified for the file. Any access request other than read is still evaluated with the ACL. User Right: Back up files and directories.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.ChangeNotify">
            <summary>Required to receive notifications of changes to files or directories. This privilege also causes the system to skip all traversal access checks. It is enabled by default for all users. User Right: Bypass traverse checking.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.CreateGlobal">
            <summary>Required to create named file mapping objects in the global namespace during Terminal Services sessions. This privilege is enabled by default for administrators, services, and the local system account. User Right: Create global objects.</summary>
            <remarks>Windows XP/2000:  This privilege is not supported. Note that this value is supported starting with Windows Server 2003, Windows XP SP2, and Windows 2000 SP4.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.CreatePagefile">
            <summary>Required to create a paging file. User Right: Create a pagefile.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.CreatePermanent">
            <summary>Required to create a permanent object. User Right: Create permanent shared objects.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.CreateSymbolicLink">
            <summary>Required to create a symbolic link. User Right: Create symbolic links.</summary>           
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.CreateToken">
            <summary>Required to create a primary token. User Right: Create a token object.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.Debug">
            <summary>Required to debug and adjust the memory of a process owned by another account. User Right: Debug programs.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.EnableDelegation">
            <summary>Required to mark user and computer accounts as trusted for delegation. User Right: Enable computer and user accounts to be trusted for delegation.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.Impersonate">
            <summary>Required to impersonate. User Right: Impersonate a client after authentication.</summary>
            <remarks>Windows XP/2000:  This privilege is not supported. Note that this value is supported starting with Windows Server 2003, Windows XP SP2, and Windows 2000 SP4.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.IncreaseBasePriority">
            <summary>Required to increase the base priority of a process. User Right: Increase scheduling priority.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.IncreaseQuota">
            <summary>Required to increase the quota assigned to a process. User Right: Adjust memory quotas for a process.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.IncreaseWorkingSet">
            <summary>Required to allocate more memory for applications that run in the context of users. User Right: Increase a process working set.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.LoadDriver">
            <summary>Required to load or unload a device driver. User Right: Load and unload device drivers.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.LockMemory">
            <summary>Required to lock physical pages in memory. User Right: Lock pages in memory.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.MachineAccount">
            <summary>Required to create a computer account. User Right: Add workstations to domain.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.ManageVolume">
            <summary>Required to enable volume management privileges. User Right: Manage the files on a volume.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.ProfileSingleProcess">
            <summary>Required to gather profiling information for a single process. User Right: Profile single process.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.Relabel">
            <summary>Required to modify the mandatory integrity level of an object. User Right: Modify an object label.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.RemoteShutdown">
            <summary>Required to shut down a system using a network request. User Right: Force shutdown from a remote system.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.Restore">
            <summary>Required to perform restore operations. This privilege causes the system to grant all write access control to any file, regardless of the ACL specified for the file. Any access request other than write is still evaluated with the ACL. Additionally, this privilege enables you to set any valid user or group SID as the owner of a file. User Right: Restore files and directories.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.Security">
            <summary>Required to perform a number of security-related functions, such as controlling and viewing audit messages. This privilege identifies its holder as a security operator. User Right: Manage auditing and security log.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.Shutdown">
            <summary>Required to shut down a local system. User Right: Shut down the system.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.SyncAgent">
            <summary>Required for a domain controller to use the LDAP directory synchronization services. This privilege enables the holder to read all objects and properties in the directory, regardless of the protection on the objects and properties. By default, it is assigned to the Administrator and LocalSystem accounts on domain controllers. User Right: Synchronize directory service data.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.SystemEnvironment">
            <summary>Required to modify the nonvolatile RAM of systems that use this type of memory to store configuration information. User Right: Modify firmware environment values.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.SystemProfile">
            <summary>Required to gather profiling information for the entire system. User Right: Profile system performance.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.SystemTime">
            <summary>Required to modify the system time. User Right: Change the system time.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.TakeOwnership">
            <summary>Required to take ownership of an object without being granted discretionary access. This privilege allows the owner value to be set only to those values that the holder may legitimately assign as the owner of an object. User Right: Take ownership of files or other objects.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.Tcb">
            <summary>This privilege identifies its holder as part of the trusted computer base. Some trusted protected subsystems are granted this privilege. User Right: Act as part of the operating system.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.TimeZone">
            <summary>Required to adjust the time zone associated with the computer's internal clock. User Right: Change the time zone.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.TrustedCredManAccess">
            <summary>Required to access Credential Manager as a trusted caller. User Right: Access Credential Manager as a trusted caller.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.Undock">
            <summary>Required to undock a laptop. User Right: Remove computer from docking station.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.UnsolicitedInput">
            <summary>Required to read unsolicited input from a terminal device. User Right: Not applicable.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Security.Privilege.#ctor(System.String,Alphaleonis.Win32.Security.Privilege)">
            <summary>Create a new <see cref="T:Alphaleonis.Win32.Security.Privilege"/> representing the specified privilege on the specified system.</summary>
            <param name="systemName">Name of the system.</param>
            <param name="privilege">The privilege to copy the privilege name from.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Security.Privilege.LookupDisplayName">
            <summary>Retrieves the display name that represents this privilege.</summary>
            <returns>The display name that represents this privilege.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Security.Privilege.LookupLuid">
            <summary>Retrieves the locally unique identifier (LUID) used on to represent this privilege (on the system from which it originates).</summary>
            <returns>the locally unique identifier (LUID) used on to represent this privilege (on the system from which it originates).</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Security.Privilege.Equals(Alphaleonis.Win32.Security.Privilege)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Security.Privilege.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.</summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.</returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Security.Privilege.GetHashCode">
            <summary>Serves as a hash function for a particular type.</summary>
            <returns>A hash code for the current Object.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Security.Privilege.ToString">
            <summary>Returns the system name for this privilege.</summary>
            <remarks>This is equivalent to <see cref="P:Alphaleonis.Win32.Security.Privilege.Name"/>.</remarks>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Security.Privilege.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Security.Privilege"/> class, representing a privilege with the specified name on the local system.</summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:Alphaleonis.Win32.Security.Privilege.Name">
            <summary>Gets the system name identifying this privilege.</summary>
            <value>The system name identifying this privilege.</value>
        </member>
        <member name="T:Alphaleonis.Win32.Security.PrivilegeEnabler">
            <summary>Used to enable one or more privileges. The privileges specified will be enabled during the lifetime of the instance. Users create an instance of this object in a <c>using</c> statement to ensure that it is properly disposed when the elevated privileges are no longer needed.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Security.PrivilegeEnabler.#ctor(Alphaleonis.Win32.Security.Privilege,Alphaleonis.Win32.Security.Privilege[])">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Security.PrivilegeEnabler"/> class.
            This will enable the privileges specified (unless already enabled), and ensure that they are disabled again when
            the object is disposed. (Any privileges already enabled will not be disabled).
            </summary>
            <param name="privilege">The privilege to enable.</param>
            <param name="privileges">Additional privileges to enable.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Security.PrivilegeEnabler.Dispose">
            <summary>Makes sure any privileges enabled by this instance are disabled.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Security.PrivilegeEnabler.EnabledPrivileges">
            <summary>Gets the enabled privileges. Note that this might not contain all privileges specified to the constructor. Only the privileges actually enabled by this instance is returned.</summary>
            <value>The enabled privileges.</value>
        </member>
        <member name="T:Alphaleonis.Win32.Security.InternalPrivilegeEnabler">
            <summary>
            This object is used to enable a specific privilege for the currently running process during its lifetime. 
            It should be disposed as soon as the elevated privilege is no longer needed.
            For more information see the documentation on AdjustTokenPrivileges on MSDN.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Security.InternalPrivilegeEnabler.#ctor(Alphaleonis.Win32.Security.Privilege)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Security.PrivilegeEnabler"/> class and enabling the specified privilege for the currently running process.</summary>
            <param name="privilegeName">The name of the privilege.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Security.InternalPrivilegeEnabler.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            In this case the privilege previously enabled will be disabled.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Security.InternalPrivilegeEnabler.AdjustPrivilege(System.Boolean)">
            <summary>Adjusts the privilege.</summary>
            <param name="enable">If set to <c>true</c> the privilege will be enabled, otherwise disabled.</param>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.InvalidTransactionException">
            <summary>The transaction handle associated with this operation is not valid.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.InvalidTransactionException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.InvalidTransactionException"/> class.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.InvalidTransactionException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.InvalidTransactionException"/> class.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.InvalidTransactionException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.InvalidTransactionException"/> class.</summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.InvalidTransactionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.InvalidTransactionException"/> class.</summary>
            <param name="info">The data for serializing or deserializing the object.</param>
            <param name="context">The source and destination for the object.</param>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.KernelTransaction">
            <summary>A KTM transaction object for use with the transacted operations in <see cref="N:Alphaleonis.Win32.Filesystem"/></summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.KernelTransaction.#ctor(System.Transactions.Transaction)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.KernelTransaction"/> class, internally using the specified <see cref="T:System.Transactions.Transaction"/>.
            This method allows the usage of methods accepting a <see cref="T:Alphaleonis.Win32.Filesystem.KernelTransaction"/> with an instance of <see cref="T:System.Transactions.Transaction"/>.
            </summary>
            <param name="transaction">The transaction to use for any transactional operations.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.KernelTransaction.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.KernelTransaction"/> class with a default security descriptor, infinite timeout and no description.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.KernelTransaction.#ctor(System.UInt32,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.KernelTransaction"/> class with a default security descriptor.</summary>
            <param name="timeout"><para>The time, in milliseconds, when the transaction will be aborted if it has not already reached the prepared state.</para></param>
            <param name="description">A user-readable description of the transaction. May be <c>null.</c></param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.KernelTransaction.#ctor(System.Security.AccessControl.ObjectSecurity,System.UInt32,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.KernelTransaction"/> class.</summary>
            <param name="securityDescriptor">The <see cref="T:System.Security.AccessControl.ObjectSecurity"/> security descriptor.</param>
            <param name="timeout"><para>The time, in milliseconds, when the transaction will be aborted if it has not already reached the prepared state.</para>
            <para>Specify <c>0</c> to provide an infinite timeout.</para></param>
            <param name="description">A user-readable description of the transaction. May be <c>null.</c></param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.KernelTransaction.Commit">
            <summary>Requests that the specified transaction be committed.</summary>
            <exception cref="T:Alphaleonis.Win32.Filesystem.TransactionAlreadyCommittedException">The transaction was already committed.</exception>
            <exception cref="T:Alphaleonis.Win32.Filesystem.TransactionAlreadyAbortedException">The transaction was already aborted.</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">An error occurred</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.KernelTransaction.Rollback">
            <summary>Requests that the specified transaction be rolled back. This function is synchronous.</summary>
            <exception cref="T:Alphaleonis.Win32.Filesystem.TransactionAlreadyCommittedException">The transaction was already committed.</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">An error occurred</exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.KernelTransaction.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.KernelTransaction.SafeHandle">
            <summary>Gets the safe handle.</summary>
            <value>The safe handle.</value>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.SafeFindFileHandle">
            <summary>Represents a wrapper class for a handle used by the FindFirstFile/FindNextFile Win32 API functions.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.SafeFindFileHandle.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.SafeFindFileHandle"/> class.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.SafeFindFileHandle.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.SafeFindFileHandle"/> class.</summary>
            <param name="handle">The handle.</param>
            <param name="ownsHandle">If set to <c>true</c> [owns handle].</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.SafeFindFileHandle.ReleaseHandle">
            <summary>When overridden in a derived class, executes the code required to free the handle.</summary>
            <returns>true if the handle is released successfully; otherwise, in the event of a catastrophic failure, false. In this case, it generates a ReleaseHandleFailed Managed Debugging Assistant.</returns>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.SafeFindVolumeMountPointHandle">
            <summary>Represents a wrapper class for a handle used by the FindFirstVolumeMountPoint/FindVolumeMountPointClose methods of the Win32 API.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.SafeFindVolumeMountPointHandle.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.SafeFindVolumeMountPointHandle"/> class.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.SafeFindVolumeMountPointHandle.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.SafeFindVolumeHandle"/> class.</summary>
            <param name="handle">The handle.</param>
            <param name="ownsHandle">If set to <c>true</c> [owns handle].</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.SafeFindVolumeMountPointHandle.ReleaseHandle">
            <summary>When overridden in a derived class, executes the code required to free the handle.</summary>
            <returns><c>true</c> if the handle is released successfully; otherwise, in the event of a catastrophic failure, <c>false</c>.
            </returns>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.SafeFindVolumeHandle">
            <summary>Represents a wrapper class for a handle used by the FindFirstVolume/FindNextVolume methods of the Win32 API.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.SafeFindVolumeHandle.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.SafeFindVolumeHandle"/> class.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.SafeFindVolumeHandle.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.SafeFindVolumeHandle"/> class.</summary>
            <param name="handle">The handle.</param>
            <param name="ownsHandle">If set to <c>true</c> [owns handle].</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.SafeFindVolumeHandle.ReleaseHandle">
            <summary>When overridden in a derived class, executes the code required to free the handle.</summary>
            <returns><c>true</c> if the handle is released successfully; otherwise, in the event of a catastrophic failure, <c>false</c>. In this case, it generates a ReleaseHandleFailed Managed Debugging Assistant.
            </returns>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.SafeKernelTransactionHandle">
            <summary>
            Provides a concrete implementation of SafeHandle supporting transactions.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.SafeKernelTransactionHandle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.SafeKernelTransactionHandle"/> class.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.SafeKernelTransactionHandle.ReleaseHandle">
            <summary>
            When overridden in a derived class, executes the code required to free the handle.
            </summary>
            <returns>
            true if the handle is released successfully; otherwise, in the event of a catastrophic failure, false. In this case, it generates a ReleaseHandleFailed Managed Debugging Assistant.
            </returns>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.TransactionAlreadyAbortedException">
            <summary>It is too late to perform the requested operation, since the Transaction has already been aborted.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionAlreadyAbortedException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionAlreadyAbortedException"/> class.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionAlreadyAbortedException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionAlreadyAbortedException"/> class.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionAlreadyAbortedException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionAlreadyAbortedException"/> class.</summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionAlreadyAbortedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionAlreadyAbortedException"/> class.</summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.TransactionAlreadyCommittedException">
            <summary>It is too late to perform the requested operation, since the Transaction has already been committed.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionAlreadyCommittedException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionAlreadyCommittedException"/> class.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionAlreadyCommittedException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionAlreadyCommittedException"/> class.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionAlreadyCommittedException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionAlreadyCommittedException"/> class.</summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionAlreadyCommittedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionAlreadyCommittedException"/> class.</summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.Volume">
            <summary>Static class providing utility methods for working with Microsoft Windows devices and volumes.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.DefineDosDevice(System.String,System.String)">
            <summary>Defines, redefines, or deletes MS-DOS device names.</summary>
            <param name="deviceName">A pointer to an MS-DOS device name string specifying the device the function is defining, redefining, or deleting.</param>
            <param name="targetPath">A pointer to a path string that will implement this device. The string is an MS-DOS path string unless the <see cref="F:Alphaleonis.Win32.Filesystem.DosDeviceAttributes.RawTargetPath"/> flag is specified, in which case this string is a path string.</param>
            <returns><c>true</c> on success, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.DefineDosDevice(System.String,System.String,Alphaleonis.Win32.Filesystem.DosDeviceAttributes)">
            <summary>Defines, redefines, or deletes MS-DOS device names.</summary>
            <param name="deviceName">A pointer to an MS-DOS device name string specifying the device the function is defining, redefining, or deleting.</param>
            <param name="targetPath">A pointer to a path string that will implement this device. The string is an MS-DOS path string unless the <see cref="F:Alphaleonis.Win32.Filesystem.DosDeviceAttributes.RawTargetPath"/> flag is specified, in which case this string is a path string.</param>
            <param name="deviceAttributes">The controllable aspects of the DefineDosDevice function <see cref="T:Alphaleonis.Win32.Filesystem.DosDeviceAttributes"/>flags which will be combined with the default.</param>
            <returns><c>true</c> on success, <c>false</c> otherwise.</returns>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.DeleteDosDevice(System.String)">
            <summary>Deletes an MS-DOS device name.</summary>
            <param name="deviceName">An MS-DOS device name string specifying the device to delete.</param>
            <returns><c>true</c> on success, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.DeleteDosDevice(System.String,System.String)">
            <summary>Deletes an MS-DOS device name.</summary>
            <param name="deviceName">An MS-DOS device name string specifying the device to delete.</param>
            <param name="targetPath">A pointer to a path string that will implement this device.
             The string is an MS-DOS path string unless the <see cref="F:Alphaleonis.Win32.Filesystem.DosDeviceAttributes.RawTargetPath"/> flag is specified, in which case this string is a path string.</param>
            <returns><c>true</c> on success, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.DeleteDosDevice(System.String,System.String,System.Boolean)">
            <summary>Deletes an MS-DOS device name.</summary>
            <param name="deviceName">An MS-DOS device name string specifying the device to delete.</param>
            <param name="targetPath">A pointer to a path string that will implement this device.
            The string is an MS-DOS path string unless the <see cref="F:Alphaleonis.Win32.Filesystem.DosDeviceAttributes.RawTargetPath"/> flag is specified, in which case this string is a path string.</param>
            <param name="exactMatch">Only delete MS-DOS device on an exact name match. If exactMatch is true, targetPath must be the same path used to create the mapping.</param>
            <returns><c>true</c> on success, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.DeleteDosDevice(System.String,System.String,System.Boolean,Alphaleonis.Win32.Filesystem.DosDeviceAttributes)">
            <summary>Deletes an MS-DOS device name.</summary>
            <param name="deviceName">An MS-DOS device name string specifying the device to delete.</param>
            <param name="targetPath">A pointer to a path string that will implement this device.
            The string is an MS-DOS path string unless the <see cref="F:Alphaleonis.Win32.Filesystem.DosDeviceAttributes.RawTargetPath"/> flag is specified, in which case this string is a path string.</param>
            <param name="exactMatch">Only delete MS-DOS device on an exact name match. If exactMatch is true, targetPath must be the same path used to create the mapping.</param>
            <param name="deviceAttributes">The controllable aspects of the DefineDosDevice function <see cref="T:Alphaleonis.Win32.Filesystem.DosDeviceAttributes"/> flags which will be combined with the default.</param>
            <returns><c>true</c> on success, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.QueryAllDosDevices">
            <summary>Retrieves a list of all existing MS-DOS device names.</summary>
            <returns>An IEnumerable list of Strings of one or more existing MS-DOS device names.</returns>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.QueryAllDosDevices(System.String)">
            <summary>Retrieves a list of all existing MS-DOS device names.</summary>
            <param name="deviceName">
            (Optional, default: null) An MS-DOS device name string specifying the target of the query.
            This parameter can be "sort". In that case a sorted list of all existing MS-DOS device names is returned.
            This parameter can be null. In that case, the <see cref="M:Alphaleonis.Win32.Filesystem.Volume.QueryDosDevice(System.String,System.String[])"/> function will store a list of all
            existing MS-DOS device names into the buffer.
            </param>
            <returns>An IEnumerable list of Strings of one or more existing MS-DOS device names.</returns>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.QueryDosDevice(System.String,System.String[])">
            <summary>Retrieves information about MS-DOS device names. The function can obtain the current mapping for a
            particular MS-DOS device name. The function can also obtain a list of all existing MS-DOS device names.
            </summary>
            <param name="deviceName">
            An MS-DOS device name string specifying the target of the query.
            This parameter can be null. In that case, the QueryDosDevice function will store a list of all
            existing MS-DOS device names into the buffer.
            </param>
            <param name="options">(Optional, default: "false") If options[0] = "true", a sorted list will be returned.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> object with one or more existing MS-DOS device names.</returns>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetCurrentDriveType">
            <summary>Determines, based on the root of the current directory, whether a disk drive is a removable, fixed, CD-ROM, RAM disk, or network drive.</summary>
            <returns>A <see cref="T:System.IO.DriveType"/> object.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetDriveFormat(System.String)">
            <summary>Gets the name of the file system, such as NTFS or FAT32.</summary>
            <param name="rootPathName">The root directory for the drive.</param>
            <returns>The name of the file system on the specified drive or <see cref="F:System.String.Empty"/> on failure or if not available.</returns>
            <remarks>Use DriveFormat to determine what formatting a drive uses.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetDriveType(System.String)">
            <summary>Determines whether a disk drive is a removable, fixed, CD-ROM, RAM disk, or network drive.</summary>
            <param name="rootPathName">The root directory for the drive. If this parameter is null, the function uses the root of the current directory.</param>
            <returns>A <see cref="T:System.IO.DriveType"/> object.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetDiskFreeSpace(System.String)">
            <summary>Retrieves information about the amount of space that is available on a disk volume, which is the total amount of space, the total amount of free space, and the total amount of free space available to the user that is associated with the calling thread.</summary>
            <param name="drivePath">The root directory of the disk for which information is to be returned.</param>
            <returns>A <see ref="T:Alphaleonis.Win32.Filesystem.DiskSpaceInfo"/> structure object containing the requested information or null if any of the depended methods fails.</returns>
            <remarks>The calling application must have FILE_LIST_DIRECTORY access rights for this directory.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetDiskFreeSpaceClusters(System.String)">
            <summary>Retrieves information about the specified disk, including the amount of free space on the disk.</summary>
            <param name="drivePath">The root directory of the disk for which information is to be returned.
            Furthermore, a drive specification must have a trailing backslash (for example, "C:\").</param>
            <returns>A <see ref="T:Alphaleonis.Win32.Filesystem.DiskSpaceInfo"/> structure object containing the requested information or null if any of the depended methods fails.</returns>
            <remarks>The calling application must have FILE_LIST_DIRECTORY access rights for this directory.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.IsReady(System.String)">
            <summary>Gets a value indicating whether a drive is ready.</summary>
            <param name="drivePath">A valid drive path or drive letter. This can be either uppercase or lowercase, 'a' to 'z' or a network share in the format: \\server\share</param>
            <returns><c>true</c> if the drive is ready; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.DeleteCurrentVolumeLabel">
            <summary>Deletes the label of the file system volume that is the root of the current directory.</summary>
            <returns><c>true</c> on success, <c>false</c> otherwise.</returns>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"></exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.DeleteVolumeLabel(System.String)">
            <summary>Deletes the label of a file system volume.</summary>
            <param name="rootPathName">The root directory of a file system volume. This is the volume the function will label.</param>
            <returns><c>true</c> on success, <c>false</c> otherwise.</returns>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"></exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetVolumeLabel(System.String)">
            <summary>Retrieve the label of a file system volume.</summary>
            <param name="rootPathName">
            A pointer to a string that contains the volume's Drive letter (for example, X:\)
            or the path of a mounted folder that is associated with the volume (for example, Y:\MountX\).
            If this parameter is null, the root of the current directory is used.
            </param>
            <returns>The the label of the file system volume. This function can return an empty string since a volume label is generally not mandatory.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.SetCurrentVolumeLabel(System.String)">
            <summary>Sets the label of the file system volume that is the root of the current directory.</summary>
            <param name="volumeName">A name for the volume. A pointer to a string that contains
            the new label for the volume. If this parameter is null, the function deletes any
            existing label from the specified volume and does not assign a new label.
            </param>
            <returns><c>true</c> on success, <c>false</c> otherwise.</returns>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"></exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.SetVolumeLabel(System.String,System.String)">
            <summary>Sets the label of a file system volume.</summary>
            <param name="rootPathName">
            A pointer to a string that contains the volume's Drive letter (for example, X:\)
            or the path of a mounted folder that is associated with the volume (for example, Y:\MountX\).
            If this parameter is null, the root of the current directory is used.
            </param>
            <param name="volumeName">A name for the volume. A pointer to a string that contains
            the new label for the volume. If this parameter is null, the function deletes any
            existing label from the specified volume and does not assign a new label.
            </param>
            <returns><c>true</c> on success, <c>false</c> otherwise.</returns>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"></exception>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetDeviceForVolumeName(System.String)">
            <summary>Retrieves the Win32 Device name from the Volume name.</summary>
            <param name="volumeName">Name of the Volume</param>
            <returns>The Win32 Device name from the Volume name or <see cref="F:System.String.Empty"/> on error or if unavailable.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetDisplayNameForVolume(System.String)">
            <summary>Gets the shortest display name for the specified <paramref name="volumeName"/>.</summary>
            <param name="volumeName">A volume <see cref="T:System.Guid"/> path: \\?\Volume{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}\</param>
            <returns>The shortest display name for the specified volume found, or <see cref="F:System.String.Empty"/> if no display names were found.</returns>
            <remarks>This method basically returns the shortest string returned by <see cref="M:Alphaleonis.Win32.Filesystem.Volume.GetVolumePathNamesForVolume(System.String)"/></remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetUniqueVolumeNameForPath(System.String,System.Boolean[])">
            <summary>Get the unique volume name for the given path.</summary>
            <param name="volumePathName">A pointer to the input path string. Both absolute and relative file and directory names,
            for example <see cref="F:Alphaleonis.Win32.Filesystem.Path.ParentDirectoryPrefix"/>, are acceptable in this path.
            If you specify a relative directory or file name without a volume qualifier, GetUniqueVolumeNameForPath returns the Drive letter of the current volume.
            </param>
            <param name="options">options[0] = true: Remove the trailing backslash.</param>
            <returns>
            The unique name of the Volume Mount Point, a volume <see cref="T:System.Guid"/> path: \\?\Volume{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}\
            If not available or if the function fails, the return value is <paramref name="volumePathName"/>.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetVolumeInformation(System.String)">
            <summary>Retrieves information about the file system and volume associated with the specified root directory or filestream.</summary>
            <param name="volumePath">A path that contains the root directory.</param>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.VolumeInfo"/> instance describing the volume associatied with the specified root directory.</returns>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetVolumeInformation(System.IO.FileStream)">
            <summary>Retrieves information about the file system and volume associated with the specified root directory or filestream.</summary>
            <param name="volumeHandle">A pointer to a <see cref="T:System.IO.FileStream"/> handle.</param>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.VolumeInfo"/> instance describing the volume associatied with the specified root directory.</returns>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetVolumes">
            <summary>Retrieves the name of a volume on a computer. FindFirstVolume is used to begin scanning the volumes of a computer.</summary>
            <returns>An IEnumerable string containing the volume names on the computer.</returns>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetVolumePathName(System.String)">
            <summary>Retrieves the volume mount point where the specified path is mounted.
            Returns the nearest volume root path for a given directory.
            </summary> 
            <param name="path">The path to the volume, for example: C:\Windows</param>
            <returns>The volume path name, for example: C:\windows --&gt; C:\, in case of failure <paramref name="path"/> is returned.</returns>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetVolumePathNamesForVolume(System.String)">
            <summary>Retrieves a list of Drive letters and mounted folder paths for the specified volume.</summary>
            <param name="volumeGuid">A volume <see cref="T:System.Guid"/> path: \\?\Volume{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}\</param>
            <returns>An IEnumerable string containing the path names for the specified volume.</returns>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.IsSame(System.String,System.String)">
            <summary>Determines whether the volume of two filesystem objects is the same.</summary>
            <param name="fsoPath1">The first filesystem ojbect with full path information.</param>
            <param name="fsoPath2">The second filesystem object with full path information.</param>
            <returns><c>true</c> if both filesytem objects reside on the same volume, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.IsVolume(System.String)">
            <summary>Determines whether the specified volume name is a defined volume on the current computer.</summary>
            <param name="volumeMountPoint">A string representing the path to a volume. For example: "C:\", "D:", "P:\Mountpoint\Backup", "\\?\Volume{c0580d5e-2ad6-11dc-9924-806e6f6e6963}\"</param>
            <returns><c>true</c> on success, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.DeleteVolumeMountPoint(System.String)">
            <summary>Deletes a Drive letter or mounted folder.</summary>
            <param name="volumeMountPoint">The Drive letter or mounted folder to be deleted. For example, X:\ or Y:\MountX\.</param>
            <returns><c>true</c> on success, <c>false</c> otherwise.</returns>
            <remarks>Deleting a mounted folder does not cause the underlying directory to be deleted.</remarks>
            <remarks>It's not an error to attempt to unmount a volume from a volume mount point when there is no volume actually mounted at that volume mount point.</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetVolumeGuid(System.String)">
            <summary>Retrieves a volume <see cref="T:System.Guid"/> path for the volume that is associated with the specified volume mount point ( drive letter, volume GUID path, or mounted folder).</summary>
            <param name="volumeMountPoint">The path of a mounted folder (for example, "Y:\MountX\") or a drive letter (for example, "X:\").</param>
            <returns>The unique volume name of the form: "\\?\Volume{GUID}\" where <see cref="T:System.Guid"/> is the GUID that identifies the volume.</returns>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetVolumeMountPoints(System.String)">
            <summary>Retrieves the names of all mounted folders (volume mount points) on the specified volume.</summary>
            <param name="volumeGuid">A <see langref="String"/> containing the volume <see cref="T:System.Guid"/>.</param>
            <returns>The names of all volume mount points on the specified volume or <see cref="F:System.String.Empty"/> on error or if unavailable.</returns>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.SetVolumeMountPoint(System.String,System.String)">
            <summary>Associates a volume with a Drive letter or a directory on another volume.</summary>
            <param name="volumeMountPoint">
            The user-mode path to be associated with the volume. This may be a Drive letter (for example, "X:\")
            or a directory on another volume (for example, "Y:\MountX\").
            </param>
            <param name="volumeGuid">A <see langref="String"/> containing the volume <see cref="T:System.Guid"/>.</param>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetVolumeInformationInternal(System.String,System.IO.FileStream,System.Boolean)">
            <summary>Unified method GetVolumeInformationInternal() to retrieve information about the file system and volume associated with the specified root directory or filestream.</summary>
            <param name="volumePath">A path that contains the root directory.</param>
            <param name="volumeHandle">A pointer to a <see cref="T:System.IO.FileStream"/> handle.</param>
            <param name="raiseException">If <c>true</c> raises Exceptions, when <c>false</c> no Exceptions are raised and the method returns <see langref="null"/>.</param>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.VolumeInfo"/> instance describing the volume associatied with the specified root directory. See <paramref name="raiseException"/></returns>
            <remarks>Either use <paramref name="volumePath"/> or <paramref name="volumeHandle"/>, not both.</remarks>
            <exception cref="M:Alphaleonis.Win32.NativeError.ThrowException"/>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.VolumeInfo">
            <summary>Contains information about a filesystem Volume.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.VolumeInfo.#ctor">
            <summary>Create a VolumeInfo instance.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.VolumeInfo.ToString">
            <summary>Returns the full path of the volume.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.FullPath">
            <summary>The full path to the volume.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.Name">
            <summary>Gets the name of the volume.</summary>
            <value>The name of the volume.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.CasePreservedNames">
            <summary>The specified volume supports preserved case of file names when it places a name on disk.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.CaseSensitiveSearch">
            <summary>The specified volume supports case-sensitive file names.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.Guid">
            <summary>The volume GUID.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.UnicodeOnDisk">
            <summary>The specified volume supports Unicode in file names as they appear on disk.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.PersistentAcls">
            <summary>The specified volume preserves and enforces access control lists (ACL).</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.Compression">
            <summary>The specified volume supports file-based compression.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.VolumeQuotas">
            <summary>The specified volume supports disk quotas.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.SupportsSparseFiles">
            <summary>The specified volume supports sparse files.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.SupportsReparsePoints">
            <summary>The specified volume supports re-parse points.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.SupportsRemoteStorage">
            <summary>The specified volume supports remote storage. (This property does not appear on MSDN)</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.VolumeIsCompressed">
            <summary>The specified volume is a compressed volume, for example, a DoubleSpace volume.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.SupportsObjectIds">
            <summary>The specified volume supports object identifiers.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.SupportsEncryption">
            <summary>The specified volume supports the Encrypted File System (EFS).</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.NamedStreams">
            <summary>The specified volume supports named streams.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.ReadOnlyVolume">
            <summary>The specified volume is read-only.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.SequentialWriteOnce">
            <summary>The specified volume supports a single sequential write.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.SupportsTransactions">
            <summary>The specified volume supports transactions.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.SupportsHardLinks">
            <summary>The specified volume supports hard links.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.SupportsExtendedAttributes">
            <summary>The specified volume supports extended attributes.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.SupportsOpenByFileId">
            <summary>The file system supports open by FileID.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.SupportsUsnJournal">
            <summary>The specified volume supports update sequence number (USN) journals.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.SerialNumber">
            <summary>Gets the volume serial number that the operating system assigns when a hard disk is formatted.</summary>
            <value>The volume serial number that the operating system assigns when a hard disk is formatted.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.MaximumComponentLength">
            <summary>Gets the maximum length of a file name component that the file system supports.</summary>
            <value>The maximum length of a file name component that the file system supports.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.FileSystemName">
            <summary>Gets the name of the file system, for example, the FAT file system or the NTFS file system.</summary>
            <value>The name of the file system.</value>
        </member>
        <member name="F:Alphaleonis.Win32.Win32Errors.ERROR_TRANSACTION_NOT_ACTIVE">
            <summary>The requested operation was made in the context of a transaction that is no longer active.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Win32Errors.ERROR_TRANSACTION_REQUEST_NOT_VALID">
            <summary>The requested operation is not valid on the Transaction object in its current state.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Win32Errors.ERROR_TRANSACTIONAL_CONFLICT">
            <summary>The function attempted to use a name that is reserved for use by another transaction.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Win32Errors.ERROR_TRANSACTIONS_UNSUPPORTED_REMOTE">
            <summary>The remote server or share does not support transacted file operations.</summary>
        </member>
    </members>
</doc>
